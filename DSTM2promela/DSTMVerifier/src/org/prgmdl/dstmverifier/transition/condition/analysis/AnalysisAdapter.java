/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.analysis;

import java.util.*;
import org.prgmdl.dstmverifier.transition.condition.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseACondCondition(ACondCondition node)
    {
        defaultCase(node);
    }

    public void caseANestedTerm(ANestedTerm node)
    {
        defaultCase(node);
    }

    public void caseAUnaryTerm(AUnaryTerm node)
    {
        defaultCase(node);
    }

    public void caseASimpleTerm(ASimpleTerm node)
    {
        defaultCase(node);
    }

    public void caseABinaryTerm(ABinaryTerm node)
    {
        defaultCase(node);
    }

    public void caseAAndopBinop(AAndopBinop node)
    {
        defaultCase(node);
    }

    public void caseAOropBinop(AOropBinop node)
    {
        defaultCase(node);
    }

    public void caseALeftFirst(ALeftFirst node)
    {
        defaultCase(node);
    }

    public void caseAMetaFirst(AMetaFirst node)
    {
        defaultCase(node);
    }

    public void caseARightSecond(ARightSecond node)
    {
        defaultCase(node);
    }

    public void caseAMetaSecond(AMetaSecond node)
    {
        defaultCase(node);
    }

    public void caseATrueAtomic(ATrueAtomic node)
    {
        defaultCase(node);
    }

    public void caseAFalseAtomic(AFalseAtomic node)
    {
        defaultCase(node);
    }

    public void caseAEquiopAtomic(AEquiopAtomic node)
    {
        defaultCase(node);
    }

    public void caseACompopAtomic(ACompopAtomic node)
    {
        defaultCase(node);
    }

    public void caseASizecondAtomic(ASizecondAtomic node)
    {
        defaultCase(node);
    }

    public void caseATrmlistAtomic(ATrmlistAtomic node)
    {
        defaultCase(node);
    }

    public void caseAFullcondSize(AFullcondSize node)
    {
        defaultCase(node);
    }

    public void caseAEmptycondSize(AEmptycondSize node)
    {
        defaultCase(node);
    }

    public void caseANeqEqop(ANeqEqop node)
    {
        defaultCase(node);
    }

    public void caseAEqEqop(AEqEqop node)
    {
        defaultCase(node);
    }

    public void caseALteqCmpop(ALteqCmpop node)
    {
        defaultCase(node);
    }

    public void caseALtCmpop(ALtCmpop node)
    {
        defaultCase(node);
    }

    public void caseAGteqCmpop(AGteqCmpop node)
    {
        defaultCase(node);
    }

    public void caseAGtCmpop(AGtCmpop node)
    {
        defaultCase(node);
    }

    public void caseASimpleLval(ASimpleLval node)
    {
        defaultCase(node);
    }

    public void caseAComposedLval(AComposedLval node)
    {
        defaultCase(node);
    }

    public void caseASimpleRval(ASimpleRval node)
    {
        defaultCase(node);
    }

    public void caseAComposedRval(AComposedRval node)
    {
        defaultCase(node);
    }

    public void caseATrueExpr(ATrueExpr node)
    {
        defaultCase(node);
    }

    public void caseAFalseExpr(AFalseExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdExpr(AIdExpr node)
    {
        defaultCase(node);
    }

    public void caseAChnExpr(AChnExpr node)
    {
        defaultCase(node);
    }

    public void caseANumExpr(ANumExpr node)
    {
        defaultCase(node);
    }

    public void caseADcareExpr(ADcareExpr node)
    {
        defaultCase(node);
    }

    public void caseAEnumExpr(AEnumExpr node)
    {
        defaultCase(node);
    }

    public void caseALenChnExpr(ALenChnExpr node)
    {
        defaultCase(node);
    }

    public void caseAPlusMathop(APlusMathop node)
    {
        defaultCase(node);
    }

    public void caseAMinusMathop(AMinusMathop node)
    {
        defaultCase(node);
    }

    public void caseAStarMathop(AStarMathop node)
    {
        defaultCase(node);
    }

    public void caseASlashMathop(ASlashMathop node)
    {
        defaultCase(node);
    }

    public void caseASimpleTrmlist(ASimpleTrmlist node)
    {
        defaultCase(node);
    }

    public void caseAComplexTrmlist(AComplexTrmlist node)
    {
        defaultCase(node);
    }

    public void caseAChnIdChnName(AChnIdChnName node)
    {
        defaultCase(node);
    }

    public void caseAIntBasic(AIntBasic node)
    {
        defaultCase(node);
    }

    public void caseABoolBasic(ABoolBasic node)
    {
        defaultCase(node);
    }

    public void caseAChnBasic(AChnBasic node)
    {
        defaultCase(node);
    }

    public void caseAENameBasic(AENameBasic node)
    {
        defaultCase(node);
    }

    public void caseAVarIdVarName(AVarIdVarName node)
    {
        defaultCase(node);
    }

    public void caseAChIdChname(AChIdChname node)
    {
        defaultCase(node);
    }

    public void caseALIdLiteral(ALIdLiteral node)
    {
        defaultCase(node);
    }

    public void caseAEIdEName(AEIdEName node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTChn(TChn node)
    {
        defaultCase(node);
    }

    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFull(TFull node)
    {
        defaultCase(node);
    }

    public void caseTEmpty(TEmpty node)
    {
        defaultCase(node);
    }

    public void caseTSpaces(TSpaces node)
    {
        defaultCase(node);
    }

    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    public void caseTExternal(TExternal node)
    {
        defaultCase(node);
    }

    public void caseTInternal(TInternal node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTNumbers(TNumbers node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    public void caseTEmark(TEmark node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTColonColon(TColonColon node)
    {
        defaultCase(node);
    }

    public void caseTAmpAmp(TAmpAmp node)
    {
        defaultCase(node);
    }

    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTAmp(TAmp node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTDcsymb(TDcsymb node)
    {
        defaultCase(node);
    }

    public void caseTPlusPlus(TPlusPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinusMinus(TMinusMinus node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTSharp(TSharp node)
    {
        defaultCase(node);
    }

    public void caseTOpaqueexpr(TOpaqueexpr node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
