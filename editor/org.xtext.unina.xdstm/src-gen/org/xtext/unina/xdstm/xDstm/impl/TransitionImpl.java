/**
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.xDstm.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.unina.xdstm.xDstm.Destination;
import org.xtext.unina.xdstm.xDstm.EnteringNodeAbs;
import org.xtext.unina.xdstm.xDstm.ExitingNode;
import org.xtext.unina.xdstm.xDstm.Source;
import org.xtext.unina.xdstm.xDstm.Transition;
import org.xtext.unina.xdstm.xDstm.XDstmPackage;
import org.xtext.unina.xdstm.xDstm.requirements;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Transition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getRequirements <em>Requirements</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getSource <em>Source</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getExiting_node <em>Exiting node</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getEntering_node <em>Entering node</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#isIs_preemptive <em>Is preemptive</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.TransitionImpl#getPar_instantiation <em>Par instantiation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TransitionImpl extends MinimalEObjectImpl.Container implements Transition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRequirements() <em>Requirements</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequirements()
   * @generated
   * @ordered
   */
  protected requirements requirements;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected Source source;

  /**
   * The cached value of the '{@link #getExiting_node() <em>Exiting node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExiting_node()
   * @generated
   * @ordered
   */
  protected ExitingNode exiting_node;

  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected Destination destination;

  /**
   * The cached value of the '{@link #getEntering_node() <em>Entering node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntering_node()
   * @generated
   * @ordered
   */
  protected EnteringNodeAbs entering_node;

  /**
   * The default value of the '{@link #isIs_preemptive() <em>Is preemptive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_preemptive()
   * @generated
   * @ordered
   */
  protected static final boolean IS_PREEMPTIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIs_preemptive() <em>Is preemptive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIs_preemptive()
   * @generated
   * @ordered
   */
  protected boolean is_preemptive = IS_PREEMPTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected static final String TRIGGER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected String trigger = TRIGGER_EDEFAULT;

  /**
   * The default value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected String condition = CONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<String> actions;

  /**
   * The cached value of the '{@link #getPar_instantiation() <em>Par instantiation</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPar_instantiation()
   * @generated
   * @ordered
   */
  protected EList<String> par_instantiation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDstmPackage.Literals.TRANSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public requirements getRequirements()
  {
    return requirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRequirements(requirements newRequirements, NotificationChain msgs)
  {
    requirements oldRequirements = requirements;
    requirements = newRequirements;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__REQUIREMENTS, oldRequirements, newRequirements);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequirements(requirements newRequirements)
  {
    if (newRequirements != requirements)
    {
      NotificationChain msgs = null;
      if (requirements != null)
        msgs = ((InternalEObject)requirements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XDstmPackage.TRANSITION__REQUIREMENTS, null, msgs);
      if (newRequirements != null)
        msgs = ((InternalEObject)newRequirements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XDstmPackage.TRANSITION__REQUIREMENTS, null, msgs);
      msgs = basicSetRequirements(newRequirements, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__REQUIREMENTS, newRequirements, newRequirements));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Source getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = (Source)eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDstmPackage.TRANSITION__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Source basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSource(Source newSource)
  {
    Source oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExitingNode getExiting_node()
  {
    if (exiting_node != null && exiting_node.eIsProxy())
    {
      InternalEObject oldExiting_node = (InternalEObject)exiting_node;
      exiting_node = (ExitingNode)eResolveProxy(oldExiting_node);
      if (exiting_node != oldExiting_node)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDstmPackage.TRANSITION__EXITING_NODE, oldExiting_node, exiting_node));
      }
    }
    return exiting_node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExitingNode basicGetExiting_node()
  {
    return exiting_node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExiting_node(ExitingNode newExiting_node)
  {
    ExitingNode oldExiting_node = exiting_node;
    exiting_node = newExiting_node;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__EXITING_NODE, oldExiting_node, exiting_node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Destination getDestination()
  {
    if (destination != null && destination.eIsProxy())
    {
      InternalEObject oldDestination = (InternalEObject)destination;
      destination = (Destination)eResolveProxy(oldDestination);
      if (destination != oldDestination)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDstmPackage.TRANSITION__DESTINATION, oldDestination, destination));
      }
    }
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Destination basicGetDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDestination(Destination newDestination)
  {
    Destination oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__DESTINATION, oldDestination, destination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnteringNodeAbs getEntering_node()
  {
    if (entering_node != null && entering_node.eIsProxy())
    {
      InternalEObject oldEntering_node = (InternalEObject)entering_node;
      entering_node = (EnteringNodeAbs)eResolveProxy(oldEntering_node);
      if (entering_node != oldEntering_node)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDstmPackage.TRANSITION__ENTERING_NODE, oldEntering_node, entering_node));
      }
    }
    return entering_node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnteringNodeAbs basicGetEntering_node()
  {
    return entering_node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEntering_node(EnteringNodeAbs newEntering_node)
  {
    EnteringNodeAbs oldEntering_node = entering_node;
    entering_node = newEntering_node;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__ENTERING_NODE, oldEntering_node, entering_node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIs_preemptive()
  {
    return is_preemptive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIs_preemptive(boolean newIs_preemptive)
  {
    boolean oldIs_preemptive = is_preemptive;
    is_preemptive = newIs_preemptive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__IS_PREEMPTIVE, oldIs_preemptive, is_preemptive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTrigger()
  {
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTrigger(String newTrigger)
  {
    String oldTrigger = trigger;
    trigger = newTrigger;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__TRIGGER, oldTrigger, trigger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(String newCondition)
  {
    String oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.TRANSITION__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getActions()
  {
    if (actions == null)
    {
      actions = new EDataTypeEList<String>(String.class, this, XDstmPackage.TRANSITION__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getPar_instantiation()
  {
    if (par_instantiation == null)
    {
      par_instantiation = new EDataTypeEList<String>(String.class, this, XDstmPackage.TRANSITION__PAR_INSTANTIATION);
    }
    return par_instantiation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDstmPackage.TRANSITION__REQUIREMENTS:
        return basicSetRequirements(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDstmPackage.TRANSITION__NAME:
        return getName();
      case XDstmPackage.TRANSITION__REQUIREMENTS:
        return getRequirements();
      case XDstmPackage.TRANSITION__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case XDstmPackage.TRANSITION__EXITING_NODE:
        if (resolve) return getExiting_node();
        return basicGetExiting_node();
      case XDstmPackage.TRANSITION__DESTINATION:
        if (resolve) return getDestination();
        return basicGetDestination();
      case XDstmPackage.TRANSITION__ENTERING_NODE:
        if (resolve) return getEntering_node();
        return basicGetEntering_node();
      case XDstmPackage.TRANSITION__IS_PREEMPTIVE:
        return isIs_preemptive();
      case XDstmPackage.TRANSITION__TRIGGER:
        return getTrigger();
      case XDstmPackage.TRANSITION__CONDITION:
        return getCondition();
      case XDstmPackage.TRANSITION__ACTIONS:
        return getActions();
      case XDstmPackage.TRANSITION__PAR_INSTANTIATION:
        return getPar_instantiation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDstmPackage.TRANSITION__NAME:
        setName((String)newValue);
        return;
      case XDstmPackage.TRANSITION__REQUIREMENTS:
        setRequirements((requirements)newValue);
        return;
      case XDstmPackage.TRANSITION__SOURCE:
        setSource((Source)newValue);
        return;
      case XDstmPackage.TRANSITION__EXITING_NODE:
        setExiting_node((ExitingNode)newValue);
        return;
      case XDstmPackage.TRANSITION__DESTINATION:
        setDestination((Destination)newValue);
        return;
      case XDstmPackage.TRANSITION__ENTERING_NODE:
        setEntering_node((EnteringNodeAbs)newValue);
        return;
      case XDstmPackage.TRANSITION__IS_PREEMPTIVE:
        setIs_preemptive((Boolean)newValue);
        return;
      case XDstmPackage.TRANSITION__TRIGGER:
        setTrigger((String)newValue);
        return;
      case XDstmPackage.TRANSITION__CONDITION:
        setCondition((String)newValue);
        return;
      case XDstmPackage.TRANSITION__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends String>)newValue);
        return;
      case XDstmPackage.TRANSITION__PAR_INSTANTIATION:
        getPar_instantiation().clear();
        getPar_instantiation().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDstmPackage.TRANSITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case XDstmPackage.TRANSITION__REQUIREMENTS:
        setRequirements((requirements)null);
        return;
      case XDstmPackage.TRANSITION__SOURCE:
        setSource((Source)null);
        return;
      case XDstmPackage.TRANSITION__EXITING_NODE:
        setExiting_node((ExitingNode)null);
        return;
      case XDstmPackage.TRANSITION__DESTINATION:
        setDestination((Destination)null);
        return;
      case XDstmPackage.TRANSITION__ENTERING_NODE:
        setEntering_node((EnteringNodeAbs)null);
        return;
      case XDstmPackage.TRANSITION__IS_PREEMPTIVE:
        setIs_preemptive(IS_PREEMPTIVE_EDEFAULT);
        return;
      case XDstmPackage.TRANSITION__TRIGGER:
        setTrigger(TRIGGER_EDEFAULT);
        return;
      case XDstmPackage.TRANSITION__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
      case XDstmPackage.TRANSITION__ACTIONS:
        getActions().clear();
        return;
      case XDstmPackage.TRANSITION__PAR_INSTANTIATION:
        getPar_instantiation().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDstmPackage.TRANSITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case XDstmPackage.TRANSITION__REQUIREMENTS:
        return requirements != null;
      case XDstmPackage.TRANSITION__SOURCE:
        return source != null;
      case XDstmPackage.TRANSITION__EXITING_NODE:
        return exiting_node != null;
      case XDstmPackage.TRANSITION__DESTINATION:
        return destination != null;
      case XDstmPackage.TRANSITION__ENTERING_NODE:
        return entering_node != null;
      case XDstmPackage.TRANSITION__IS_PREEMPTIVE:
        return is_preemptive != IS_PREEMPTIVE_EDEFAULT;
      case XDstmPackage.TRANSITION__TRIGGER:
        return TRIGGER_EDEFAULT == null ? trigger != null : !TRIGGER_EDEFAULT.equals(trigger);
      case XDstmPackage.TRANSITION__CONDITION:
        return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
      case XDstmPackage.TRANSITION__ACTIONS:
        return actions != null && !actions.isEmpty();
      case XDstmPackage.TRANSITION__PAR_INSTANTIATION:
        return par_instantiation != null && !par_instantiation.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", is_preemptive: ");
    result.append(is_preemptive);
    result.append(", trigger: ");
    result.append(trigger);
    result.append(", condition: ");
    result.append(condition);
    result.append(", actions: ");
    result.append(actions);
    result.append(", par_instantiation: ");
    result.append(par_instantiation);
    result.append(')');
    return result.toString();
  }

} //TransitionImpl
