/*
 * generated by Xtext 2.13.0
 */
grammar InternalXdstmdata;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.unina.xdstmdata.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.unina.xdstmdata.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.unina.xdstmdata.services.XdstmdataGrammarAccess;

}

@parser::members {

 	private XdstmdataGrammarAccess grammarAccess;

    public InternalXdstmdataParser(TokenStream input, XdstmdataGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "tTypes";
   	}

   	@Override
   	protected XdstmdataGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuletTypes
entryRuletTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTTypesRule()); }
	iv_ruletTypes=ruletTypes
	{ $current=$iv_ruletTypes.current; }
	EOF;

// Rule tTypes
ruletTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getTEnumTEnumParserRuleCall_0_0_0());
					}
					lv_tEnum_0_0=ruletEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"tEnum",
							lv_tEnum_0_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.tEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getTCompoundTCompoundParserRuleCall_0_1_0());
					}
					lv_tCompound_1_0=ruletCompound
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"tCompound",
							lv_tCompound_1_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.tCompound");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getTMultitypeTMultitypeParserRuleCall_0_2_0());
					}
					lv_tMultitype_2_0=ruletMultitype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"tMultitype",
							lv_tMultitype_2_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.tMultitype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getCIntchannelCIntchannelParserRuleCall_1_0_0());
					}
					lv_cIntchannel_3_0=rulecIntchannel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"cIntchannel",
							lv_cIntchannel_3_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.cIntchannel");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getCExtchannelCExtchannelParserRuleCall_1_1_0());
					}
					lv_cExtchannel_4_0=rulecExtchannel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"cExtchannel",
							lv_cExtchannel_4_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.cExtchannel");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTTypesAccess().getVVariableVVariableParserRuleCall_1_2_0());
					}
					lv_vVariable_5_0=rulevVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTTypesRule());
						}
						add(
							$current,
							"vVariable",
							lv_vVariable_5_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.vVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletEnum
entryRuletEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTEnumRule()); }
	iv_ruletEnum=ruletEnum
	{ $current=$iv_ruletEnum.current; }
	EOF;

// Rule tEnum
ruletEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getTEnumAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTEnumAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTEnumRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTEnumAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_literals_3_0=RULE_ID
				{
					newLeafNode(lv_literals_3_0, grammarAccess.getTEnumAccess().getLiteralsIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTEnumRule());
					}
					addWithLastConsumed(
						$current,
						"literals",
						lv_literals_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTEnumAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_literals_5_0=RULE_ID
					{
						newLeafNode(lv_literals_5_0, grammarAccess.getTEnumAccess().getLiteralsIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTEnumRule());
						}
						addWithLastConsumed(
							$current,
							"literals",
							lv_literals_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTEnumAccess().getRightCurlyBracketKeyword_5());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getTEnumAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuletCompound
entryRuletCompound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTCompoundRule()); }
	iv_ruletCompound=ruletCompound
	{ $current=$iv_ruletCompound.current; }
	EOF;

// Rule tCompound
ruletCompound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getTCompoundAccess().getStructKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTCompoundAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTCompoundRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTCompoundAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTCompoundAccess().getSubtypesSubtypeParserRuleCall_3_0());
				}
				lv_subtypes_3_0=rulesubtype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTCompoundRule());
					}
					add(
						$current,
						"subtypes",
						lv_subtypes_3_0,
						"org.xtext.unina.xdstmdata.Xdstmdata.subtype");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTCompoundAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTCompoundAccess().getSubtypesSubtypeParserRuleCall_4_1_0());
					}
					lv_subtypes_5_0=rulesubtype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTCompoundRule());
						}
						add(
							$current,
							"subtypes",
							lv_subtypes_5_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.subtype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTCompoundAccess().getRightCurlyBracketKeyword_5());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getTCompoundAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRulesubtype
entryRulesubtype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtypeRule()); }
	iv_rulesubtype=rulesubtype
	{ $current=$iv_rulesubtype.current; }
	EOF;

// Rule subtype
rulesubtype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_tString_0_0='Int'
				{
					newLeafNode(lv_tString_0_0, grammarAccess.getSubtypeAccess().getTStringIntKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtypeRule());
					}
					setWithLastConsumed($current, "tString", lv_tString_0_0, "Int");
				}
			)
		)
		    |
		(
			(
				lv_tString_1_0='Bool'
				{
					newLeafNode(lv_tString_1_0, grammarAccess.getSubtypeAccess().getTStringBoolKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtypeRule());
					}
					setWithLastConsumed($current, "tString", lv_tString_1_0, "Bool");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSubtypeAccess().getTChnChannel_specifierParserRuleCall_2_0());
				}
				lv_tChn_2_0=rulechannel_specifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubtypeRule());
					}
					set(
						$current,
						"tChn",
						lv_tChn_2_0,
						"org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_tID_3_0=RULE_ID
				{
					newLeafNode(lv_tID_3_0, grammarAccess.getSubtypeAccess().getTIDIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtypeRule());
					}
					setWithLastConsumed(
						$current,
						"tID",
						lv_tID_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulechannel_specifier
entryRulechannel_specifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannel_specifierRule()); }
	iv_rulechannel_specifier=rulechannel_specifier
	{ $current=$iv_rulechannel_specifier.current; }
	EOF;

// Rule channel_specifier
rulechannel_specifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getChannel_specifierAccess().getChannel_specifierAction_0_0(),
						$current);
				}
			)
			otherlv_1='Chn['
			{
				newLeafNode(otherlv_1, grammarAccess.getChannel_specifierAccess().getChnKeyword_0_1());
			}
			(
				(
					lv_type_2_0=RULE_ID
					{
						newLeafNode(lv_type_2_0, grammarAccess.getChannel_specifierAccess().getTypeIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChannel_specifierRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getChannel_specifierAccess().getRightSquareBracketKeyword_0_3());
			}
		)
		    |
		otherlv_4='Chn[Int]'
		{
			newLeafNode(otherlv_4, grammarAccess.getChannel_specifierAccess().getChnIntKeyword_1());
		}
		    |
		otherlv_5='Chn[Bool]'
		{
			newLeafNode(otherlv_5, grammarAccess.getChannel_specifierAccess().getChnBoolKeyword_2());
		}
	)
;

// Entry rule entryRuletMultitype
entryRuletMultitype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTMultitypeRule()); }
	iv_ruletMultitype=ruletMultitype
	{ $current=$iv_ruletMultitype.current; }
	EOF;

// Rule tMultitype
ruletMultitype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mtype'
		{
			newLeafNode(otherlv_0, grammarAccess.getTMultitypeAccess().getMtypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTMultitypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTMultitypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTMultitypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTMultitypeAccess().getComposingtypesComposingtypeParserRuleCall_3_0());
				}
				lv_composingtypes_3_0=rulecomposingtype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTMultitypeRule());
					}
					add(
						$current,
						"composingtypes",
						lv_composingtypes_3_0,
						"org.xtext.unina.xdstmdata.Xdstmdata.composingtype");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTMultitypeAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTMultitypeAccess().getComposingtypesComposingtypeParserRuleCall_4_1_0());
					}
					lv_composingtypes_5_0=rulecomposingtype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTMultitypeRule());
						}
						add(
							$current,
							"composingtypes",
							lv_composingtypes_5_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.composingtype");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTMultitypeAccess().getRightCurlyBracketKeyword_5());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getTMultitypeAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRulecomposingtype
entryRulecomposingtype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComposingtypeRule()); }
	iv_rulecomposingtype=rulecomposingtype
	{ $current=$iv_rulecomposingtype.current; }
	EOF;

// Rule composingtype
rulecomposingtype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_tString_0_0='Int'
				{
					newLeafNode(lv_tString_0_0, grammarAccess.getComposingtypeAccess().getTStringIntKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComposingtypeRule());
					}
					setWithLastConsumed($current, "tString", lv_tString_0_0, "Int");
				}
			)
		)
		    |
		(
			(
				lv_tString_1_0='Bool'
				{
					newLeafNode(lv_tString_1_0, grammarAccess.getComposingtypeAccess().getTStringBoolKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComposingtypeRule());
					}
					setWithLastConsumed($current, "tString", lv_tString_1_0, "Bool");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComposingtypeAccess().getTChnChannel_specifierParserRuleCall_2_0());
				}
				lv_tChn_2_0=rulechannel_specifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComposingtypeRule());
					}
					set(
						$current,
						"tChn",
						lv_tChn_2_0,
						"org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_tID_3_0=RULE_ID
				{
					newLeafNode(lv_tID_3_0, grammarAccess.getComposingtypeAccess().getTIDIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComposingtypeRule());
					}
					setWithLastConsumed(
						$current,
						"tID",
						lv_tID_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulecIntchannel
entryRulecIntchannel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCIntchannelRule()); }
	iv_rulecIntchannel=rulecIntchannel
	{ $current=$iv_rulecIntchannel.current; }
	EOF;

// Rule cIntchannel
rulecIntchannel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Chn'
		{
			newLeafNode(otherlv_0, grammarAccess.getCIntchannelAccess().getChnKeyword_0());
		}
		otherlv_1='internal'
		{
			newLeafNode(otherlv_1, grammarAccess.getCIntchannelAccess().getInternalKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCIntchannelAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCIntchannelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='['
		{
			newLeafNode(otherlv_3, grammarAccess.getCIntchannelAccess().getLeftSquareBracketKeyword_3());
		}
		(
			(
				lv_bound_4_0=RULE_INT
				{
					newLeafNode(lv_bound_4_0, grammarAccess.getCIntchannelAccess().getBoundINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCIntchannelRule());
					}
					setWithLastConsumed(
						$current,
						"bound",
						lv_bound_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getCIntchannelAccess().getRightSquareBracketKeyword_5());
		}
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getCIntchannelAccess().getOfKeyword_6());
		}
		(
			(
				(
					lv_tString_7_0='Int'
					{
						newLeafNode(lv_tString_7_0, grammarAccess.getCIntchannelAccess().getTStringIntKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCIntchannelRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_7_0, "Int");
					}
				)
			)
			    |
			(
				(
					lv_tString_8_0='Bool'
					{
						newLeafNode(lv_tString_8_0, grammarAccess.getCIntchannelAccess().getTStringBoolKeyword_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCIntchannelRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_8_0, "Bool");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCIntchannelAccess().getTChnChannel_specifierParserRuleCall_7_2_0());
					}
					lv_tChn_9_0=rulechannel_specifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCIntchannelRule());
						}
						set(
							$current,
							"tChn",
							lv_tChn_9_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_tID_10_0=RULE_ID
					{
						newLeafNode(lv_tID_10_0, grammarAccess.getCIntchannelAccess().getTIDIDTerminalRuleCall_7_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCIntchannelRule());
						}
						setWithLastConsumed(
							$current,
							"tID",
							lv_tID_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getCIntchannelAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRulecExtchannel
entryRulecExtchannel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCExtchannelRule()); }
	iv_rulecExtchannel=rulecExtchannel
	{ $current=$iv_rulecExtchannel.current; }
	EOF;

// Rule cExtchannel
rulecExtchannel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Chn'
		{
			newLeafNode(otherlv_0, grammarAccess.getCExtchannelAccess().getChnKeyword_0());
		}
		otherlv_1='external'
		{
			newLeafNode(otherlv_1, grammarAccess.getCExtchannelAccess().getExternalKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCExtchannelAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCExtchannelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getCExtchannelAccess().getOfKeyword_3());
		}
		(
			(
				(
					lv_tString_4_0='Int'
					{
						newLeafNode(lv_tString_4_0, grammarAccess.getCExtchannelAccess().getTStringIntKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCExtchannelRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_4_0, "Int");
					}
				)
			)
			    |
			(
				(
					lv_tString_5_0='Bool'
					{
						newLeafNode(lv_tString_5_0, grammarAccess.getCExtchannelAccess().getTStringBoolKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCExtchannelRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_5_0, "Bool");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCExtchannelAccess().getTChnChannel_specifierParserRuleCall_4_2_0());
					}
					lv_tChn_6_0=rulechannel_specifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCExtchannelRule());
						}
						set(
							$current,
							"tChn",
							lv_tChn_6_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_tID_7_0=RULE_ID
					{
						newLeafNode(lv_tID_7_0, grammarAccess.getCExtchannelAccess().getTIDIDTerminalRuleCall_4_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCExtchannelRule());
						}
						setWithLastConsumed(
							$current,
							"tID",
							lv_tID_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getCExtchannelAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulevVariable
entryRulevVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVVariableRule()); }
	iv_rulevVariable=rulevVariable
	{ $current=$iv_rulevVariable.current; }
	EOF;

// Rule vVariable
rulevVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_tString_0_0='Int'
					{
						newLeafNode(lv_tString_0_0, grammarAccess.getVVariableAccess().getTStringIntKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVVariableRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_0_0, "Int");
					}
				)
			)
			    |
			(
				(
					lv_tString_1_0='Bool'
					{
						newLeafNode(lv_tString_1_0, grammarAccess.getVVariableAccess().getTStringBoolKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVVariableRule());
						}
						setWithLastConsumed($current, "tString", lv_tString_1_0, "Bool");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVVariableAccess().getTChnChannel_specifierParserRuleCall_0_2_0());
					}
					lv_tChn_2_0=rulechannel_specifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVVariableRule());
						}
						set(
							$current,
							"tChn",
							lv_tChn_2_0,
							"org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_tID_3_0=RULE_ID
					{
						newLeafNode(lv_tID_3_0, grammarAccess.getVVariableAccess().getTIDIDTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVVariableRule());
						}
						setWithLastConsumed(
							$current,
							"tID",
							lv_tID_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getVVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getVVariableAccess().getSemicolonKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
