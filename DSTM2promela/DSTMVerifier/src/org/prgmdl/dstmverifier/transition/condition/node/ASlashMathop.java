/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.node;

import org.prgmdl.dstmverifier.transition.condition.analysis.*;

@SuppressWarnings("nls")
public final class ASlashMathop extends PMathop
{
    private TSlash _slash_;

    public ASlashMathop()
    {
        // Constructor
    }

    public ASlashMathop(
        @SuppressWarnings("hiding") TSlash _slash_)
    {
        // Constructor
        setSlash(_slash_);

    }

    @Override
    public Object clone()
    {
        return new ASlashMathop(
            cloneNode(this._slash_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASlashMathop(this);
    }

    public TSlash getSlash()
    {
        return this._slash_;
    }

    public void setSlash(TSlash node)
    {
        if(this._slash_ != null)
        {
            this._slash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._slash_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._slash_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._slash_ == child)
        {
            this._slash_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._slash_ == oldChild)
        {
            setSlash((TSlash) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
