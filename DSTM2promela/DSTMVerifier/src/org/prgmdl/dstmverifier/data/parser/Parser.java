/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.data.parser;

import org.prgmdl.dstmverifier.data.lexer.*;
import org.prgmdl.dstmverifier.data.node.*;
import org.prgmdl.dstmverifier.data.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAnotation1Notation */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAnotation2Notation */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AChannelDeclaration */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AEnumDeclaration */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AVariableDeclaration */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AParamDeclaration */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce ACompoundDeclaration */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce AMultitypeDeclaration */
		    {
			ArrayList list = new7();
			push(goTo(1), list);
		    }
		    break;
                    case 8: /* reduce AIntVarType */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce ABoolVarType */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AEName$Identifier1VarType */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AChantVarType */
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce AChanVarType */
		    {
			ArrayList list = new12();
			push(goTo(2), list);
		    }
		    break;
                    case 13: /* reduce AParamDeclarationParamDeclaration */
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;
                    case 14: /* reduce AIdentifierPName */
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AIdentifierMachineName */
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;
                    case 16: /* reduce AAenumdeclarationenumdeclaration1EnumDeclaration */
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;
                    case 17: /* reduce AAenumdeclarationenumdeclaration2EnumDeclaration */
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;
                    case 18: /* reduce AIdentifierEName */
		    {
			ArrayList list = new18();
			push(goTo(7), list);
		    }
		    break;
                    case 19: /* reduce AIdLiterals */
		    {
			ArrayList list = new19();
			push(goTo(8), list);
		    }
		    break;
                    case 20: /* reduce AIdsLiterals */
		    {
			ArrayList list = new20();
			push(goTo(8), list);
		    }
		    break;
                    case 21: /* reduce AIdentifierLiteral */
		    {
			ArrayList list = new21();
			push(goTo(9), list);
		    }
		    break;
                    case 22: /* reduce AAcompounddeclarationcompounddeclaration1CompoundDeclaration */
		    {
			ArrayList list = new22();
			push(goTo(10), list);
		    }
		    break;
                    case 23: /* reduce AAcompounddeclarationcompounddeclaration2CompoundDeclaration */
		    {
			ArrayList list = new23();
			push(goTo(10), list);
		    }
		    break;
                    case 24: /* reduce ABasicList$Int1BasicList */
		    {
			ArrayList list = new24();
			push(goTo(11), list);
		    }
		    break;
                    case 25: /* reduce ABasicList$Bool1BasicList */
		    {
			ArrayList list = new25();
			push(goTo(11), list);
		    }
		    break;
                    case 26: /* reduce ABasicList$EName$Identifier11BasicList */
		    {
			ArrayList list = new26();
			push(goTo(11), list);
		    }
		    break;
                    case 27: /* reduce ABasicList$Chant1BasicList */
		    {
			ArrayList list = new27();
			push(goTo(11), list);
		    }
		    break;
                    case 28: /* reduce ABasicList$Chan1BasicList */
		    {
			ArrayList list = new28();
			push(goTo(11), list);
		    }
		    break;
                    case 29: /* reduce ALists$Int1BasicList */
		    {
			ArrayList list = new29();
			push(goTo(11), list);
		    }
		    break;
                    case 30: /* reduce ALists$Bool1BasicList */
		    {
			ArrayList list = new30();
			push(goTo(11), list);
		    }
		    break;
                    case 31: /* reduce ALists$EName$Identifier11BasicList */
		    {
			ArrayList list = new31();
			push(goTo(11), list);
		    }
		    break;
                    case 32: /* reduce ALists$Chant1BasicList */
		    {
			ArrayList list = new32();
			push(goTo(11), list);
		    }
		    break;
                    case 33: /* reduce ALists$Chan1BasicList */
		    {
			ArrayList list = new33();
			push(goTo(11), list);
		    }
		    break;
                    case 34: /* reduce AIdentifierCompoundName */
		    {
			ArrayList list = new34();
			push(goTo(12), list);
		    }
		    break;
                    case 35: /* reduce AAmultitypedeclarationmultitypedeclaration1MultitypeDeclaration */
		    {
			ArrayList list = new35();
			push(goTo(13), list);
		    }
		    break;
                    case 36: /* reduce AAmultitypedeclarationmultitypedeclaration2MultitypeDeclaration */
		    {
			ArrayList list = new36();
			push(goTo(13), list);
		    }
		    break;
                    case 37: /* reduce AIdentifierMultitypeName */
		    {
			ArrayList list = new37();
			push(goTo(14), list);
		    }
		    break;
                    case 38: /* reduce ASimpletypeList$Basic1$Int1SimpletypeList */
		    {
			ArrayList list = new38();
			push(goTo(15), list);
		    }
		    break;
                    case 39: /* reduce ASimpletypeList$Basic1$Bool1SimpletypeList */
		    {
			ArrayList list = new39();
			push(goTo(15), list);
		    }
		    break;
                    case 40: /* reduce ASimpletypeList$Basic1$Chant1SimpletypeList */
		    {
			ArrayList list = new40();
			push(goTo(15), list);
		    }
		    break;
                    case 41: /* reduce ASimpletypeList$Basic1$Chan1SimpletypeList */
		    {
			ArrayList list = new41();
			push(goTo(15), list);
		    }
		    break;
                    case 42: /* reduce ASimpletypeList$Compound$Identifier11SimpletypeList */
		    {
			ArrayList list = new42();
			push(goTo(15), list);
		    }
		    break;
                    case 43: /* reduce AListsSimple$Basic1$Int1SimpletypeList */
		    {
			ArrayList list = new43();
			push(goTo(15), list);
		    }
		    break;
                    case 44: /* reduce AListsSimple$Basic1$Bool1SimpletypeList */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce AListsSimple$Basic1$Chant1SimpletypeList */
		    {
			ArrayList list = new45();
			push(goTo(15), list);
		    }
		    break;
                    case 46: /* reduce AListsSimple$Basic1$Chan1SimpletypeList */
		    {
			ArrayList list = new46();
			push(goTo(15), list);
		    }
		    break;
                    case 47: /* reduce AListsSimple$Compound$Identifier11SimpletypeList */
		    {
			ArrayList list = new47();
			push(goTo(15), list);
		    }
		    break;
                    case 48: /* reduce AVariableDeclarationVariableDeclaration */
		    {
			ArrayList list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce AIdentifierVarName */
		    {
			ArrayList list = new49();
			push(goTo(17), list);
		    }
		    break;
                    case 50: /* reduce AExternalChanDeclaration$Simpletype$Basic1$Int11ChannelDeclaration */
		    {
			ArrayList list = new50();
			push(goTo(18), list);
		    }
		    break;
                    case 51: /* reduce AExternalChanDeclaration$Simpletype$Basic1$Bool11ChannelDeclaration */
		    {
			ArrayList list = new51();
			push(goTo(18), list);
		    }
		    break;
                    case 52: /* reduce AExternalChanDeclaration$Simpletype$Basic1$Chant11ChannelDeclaration */
		    {
			ArrayList list = new52();
			push(goTo(18), list);
		    }
		    break;
                    case 53: /* reduce AExternalChanDeclaration$Simpletype$Basic1$Chan11ChannelDeclaration */
		    {
			ArrayList list = new53();
			push(goTo(18), list);
		    }
		    break;
                    case 54: /* reduce AExternalChanDeclaration$Multi1$Identifier1ChannelDeclaration */
		    {
			ArrayList list = new54();
			push(goTo(18), list);
		    }
		    break;
                    case 55: /* reduce AInternalChanDeclaration$Simpletype$Basic1$Int11ChannelDeclaration */
		    {
			ArrayList list = new55();
			push(goTo(18), list);
		    }
		    break;
                    case 56: /* reduce AInternalChanDeclaration$Simpletype$Basic1$Bool11ChannelDeclaration */
		    {
			ArrayList list = new56();
			push(goTo(18), list);
		    }
		    break;
                    case 57: /* reduce AInternalChanDeclaration$Simpletype$Basic1$Chant11ChannelDeclaration */
		    {
			ArrayList list = new57();
			push(goTo(18), list);
		    }
		    break;
                    case 58: /* reduce AInternalChanDeclaration$Simpletype$Basic1$Chan11ChannelDeclaration */
		    {
			ArrayList list = new58();
			push(goTo(18), list);
		    }
		    break;
                    case 59: /* reduce AInternalChanDeclaration$Multi1$Identifier1ChannelDeclaration */
		    {
			ArrayList list = new59();
			push(goTo(18), list);
		    }
		    break;
                    case 60: /* reduce AIdentifierChanName */
		    {
			ArrayList list = new60();
			push(goTo(19), list);
		    }
		    break;
                    case 61: /* reduce ASimpleExtSymbol */
		    {
			ArrayList list = new61();
			push(goTo(20), list);
		    }
		    break;
                    case 62: /* reduce ASimpleUnique */
		    {
			ArrayList list = new62();
			push(goTo(21), list);
		    }
		    break;
                    case 63: /* reduce ASimpleDefined */
		    {
			ArrayList list = new63();
			push(goTo(22), list);
		    }
		    break;
                    case 64: /* reduce ATerminal$Declaration */
		    {
			ArrayList list = new64();
			push(goTo(23), list);
		    }
		    break;
                    case 65: /* reduce ANonTerminal$Declaration */
		    {
			ArrayList list = new65();
			push(goTo(23), list);
		    }
		    break;
                    case 66: /* reduce ATerminal$Literals */
		    {
			ArrayList list = new66();
			push(goTo(24), list);
		    }
		    break;
                    case 67: /* reduce ANonTerminal$Literals */
		    {
			ArrayList list = new67();
			push(goTo(24), list);
		    }
		    break;
                    case 68: /* reduce ATerminal$BasicList */
		    {
			ArrayList list = new68();
			push(goTo(25), list);
		    }
		    break;
                    case 69: /* reduce ANonTerminal$BasicList */
		    {
			ArrayList list = new69();
			push(goTo(25), list);
		    }
		    break;
                    case 70: /* reduce ATerminal$SimpletypeList */
		    {
			ArrayList list = new70();
			push(goTo(26), list);
		    }
		    break;
                    case 71: /* reduce ANonTerminal$SimpletypeList */
		    {
			ArrayList list = new71();
			push(goTo(26), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PNotation node1 = (PNotation) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAnotation1Notation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PNotation pnotationNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pnotationNode1 = new ANotation(listNode2);
        }
	nodeList.add(pnotationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAnotation2Notation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotation pnotationNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pnotationNode1 = new ANotation(listNode3);
        }
	nodeList.add(pnotationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PChannelDeclaration pchanneldeclarationNode2;
        TSemi tsemiNode3;
        pchanneldeclarationNode2 = (PChannelDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new AChannelDeclaration(pchanneldeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AEnumDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PEnumDeclaration penumdeclarationNode2;
        TSemi tsemiNode3;
        penumdeclarationNode2 = (PEnumDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new AEnumDeclaration(penumdeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        TSemi tsemiNode3;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new AVariableDeclaration(pvariabledeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AParamDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PParamDeclaration pparamdeclarationNode2;
        TSemi tsemiNode3;
        pparamdeclarationNode2 = (PParamDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new AParamDeclaration(pparamdeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ACompoundDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PCompoundDeclaration pcompounddeclarationNode2;
        TSemi tsemiNode3;
        pcompounddeclarationNode2 = (PCompoundDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new ACompoundDeclaration(pcompounddeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AMultitypeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PMultitypeDeclaration pmultitypedeclarationNode2;
        TSemi tsemiNode3;
        pmultitypedeclarationNode2 = (PMultitypeDeclaration)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pdeclarationNode1 = new AMultitypeDeclaration(pmultitypedeclarationNode2, tsemiNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AIntVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pvartypeNode1 = new AIntVarType(tintNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ABoolVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pvartypeNode1 = new ABoolVarType(tboolNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AEName$Identifier1VarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        PENameUse penameuseNode2;
        {
            // Block
        PDefined pdefinedNode3;
        pdefinedNode3 = (PDefined)nodeArrayList1.get(0);

        penameuseNode2 = new AIdentifierENameUse(pdefinedNode3);
        }

        pvartypeNode1 = new AENameVarType(penameuseNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AChantVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TChan tchanNode2;
        TLBkt tlbktNode3;
        PDefined pdefinedNode4;
        TRBkt trbktNode5;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        pdefinedNode4 = (PDefined)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pvartypeNode1 = new AChantVarType(tchanNode2, tlbktNode3, pdefinedNode4, trbktNode5);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AChanVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TChan tchanNode2;
        tchanNode2 = (TChan)nodeArrayList1.get(0);

        pvartypeNode1 = new AChanVarType(tchanNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AParamDeclarationParamDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDeclaration pparamdeclarationNode1;
        {
            // Block
        TParamkey tparamkeyNode2;
        PPName ppnameNode3;
        TColon tcolonNode4;
        PVarType pvartypeNode5;
        TOf tofNode6;
        PMachineName pmachinenameNode7;
        tparamkeyNode2 = (TParamkey)nodeArrayList1.get(0);
        ppnameNode3 = (PPName)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pvartypeNode5 = (PVarType)nodeArrayList4.get(0);
        tofNode6 = (TOf)nodeArrayList5.get(0);
        pmachinenameNode7 = (PMachineName)nodeArrayList6.get(0);

        pparamdeclarationNode1 = new AParamDeclarationParamDeclaration(tparamkeyNode2, ppnameNode3, tcolonNode4, pvartypeNode5, tofNode6, pmachinenameNode7);
        }
	nodeList.add(pparamdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AIdentifierPName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPName ppnameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        ppnameNode1 = new AIdentifierPName(puniqueNode2);
        }
	nodeList.add(ppnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AIdentifierMachineName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMachineName pmachinenameNode1;
        {
            // Block
        PExtSymbol pextsymbolNode2;
        pextsymbolNode2 = (PExtSymbol)nodeArrayList1.get(0);

        pmachinenameNode1 = new AIdentifierMachineName(pextsymbolNode2);
        }
	nodeList.add(pmachinenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAenumdeclarationenumdeclaration1EnumDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEnumDeclaration penumdeclarationNode1;
        {
            // Block
        TEnum tenumNode2;
        PEName penameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode5 = new LinkedList();
        TRBrc trbrcNode6;
        tenumNode2 = (TEnum)nodeArrayList1.get(0);
        penameNode3 = (PEName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        }
        trbrcNode6 = (TRBrc)nodeArrayList4.get(0);

        penumdeclarationNode1 = new AEnumDeclarationEnumDeclaration(tenumNode2, penameNode3, tlbrcNode4, listNode5, trbrcNode6);
        }
	nodeList.add(penumdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAenumdeclarationenumdeclaration2EnumDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEnumDeclaration penumdeclarationNode1;
        {
            // Block
        TEnum tenumNode2;
        PEName penameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode6 = new LinkedList();
        TRBrc trbrcNode7;
        tenumNode2 = (TEnum)nodeArrayList1.get(0);
        penameNode3 = (PEName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbrcNode7 = (TRBrc)nodeArrayList5.get(0);

        penumdeclarationNode1 = new AEnumDeclarationEnumDeclaration(tenumNode2, penameNode3, tlbrcNode4, listNode6, trbrcNode7);
        }
	nodeList.add(penumdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIdentifierEName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEName penameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        penameNode1 = new AIdentifierEName(puniqueNode2);
        }
	nodeList.add(penameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AIdLiterals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiterals pliteralsNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pliteralsNode1 = new AIdLiterals(pliteralNode2);
        }
	nodeList.add(pliteralsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AIdsLiterals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiterals pliteralsNode1;
        {
            // Block
        PLiterals pliteralsNode2;
        TComma tcommaNode3;
        PLiteral pliteralNode4;
        pliteralsNode2 = (PLiterals)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pliteralNode4 = (PLiteral)nodeArrayList3.get(0);

        pliteralsNode1 = new AIdsLiterals(pliteralsNode2, tcommaNode3, pliteralNode4);
        }
	nodeList.add(pliteralsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIdentifierLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pliteralNode1 = new AIdentifierLiteral(tidentifierNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAcompounddeclarationcompounddeclaration1CompoundDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompoundDeclaration pcompounddeclarationNode1;
        {
            // Block
        TStruct tstructNode2;
        PCompoundName pcompoundnameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode5 = new LinkedList();
        TRBrc trbrcNode6;
        tstructNode2 = (TStruct)nodeArrayList1.get(0);
        pcompoundnameNode3 = (PCompoundName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        }
        trbrcNode6 = (TRBrc)nodeArrayList4.get(0);

        pcompounddeclarationNode1 = new ACompoundDeclarationCompoundDeclaration(tstructNode2, pcompoundnameNode3, tlbrcNode4, listNode5, trbrcNode6);
        }
	nodeList.add(pcompounddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAcompounddeclarationcompounddeclaration2CompoundDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompoundDeclaration pcompounddeclarationNode1;
        {
            // Block
        TStruct tstructNode2;
        PCompoundName pcompoundnameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode6 = new LinkedList();
        TRBrc trbrcNode7;
        tstructNode2 = (TStruct)nodeArrayList1.get(0);
        pcompoundnameNode3 = (PCompoundName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbrcNode7 = (TRBrc)nodeArrayList5.get(0);

        pcompounddeclarationNode1 = new ACompoundDeclarationCompoundDeclaration(tstructNode2, pcompoundnameNode3, tlbrcNode4, listNode6, trbrcNode7);
        }
	nodeList.add(pcompounddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ABasicList$Int1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasic pbasicNode2;
        {
            // Block
        TInt tintNode3;
        tintNode3 = (TInt)nodeArrayList1.get(0);

        pbasicNode2 = new AIntBasic(tintNode3);
        }

        pbasiclistNode1 = new ABasicListBasicList(pbasicNode2);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ABasicList$Bool1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasic pbasicNode2;
        {
            // Block
        TBool tboolNode3;
        tboolNode3 = (TBool)nodeArrayList1.get(0);

        pbasicNode2 = new ABoolBasic(tboolNode3);
        }

        pbasiclistNode1 = new ABasicListBasicList(pbasicNode2);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ABasicList$EName$Identifier11BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasic pbasicNode2;
        {
            // Block
        PENameUse penameuseNode3;
        {
            // Block
        PDefined pdefinedNode4;
        pdefinedNode4 = (PDefined)nodeArrayList1.get(0);

        penameuseNode3 = new AIdentifierENameUse(pdefinedNode4);
        }

        pbasicNode2 = new AENameBasic(penameuseNode3);
        }

        pbasiclistNode1 = new ABasicListBasicList(pbasicNode2);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ABasicList$Chant1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasic pbasicNode2;
        {
            // Block
        TChan tchanNode3;
        TLBkt tlbktNode4;
        PDefined pdefinedNode5;
        TRBkt trbktNode6;
        tchanNode3 = (TChan)nodeArrayList1.get(0);
        tlbktNode4 = (TLBkt)nodeArrayList2.get(0);
        pdefinedNode5 = (PDefined)nodeArrayList3.get(0);
        trbktNode6 = (TRBkt)nodeArrayList4.get(0);

        pbasicNode2 = new AChantBasic(tchanNode3, tlbktNode4, pdefinedNode5, trbktNode6);
        }

        pbasiclistNode1 = new ABasicListBasicList(pbasicNode2);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ABasicList$Chan1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasic pbasicNode2;
        {
            // Block
        TChan tchanNode3;
        tchanNode3 = (TChan)nodeArrayList1.get(0);

        pbasicNode2 = new AChanBasic(tchanNode3);
        }

        pbasiclistNode1 = new ABasicListBasicList(pbasicNode2);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ALists$Int1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasicList pbasiclistNode2;
        TComma tcommaNode3;
        PBasic pbasicNode4;
        pbasiclistNode2 = (PBasicList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        TInt tintNode5;
        tintNode5 = (TInt)nodeArrayList3.get(0);

        pbasicNode4 = new AIntBasic(tintNode5);
        }

        pbasiclistNode1 = new AListsBasicList(pbasiclistNode2, tcommaNode3, pbasicNode4);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ALists$Bool1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasicList pbasiclistNode2;
        TComma tcommaNode3;
        PBasic pbasicNode4;
        pbasiclistNode2 = (PBasicList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        TBool tboolNode5;
        tboolNode5 = (TBool)nodeArrayList3.get(0);

        pbasicNode4 = new ABoolBasic(tboolNode5);
        }

        pbasiclistNode1 = new AListsBasicList(pbasiclistNode2, tcommaNode3, pbasicNode4);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ALists$EName$Identifier11BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasicList pbasiclistNode2;
        TComma tcommaNode3;
        PBasic pbasicNode4;
        pbasiclistNode2 = (PBasicList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PENameUse penameuseNode5;
        {
            // Block
        PDefined pdefinedNode6;
        pdefinedNode6 = (PDefined)nodeArrayList3.get(0);

        penameuseNode5 = new AIdentifierENameUse(pdefinedNode6);
        }

        pbasicNode4 = new AENameBasic(penameuseNode5);
        }

        pbasiclistNode1 = new AListsBasicList(pbasiclistNode2, tcommaNode3, pbasicNode4);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ALists$Chant1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasicList pbasiclistNode2;
        TComma tcommaNode3;
        PBasic pbasicNode4;
        pbasiclistNode2 = (PBasicList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        TChan tchanNode5;
        TLBkt tlbktNode6;
        PDefined pdefinedNode7;
        TRBkt trbktNode8;
        tchanNode5 = (TChan)nodeArrayList3.get(0);
        tlbktNode6 = (TLBkt)nodeArrayList4.get(0);
        pdefinedNode7 = (PDefined)nodeArrayList5.get(0);
        trbktNode8 = (TRBkt)nodeArrayList6.get(0);

        pbasicNode4 = new AChantBasic(tchanNode5, tlbktNode6, pdefinedNode7, trbktNode8);
        }

        pbasiclistNode1 = new AListsBasicList(pbasiclistNode2, tcommaNode3, pbasicNode4);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ALists$Chan1BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasicList pbasiclistNode1;
        {
            // Block
        PBasicList pbasiclistNode2;
        TComma tcommaNode3;
        PBasic pbasicNode4;
        pbasiclistNode2 = (PBasicList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        TChan tchanNode5;
        tchanNode5 = (TChan)nodeArrayList3.get(0);

        pbasicNode4 = new AChanBasic(tchanNode5);
        }

        pbasiclistNode1 = new AListsBasicList(pbasiclistNode2, tcommaNode3, pbasicNode4);
        }
	nodeList.add(pbasiclistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIdentifierCompoundName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompoundName pcompoundnameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        pcompoundnameNode1 = new AIdentifierCompoundName(puniqueNode2);
        }
	nodeList.add(pcompoundnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAmultitypedeclarationmultitypedeclaration1MultitypeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultitypeDeclaration pmultitypedeclarationNode1;
        {
            // Block
        TMtype tmtypeNode2;
        PMultitypeName pmultitypenameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode5 = new LinkedList();
        TRBrc trbrcNode6;
        tmtypeNode2 = (TMtype)nodeArrayList1.get(0);
        pmultitypenameNode3 = (PMultitypeName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        }
        trbrcNode6 = (TRBrc)nodeArrayList4.get(0);

        pmultitypedeclarationNode1 = new AMultitypeDeclarationMultitypeDeclaration(tmtypeNode2, pmultitypenameNode3, tlbrcNode4, listNode5, trbrcNode6);
        }
	nodeList.add(pmultitypedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAmultitypedeclarationmultitypedeclaration2MultitypeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultitypeDeclaration pmultitypedeclarationNode1;
        {
            // Block
        TMtype tmtypeNode2;
        PMultitypeName pmultitypenameNode3;
        TLBrc tlbrcNode4;
        LinkedList listNode6 = new LinkedList();
        TRBrc trbrcNode7;
        tmtypeNode2 = (TMtype)nodeArrayList1.get(0);
        pmultitypenameNode3 = (PMultitypeName)nodeArrayList2.get(0);
        tlbrcNode4 = (TLBrc)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trbrcNode7 = (TRBrc)nodeArrayList5.get(0);

        pmultitypedeclarationNode1 = new AMultitypeDeclarationMultitypeDeclaration(tmtypeNode2, pmultitypenameNode3, tlbrcNode4, listNode6, trbrcNode7);
        }
	nodeList.add(pmultitypedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AIdentifierMultitypeName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultitypeName pmultitypenameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        pmultitypenameNode1 = new AIdentifierMultitypeName(puniqueNode2);
        }
	nodeList.add(pmultitypenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ASimpletypeList$Basic1$Int1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletype psimpletypeNode2;
        {
            // Block
        PBasic pbasicNode3;
        {
            // Block
        TInt tintNode4;
        tintNode4 = (TInt)nodeArrayList1.get(0);

        pbasicNode3 = new AIntBasic(tintNode4);
        }

        psimpletypeNode2 = new ABasicSimpletype(pbasicNode3);
        }

        psimpletypelistNode1 = new ASimpletypeListSimpletypeList(psimpletypeNode2);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ASimpletypeList$Basic1$Bool1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletype psimpletypeNode2;
        {
            // Block
        PBasic pbasicNode3;
        {
            // Block
        TBool tboolNode4;
        tboolNode4 = (TBool)nodeArrayList1.get(0);

        pbasicNode3 = new ABoolBasic(tboolNode4);
        }

        psimpletypeNode2 = new ABasicSimpletype(pbasicNode3);
        }

        psimpletypelistNode1 = new ASimpletypeListSimpletypeList(psimpletypeNode2);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ASimpletypeList$Basic1$Chant1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletype psimpletypeNode2;
        {
            // Block
        PBasic pbasicNode3;
        {
            // Block
        TChan tchanNode4;
        TLBkt tlbktNode5;
        PDefined pdefinedNode6;
        TRBkt trbktNode7;
        tchanNode4 = (TChan)nodeArrayList1.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList2.get(0);
        pdefinedNode6 = (PDefined)nodeArrayList3.get(0);
        trbktNode7 = (TRBkt)nodeArrayList4.get(0);

        pbasicNode3 = new AChantBasic(tchanNode4, tlbktNode5, pdefinedNode6, trbktNode7);
        }

        psimpletypeNode2 = new ABasicSimpletype(pbasicNode3);
        }

        psimpletypelistNode1 = new ASimpletypeListSimpletypeList(psimpletypeNode2);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ASimpletypeList$Basic1$Chan1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletype psimpletypeNode2;
        {
            // Block
        PBasic pbasicNode3;
        {
            // Block
        TChan tchanNode4;
        tchanNode4 = (TChan)nodeArrayList1.get(0);

        pbasicNode3 = new AChanBasic(tchanNode4);
        }

        psimpletypeNode2 = new ABasicSimpletype(pbasicNode3);
        }

        psimpletypelistNode1 = new ASimpletypeListSimpletypeList(psimpletypeNode2);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ASimpletypeList$Compound$Identifier11SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletype psimpletypeNode2;
        {
            // Block
        PCompoundNameUse pcompoundnameuseNode3;
        {
            // Block
        PDefined pdefinedNode4;
        pdefinedNode4 = (PDefined)nodeArrayList1.get(0);

        pcompoundnameuseNode3 = new AIdentifierCompoundNameUse(pdefinedNode4);
        }

        psimpletypeNode2 = new ACompoundSimpletype(pcompoundnameuseNode3);
        }

        psimpletypelistNode1 = new ASimpletypeListSimpletypeList(psimpletypeNode2);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AListsSimple$Basic1$Int1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletypeList psimpletypelistNode2;
        TComma tcommaNode3;
        PSimpletype psimpletypeNode4;
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PBasic pbasicNode5;
        {
            // Block
        TInt tintNode6;
        tintNode6 = (TInt)nodeArrayList3.get(0);

        pbasicNode5 = new AIntBasic(tintNode6);
        }

        psimpletypeNode4 = new ABasicSimpletype(pbasicNode5);
        }

        psimpletypelistNode1 = new AListsSimpleSimpletypeList(psimpletypelistNode2, tcommaNode3, psimpletypeNode4);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AListsSimple$Basic1$Bool1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletypeList psimpletypelistNode2;
        TComma tcommaNode3;
        PSimpletype psimpletypeNode4;
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PBasic pbasicNode5;
        {
            // Block
        TBool tboolNode6;
        tboolNode6 = (TBool)nodeArrayList3.get(0);

        pbasicNode5 = new ABoolBasic(tboolNode6);
        }

        psimpletypeNode4 = new ABasicSimpletype(pbasicNode5);
        }

        psimpletypelistNode1 = new AListsSimpleSimpletypeList(psimpletypelistNode2, tcommaNode3, psimpletypeNode4);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AListsSimple$Basic1$Chant1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletypeList psimpletypelistNode2;
        TComma tcommaNode3;
        PSimpletype psimpletypeNode4;
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PBasic pbasicNode5;
        {
            // Block
        TChan tchanNode6;
        TLBkt tlbktNode7;
        PDefined pdefinedNode8;
        TRBkt trbktNode9;
        tchanNode6 = (TChan)nodeArrayList3.get(0);
        tlbktNode7 = (TLBkt)nodeArrayList4.get(0);
        pdefinedNode8 = (PDefined)nodeArrayList5.get(0);
        trbktNode9 = (TRBkt)nodeArrayList6.get(0);

        pbasicNode5 = new AChantBasic(tchanNode6, tlbktNode7, pdefinedNode8, trbktNode9);
        }

        psimpletypeNode4 = new ABasicSimpletype(pbasicNode5);
        }

        psimpletypelistNode1 = new AListsSimpleSimpletypeList(psimpletypelistNode2, tcommaNode3, psimpletypeNode4);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AListsSimple$Basic1$Chan1SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletypeList psimpletypelistNode2;
        TComma tcommaNode3;
        PSimpletype psimpletypeNode4;
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PBasic pbasicNode5;
        {
            // Block
        TChan tchanNode6;
        tchanNode6 = (TChan)nodeArrayList3.get(0);

        pbasicNode5 = new AChanBasic(tchanNode6);
        }

        psimpletypeNode4 = new ABasicSimpletype(pbasicNode5);
        }

        psimpletypelistNode1 = new AListsSimpleSimpletypeList(psimpletypelistNode2, tcommaNode3, psimpletypeNode4);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AListsSimple$Compound$Identifier11SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpletypeList psimpletypelistNode1;
        {
            // Block
        PSimpletypeList psimpletypelistNode2;
        TComma tcommaNode3;
        PSimpletype psimpletypeNode4;
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        {
            // Block
        PCompoundNameUse pcompoundnameuseNode5;
        {
            // Block
        PDefined pdefinedNode6;
        pdefinedNode6 = (PDefined)nodeArrayList3.get(0);

        pcompoundnameuseNode5 = new AIdentifierCompoundNameUse(pdefinedNode6);
        }

        psimpletypeNode4 = new ACompoundSimpletype(pcompoundnameuseNode5);
        }

        psimpletypelistNode1 = new AListsSimpleSimpletypeList(psimpletypelistNode2, tcommaNode3, psimpletypeNode4);
        }
	nodeList.add(psimpletypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AVariableDeclarationVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        PVarType pvartypeNode2;
        PVarName pvarnameNode3;
        pvartypeNode2 = (PVarType)nodeArrayList1.get(0);
        pvarnameNode3 = (PVarName)nodeArrayList2.get(0);

        pvariabledeclarationNode1 = new AVariableDeclarationVariableDeclaration(pvartypeNode2, pvarnameNode3);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AIdentifierVarName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarName pvarnameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        pvarnameNode1 = new AIdentifierVarName(puniqueNode2);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AExternalChanDeclaration$Simpletype$Basic1$Int11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TExternal texternalNode3;
        PChanName pchannameNode4;
        TOf tofNode5;
        PType ptypeNode6;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        texternalNode3 = (TExternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tofNode5 = (TOf)nodeArrayList4.get(0);
        {
            // Block
        PSimpletype psimpletypeNode7;
        {
            // Block
        PBasic pbasicNode8;
        {
            // Block
        TInt tintNode9;
        tintNode9 = (TInt)nodeArrayList5.get(0);

        pbasicNode8 = new AIntBasic(tintNode9);
        }

        psimpletypeNode7 = new ABasicSimpletype(pbasicNode8);
        }

        ptypeNode6 = new ASimpletypeType(psimpletypeNode7);
        }

        pchanneldeclarationNode1 = new AExternalChanDeclarationChannelDeclaration(tchanNode2, texternalNode3, pchannameNode4, tofNode5, ptypeNode6);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AExternalChanDeclaration$Simpletype$Basic1$Bool11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TExternal texternalNode3;
        PChanName pchannameNode4;
        TOf tofNode5;
        PType ptypeNode6;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        texternalNode3 = (TExternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tofNode5 = (TOf)nodeArrayList4.get(0);
        {
            // Block
        PSimpletype psimpletypeNode7;
        {
            // Block
        PBasic pbasicNode8;
        {
            // Block
        TBool tboolNode9;
        tboolNode9 = (TBool)nodeArrayList5.get(0);

        pbasicNode8 = new ABoolBasic(tboolNode9);
        }

        psimpletypeNode7 = new ABasicSimpletype(pbasicNode8);
        }

        ptypeNode6 = new ASimpletypeType(psimpletypeNode7);
        }

        pchanneldeclarationNode1 = new AExternalChanDeclarationChannelDeclaration(tchanNode2, texternalNode3, pchannameNode4, tofNode5, ptypeNode6);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AExternalChanDeclaration$Simpletype$Basic1$Chant11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TExternal texternalNode3;
        PChanName pchannameNode4;
        TOf tofNode5;
        PType ptypeNode6;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        texternalNode3 = (TExternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tofNode5 = (TOf)nodeArrayList4.get(0);
        {
            // Block
        PSimpletype psimpletypeNode7;
        {
            // Block
        PBasic pbasicNode8;
        {
            // Block
        TChan tchanNode9;
        TLBkt tlbktNode10;
        PDefined pdefinedNode11;
        TRBkt trbktNode12;
        tchanNode9 = (TChan)nodeArrayList5.get(0);
        tlbktNode10 = (TLBkt)nodeArrayList6.get(0);
        pdefinedNode11 = (PDefined)nodeArrayList7.get(0);
        trbktNode12 = (TRBkt)nodeArrayList8.get(0);

        pbasicNode8 = new AChantBasic(tchanNode9, tlbktNode10, pdefinedNode11, trbktNode12);
        }

        psimpletypeNode7 = new ABasicSimpletype(pbasicNode8);
        }

        ptypeNode6 = new ASimpletypeType(psimpletypeNode7);
        }

        pchanneldeclarationNode1 = new AExternalChanDeclarationChannelDeclaration(tchanNode2, texternalNode3, pchannameNode4, tofNode5, ptypeNode6);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AExternalChanDeclaration$Simpletype$Basic1$Chan11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TExternal texternalNode3;
        PChanName pchannameNode4;
        TOf tofNode5;
        PType ptypeNode6;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        texternalNode3 = (TExternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tofNode5 = (TOf)nodeArrayList4.get(0);
        {
            // Block
        PSimpletype psimpletypeNode7;
        {
            // Block
        PBasic pbasicNode8;
        {
            // Block
        TChan tchanNode9;
        tchanNode9 = (TChan)nodeArrayList5.get(0);

        pbasicNode8 = new AChanBasic(tchanNode9);
        }

        psimpletypeNode7 = new ABasicSimpletype(pbasicNode8);
        }

        ptypeNode6 = new ASimpletypeType(psimpletypeNode7);
        }

        pchanneldeclarationNode1 = new AExternalChanDeclarationChannelDeclaration(tchanNode2, texternalNode3, pchannameNode4, tofNode5, ptypeNode6);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AExternalChanDeclaration$Multi1$Identifier1ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TExternal texternalNode3;
        PChanName pchannameNode4;
        TOf tofNode5;
        PType ptypeNode6;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        texternalNode3 = (TExternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tofNode5 = (TOf)nodeArrayList4.get(0);
        {
            // Block
        PMultitypeNameUse pmultitypenameuseNode7;
        {
            // Block
        PDefined pdefinedNode8;
        pdefinedNode8 = (PDefined)nodeArrayList5.get(0);

        pmultitypenameuseNode7 = new AIdentifierMultitypeNameUse(pdefinedNode8);
        }

        ptypeNode6 = new AMultiType(pmultitypenameuseNode7);
        }

        pchanneldeclarationNode1 = new AExternalChanDeclarationChannelDeclaration(tchanNode2, texternalNode3, pchannameNode4, tofNode5, ptypeNode6);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AInternalChanDeclaration$Simpletype$Basic1$Int11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TInternal tinternalNode3;
        PChanName pchannameNode4;
        TLBkt tlbktNode5;
        TNumbers tnumbersNode6;
        TRBkt trbktNode7;
        TOf tofNode8;
        PType ptypeNode9;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tinternalNode3 = (TInternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        tnumbersNode6 = (TNumbers)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);
        tofNode8 = (TOf)nodeArrayList7.get(0);
        {
            // Block
        PSimpletype psimpletypeNode10;
        {
            // Block
        PBasic pbasicNode11;
        {
            // Block
        TInt tintNode12;
        tintNode12 = (TInt)nodeArrayList8.get(0);

        pbasicNode11 = new AIntBasic(tintNode12);
        }

        psimpletypeNode10 = new ABasicSimpletype(pbasicNode11);
        }

        ptypeNode9 = new ASimpletypeType(psimpletypeNode10);
        }

        pchanneldeclarationNode1 = new AInternalChanDeclarationChannelDeclaration(tchanNode2, tinternalNode3, pchannameNode4, tlbktNode5, tnumbersNode6, trbktNode7, tofNode8, ptypeNode9);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AInternalChanDeclaration$Simpletype$Basic1$Bool11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TInternal tinternalNode3;
        PChanName pchannameNode4;
        TLBkt tlbktNode5;
        TNumbers tnumbersNode6;
        TRBkt trbktNode7;
        TOf tofNode8;
        PType ptypeNode9;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tinternalNode3 = (TInternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        tnumbersNode6 = (TNumbers)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);
        tofNode8 = (TOf)nodeArrayList7.get(0);
        {
            // Block
        PSimpletype psimpletypeNode10;
        {
            // Block
        PBasic pbasicNode11;
        {
            // Block
        TBool tboolNode12;
        tboolNode12 = (TBool)nodeArrayList8.get(0);

        pbasicNode11 = new ABoolBasic(tboolNode12);
        }

        psimpletypeNode10 = new ABasicSimpletype(pbasicNode11);
        }

        ptypeNode9 = new ASimpletypeType(psimpletypeNode10);
        }

        pchanneldeclarationNode1 = new AInternalChanDeclarationChannelDeclaration(tchanNode2, tinternalNode3, pchannameNode4, tlbktNode5, tnumbersNode6, trbktNode7, tofNode8, ptypeNode9);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AInternalChanDeclaration$Simpletype$Basic1$Chant11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TInternal tinternalNode3;
        PChanName pchannameNode4;
        TLBkt tlbktNode5;
        TNumbers tnumbersNode6;
        TRBkt trbktNode7;
        TOf tofNode8;
        PType ptypeNode9;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tinternalNode3 = (TInternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        tnumbersNode6 = (TNumbers)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);
        tofNode8 = (TOf)nodeArrayList7.get(0);
        {
            // Block
        PSimpletype psimpletypeNode10;
        {
            // Block
        PBasic pbasicNode11;
        {
            // Block
        TChan tchanNode12;
        TLBkt tlbktNode13;
        PDefined pdefinedNode14;
        TRBkt trbktNode15;
        tchanNode12 = (TChan)nodeArrayList8.get(0);
        tlbktNode13 = (TLBkt)nodeArrayList9.get(0);
        pdefinedNode14 = (PDefined)nodeArrayList10.get(0);
        trbktNode15 = (TRBkt)nodeArrayList11.get(0);

        pbasicNode11 = new AChantBasic(tchanNode12, tlbktNode13, pdefinedNode14, trbktNode15);
        }

        psimpletypeNode10 = new ABasicSimpletype(pbasicNode11);
        }

        ptypeNode9 = new ASimpletypeType(psimpletypeNode10);
        }

        pchanneldeclarationNode1 = new AInternalChanDeclarationChannelDeclaration(tchanNode2, tinternalNode3, pchannameNode4, tlbktNode5, tnumbersNode6, trbktNode7, tofNode8, ptypeNode9);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AInternalChanDeclaration$Simpletype$Basic1$Chan11ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TInternal tinternalNode3;
        PChanName pchannameNode4;
        TLBkt tlbktNode5;
        TNumbers tnumbersNode6;
        TRBkt trbktNode7;
        TOf tofNode8;
        PType ptypeNode9;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tinternalNode3 = (TInternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        tnumbersNode6 = (TNumbers)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);
        tofNode8 = (TOf)nodeArrayList7.get(0);
        {
            // Block
        PSimpletype psimpletypeNode10;
        {
            // Block
        PBasic pbasicNode11;
        {
            // Block
        TChan tchanNode12;
        tchanNode12 = (TChan)nodeArrayList8.get(0);

        pbasicNode11 = new AChanBasic(tchanNode12);
        }

        psimpletypeNode10 = new ABasicSimpletype(pbasicNode11);
        }

        ptypeNode9 = new ASimpletypeType(psimpletypeNode10);
        }

        pchanneldeclarationNode1 = new AInternalChanDeclarationChannelDeclaration(tchanNode2, tinternalNode3, pchannameNode4, tlbktNode5, tnumbersNode6, trbktNode7, tofNode8, ptypeNode9);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AInternalChanDeclaration$Multi1$Identifier1ChannelDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChannelDeclaration pchanneldeclarationNode1;
        {
            // Block
        TChan tchanNode2;
        TInternal tinternalNode3;
        PChanName pchannameNode4;
        TLBkt tlbktNode5;
        TNumbers tnumbersNode6;
        TRBkt trbktNode7;
        TOf tofNode8;
        PType ptypeNode9;
        tchanNode2 = (TChan)nodeArrayList1.get(0);
        tinternalNode3 = (TInternal)nodeArrayList2.get(0);
        pchannameNode4 = (PChanName)nodeArrayList3.get(0);
        tlbktNode5 = (TLBkt)nodeArrayList4.get(0);
        tnumbersNode6 = (TNumbers)nodeArrayList5.get(0);
        trbktNode7 = (TRBkt)nodeArrayList6.get(0);
        tofNode8 = (TOf)nodeArrayList7.get(0);
        {
            // Block
        PMultitypeNameUse pmultitypenameuseNode10;
        {
            // Block
        PDefined pdefinedNode11;
        pdefinedNode11 = (PDefined)nodeArrayList8.get(0);

        pmultitypenameuseNode10 = new AIdentifierMultitypeNameUse(pdefinedNode11);
        }

        ptypeNode9 = new AMultiType(pmultitypenameuseNode10);
        }

        pchanneldeclarationNode1 = new AInternalChanDeclarationChannelDeclaration(tchanNode2, tinternalNode3, pchannameNode4, tlbktNode5, tnumbersNode6, trbktNode7, tofNode8, ptypeNode9);
        }
	nodeList.add(pchanneldeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AIdentifierChanName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChanName pchannameNode1;
        {
            // Block
        PUnique puniqueNode2;
        puniqueNode2 = (PUnique)nodeArrayList1.get(0);

        pchannameNode1 = new AIdentifierChanName(puniqueNode2);
        }
	nodeList.add(pchannameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ASimpleExtSymbol */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExtSymbol pextsymbolNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pextsymbolNode1 = new ASimpleExtSymbol(tidentifierNode2);
        }
	nodeList.add(pextsymbolNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ASimpleUnique */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnique puniqueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        puniqueNode1 = new ASimpleUnique(tidentifierNode2);
        }
	nodeList.add(puniqueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ASimpleDefined */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDefined pdefinedNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pdefinedNode1 = new ASimpleDefined(tidentifierNode2);
        }
	nodeList.add(pdefinedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANonTerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ATerminal$Literals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLiterals pliteralsNode1;
        pliteralsNode1 = (PLiterals)nodeArrayList1.get(0);
	if(pliteralsNode1 != null)
	{
	  listNode2.add(pliteralsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ANonTerminal$Literals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLiterals pliteralsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pliteralsNode2 = (PLiterals)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pliteralsNode2 != null)
	{
	  listNode3.add(pliteralsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ATerminal$BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PBasicList pbasiclistNode1;
        pbasiclistNode1 = (PBasicList)nodeArrayList1.get(0);
	if(pbasiclistNode1 != null)
	{
	  listNode2.add(pbasiclistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ANonTerminal$BasicList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PBasicList pbasiclistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbasiclistNode2 = (PBasicList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbasiclistNode2 != null)
	{
	  listNode3.add(pbasiclistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATerminal$SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSimpletypeList psimpletypelistNode1;
        psimpletypelistNode1 = (PSimpletypeList)nodeArrayList1.get(0);
	if(psimpletypelistNode1 != null)
	{
	  listNode2.add(psimpletypelistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ANonTerminal$SimpletypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSimpletypeList psimpletypelistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psimpletypelistNode2 = (PSimpletypeList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psimpletypelistNode2 != null)
	{
	  listNode3.add(psimpletypelistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {8, SHIFT, 7}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 3}, {14, SHIFT, 20}, },
			{{-1, REDUCE, 12}, {6, SHIFT, 23}, {7, SHIFT, 24}, {37, SHIFT, 25}, },
			{{-1, ERROR, 5}, {14, SHIFT, 20}, },
			{{-1, ERROR, 6}, {14, SHIFT, 20}, },
			{{-1, ERROR, 7}, {14, SHIFT, 20}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 9}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 11}, {14, SHIFT, 20}, },
			{{-1, ERROR, 12}, {16, SHIFT, 34}, },
			{{-1, ERROR, 13}, {16, SHIFT, 35}, },
			{{-1, ERROR, 14}, {16, SHIFT, 36}, },
			{{-1, ERROR, 15}, {16, SHIFT, 37}, },
			{{-1, ERROR, 16}, {16, SHIFT, 38}, },
			{{-1, ERROR, 17}, {16, SHIFT, 39}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {8, SHIFT, 7}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 21}, {39, SHIFT, 41}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 23}, {14, SHIFT, 20}, },
			{{-1, ERROR, 24}, {14, SHIFT, 20}, },
			{{-1, ERROR, 25}, {14, SHIFT, 8}, },
			{{-1, ERROR, 26}, {39, SHIFT, 46}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 28}, {39, SHIFT, 47}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 30}, {20, SHIFT, 48}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 41}, {14, SHIFT, 49}, {40, SHIFT, 50}, },
			{{-1, ERROR, 42}, {9, SHIFT, 54}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 44}, {37, SHIFT, 55}, },
			{{-1, ERROR, 45}, {38, SHIFT, 56}, },
			{{-1, ERROR, 46}, {0, SHIFT, 57}, {1, SHIFT, 58}, {3, SHIFT, 59}, {14, SHIFT, 8}, {40, SHIFT, 60}, },
			{{-1, ERROR, 47}, {0, SHIFT, 64}, {1, SHIFT, 65}, {3, SHIFT, 66}, {14, SHIFT, 8}, {40, SHIFT, 67}, },
			{{-1, ERROR, 48}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 71}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 66}, {17, SHIFT, 73}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 53}, {14, SHIFT, 49}, {40, SHIFT, 74}, },
			{{-1, ERROR, 54}, {0, SHIFT, 76}, {1, SHIFT, 77}, {3, SHIFT, 78}, {14, SHIFT, 8}, },
			{{-1, ERROR, 55}, {15, SHIFT, 80}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, {37, SHIFT, 81}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 68}, {17, SHIFT, 82}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 63}, {0, SHIFT, 57}, {1, SHIFT, 58}, {3, SHIFT, 59}, {14, SHIFT, 8}, {40, SHIFT, 83}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, {37, SHIFT, 85}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 70}, {17, SHIFT, 86}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 70}, {0, SHIFT, 64}, {1, SHIFT, 65}, {3, SHIFT, 66}, {14, SHIFT, 8}, {40, SHIFT, 87}, },
			{{-1, REDUCE, 12}, {37, SHIFT, 25}, },
			{{-1, ERROR, 72}, {9, SHIFT, 89}, },
			{{-1, ERROR, 73}, {14, SHIFT, 49}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 67}, {17, SHIFT, 73}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, {37, SHIFT, 91}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 80}, {38, SHIFT, 92}, },
			{{-1, ERROR, 81}, {14, SHIFT, 8}, },
			{{-1, ERROR, 82}, {0, SHIFT, 94}, {1, SHIFT, 95}, {3, SHIFT, 96}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 69}, {17, SHIFT, 82}, },
			{{-1, ERROR, 85}, {14, SHIFT, 8}, },
			{{-1, ERROR, 86}, {0, SHIFT, 99}, {1, SHIFT, 100}, {3, SHIFT, 101}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 71}, {17, SHIFT, 86}, },
			{{-1, ERROR, 89}, {14, SHIFT, 103}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 91}, {14, SHIFT, 8}, },
			{{-1, ERROR, 92}, {9, SHIFT, 107}, },
			{{-1, ERROR, 93}, {38, SHIFT, 108}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 33}, {37, SHIFT, 109}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 98}, {38, SHIFT, 110}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {37, SHIFT, 111}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 106}, {38, SHIFT, 112}, },
			{{-1, ERROR, 107}, {0, SHIFT, 113}, {1, SHIFT, 114}, {3, SHIFT, 115}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 109}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 111}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 58}, {37, SHIFT, 119}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 117}, {38, SHIFT, 120}, },
			{{-1, ERROR, 118}, {38, SHIFT, 121}, },
			{{-1, ERROR, 119}, {14, SHIFT, 8}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 122}, {38, SHIFT, 123}, },
			{{-1, REDUCE, 57}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {19, 40}, },
			{{-1, 11}, {48, 72}, },
			{{-1, 12}, },
			{{-1, 30}, },
			{{-1, 104}, },
			{{-1, 13}, },
			{{-1, 21}, },
			{{-1, 51}, {53, 75}, },
			{{-1, 52}, {73, 90}, },
			{{-1, 14}, },
			{{-1, 61}, {63, 84}, },
			{{-1, 26}, },
			{{-1, 15}, },
			{{-1, 28}, },
			{{-1, 68}, {70, 88}, },
			{{-1, 16}, },
			{{-1, 32}, },
			{{-1, 17}, },
			{{-1, 42}, {24, 44}, },
			{{-1, 105}, },
			{{-1, 43}, {3, 22}, {5, 27}, {6, 29}, {7, 31}, {11, 33}, },
			{{-1, 18}, {25, 45}, {46, 62}, {47, 69}, {54, 79}, {63, 62}, {70, 69}, {81, 93}, {82, 97}, {85, 98}, {86, 102}, {91, 106}, {107, 116}, {109, 117}, {111, 118}, {119, 122}, },
			{{-1, 19}, },
			{{-1, 53}, },
			{{-1, 63}, },
			{{-1, 70}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Int', 'Bool', 'Enum', 'Chn', 'Struct', 'Mtype', 'Param', identifier, EOF",
			"expecting: 'of', identifier",
			"expecting: identifier",
			"expecting: 'external', 'internal', identifier, '['",
			"expecting: 'Int', 'Bool', 'Chn', 'of', identifier, ';', ',', ']', '}'",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'of', ';', ':', '[', '{'",
			"expecting: '{'",
			"expecting: ':'",
			"expecting: identifier, '}'",
			"expecting: 'of'",
			"expecting: 'of', '['",
			"expecting: '['",
			"expecting: ']'",
			"expecting: 'Int', 'Bool', 'Chn', identifier, '}'",
			"expecting: 'Int', 'Bool', 'Chn', identifier",
			"expecting: identifier, ',', '}'",
			"expecting: numbers",
			"expecting: 'Int', 'Bool', 'Chn', identifier, ',', '}'",
			"expecting: 'Int', 'Bool', 'Chn', identifier, ',', '[', '}'",
			"expecting: ';', '['",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 2, 2, 2, 4, 5, 0, 2, 6, 6, 6, 6, 6, 6, 1, 0, 7, 8, 8, 2, 2, 2, 8, 8, 8, 8, 9, 9, 6, 6, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13, 14, 15, 15, 16, 17, 6, 17, 17, 10, 16, 18, 1, 19, 19, 20, 6, 19, 19, 15, 19, 19, 20, 6, 19, 19, 15, 12, 11, 2, 6, 17, 6, 6, 21, 6, 14, 2, 16, 6, 19, 2, 16, 6, 19, 2, 17, 2, 11, 14, 19, 19, 20, 19, 14, 19, 19, 20, 19, 6, 6, 6, 14, 16, 19, 2, 19, 2, 6, 6, 6, 21, 6, 14, 14, 2, 19, 19, 14, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
