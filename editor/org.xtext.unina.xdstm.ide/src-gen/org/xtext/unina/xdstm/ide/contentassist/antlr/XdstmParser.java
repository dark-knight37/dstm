/*
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.unina.xdstm.ide.contentassist.antlr.internal.InternalXdstmParser;
import org.xtext.unina.xdstm.services.XdstmGrammarAccess;

public class XdstmParser extends AbstractContentAssistParser {

	@Inject
	private XdstmGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalXdstmParser createParser() {
		InternalXdstmParser result = new InternalXdstmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVertexAccess().getAlternatives(), "rule__Vertex__Alternatives");
					put(grammarAccess.getEnteringNodeAbsAccess().getAlternatives(), "rule__EnteringNodeAbs__Alternatives");
					put(grammarAccess.getDestinationAccess().getAlternatives(), "rule__Destination__Alternatives");
					put(grammarAccess.getSourceAccess().getAlternatives(), "rule__Source__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getDSTMAccess().getGroup(), "rule__DSTM__Group__0");
					put(grammarAccess.getDSTMAccess().getGroup_6(), "rule__DSTM__Group_6__0");
					put(grammarAccess.getMachineAccess().getGroup(), "rule__Machine__Group__0");
					put(grammarAccess.getMachineAccess().getGroup_6(), "rule__Machine__Group_6__0");
					put(grammarAccess.getMachineAccess().getGroup_11(), "rule__Machine__Group_11__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
					put(grammarAccess.getBoxAccess().getGroup_7(), "rule__Box__Group_7__0");
					put(grammarAccess.getEnteringNodeAccess().getGroup(), "rule__EnteringNode__Group__0");
					put(grammarAccess.getInitialNodeAccess().getGroup(), "rule__InitialNode__Group__0");
					put(grammarAccess.getExitingNodeAccess().getGroup(), "rule__ExitingNode__Group__0");
					put(grammarAccess.getForkAccess().getGroup(), "rule__Fork__Group__0");
					put(grammarAccess.getJoinAccess().getGroup(), "rule__Join__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_6(), "rule__Transition__Group_6__0");
					put(grammarAccess.getTransitionAccess().getGroup_10(), "rule__Transition__Group_10__0");
					put(grammarAccess.getTransitionAccess().getGroup_11(), "rule__Transition__Group_11__0");
					put(grammarAccess.getTransitionAccess().getGroup_12(), "rule__Transition__Group_12__0");
					put(grammarAccess.getTransitionAccess().getGroup_13(), "rule__Transition__Group_13__0");
					put(grammarAccess.getTransitionAccess().getGroup_14(), "rule__Transition__Group_14__0");
					put(grammarAccess.getTransitionAccess().getGroup_14_4(), "rule__Transition__Group_14_4__0");
					put(grammarAccess.getTransitionAccess().getGroup_15(), "rule__Transition__Group_15__0");
					put(grammarAccess.getTransitionAccess().getGroup_15_4(), "rule__Transition__Group_15_4__0");
					put(grammarAccess.getRequirementsAccess().getGroup(), "rule__Requirements__Group__0");
					put(grammarAccess.getRequirementsAccess().getGroup_1(), "rule__Requirements__Group_1__0");
					put(grammarAccess.getRequirementsAccess().getGroup_1_4(), "rule__Requirements__Group_1_4__0");
					put(grammarAccess.getModelAccess().getIncludeAssignment_0(), "rule__Model__IncludeAssignment_0");
					put(grammarAccess.getModelAccess().getMachinesAssignment_1(), "rule__Model__MachinesAssignment_1");
					put(grammarAccess.getModelAccess().getMachinesAssignment_2(), "rule__Model__MachinesAssignment_2");
					put(grammarAccess.getModelAccess().getDstmAssignment_3(), "rule__Model__DstmAssignment_3");
					put(grammarAccess.getIncludeAccess().getImportURIAssignment_1(), "rule__Include__ImportURIAssignment_1");
					put(grammarAccess.getDSTMAccess().getNameAssignment_1(), "rule__DSTM__NameAssignment_1");
					put(grammarAccess.getDSTMAccess().getMachinesAssignment_5(), "rule__DSTM__MachinesAssignment_5");
					put(grammarAccess.getDSTMAccess().getMachinesAssignment_6_1(), "rule__DSTM__MachinesAssignment_6_1");
					put(grammarAccess.getDSTMAccess().getMainAssignment_9(), "rule__DSTM__MainAssignment_9");
					put(grammarAccess.getMachineAccess().getNameAssignment_1(), "rule__Machine__NameAssignment_1");
					put(grammarAccess.getMachineAccess().getVertexesAssignment_5(), "rule__Machine__VertexesAssignment_5");
					put(grammarAccess.getMachineAccess().getVertexesAssignment_6_1(), "rule__Machine__VertexesAssignment_6_1");
					put(grammarAccess.getMachineAccess().getTransitionsAssignment_10(), "rule__Machine__TransitionsAssignment_10");
					put(grammarAccess.getMachineAccess().getTransitionsAssignment_11_1(), "rule__Machine__TransitionsAssignment_11_1");
					put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
					put(grammarAccess.getNodeAccess().getRequirementsAssignment_2(), "rule__Node__RequirementsAssignment_2");
					put(grammarAccess.getBoxAccess().getNameAssignment_1(), "rule__Box__NameAssignment_1");
					put(grammarAccess.getBoxAccess().getRequirementsAssignment_2(), "rule__Box__RequirementsAssignment_2");
					put(grammarAccess.getBoxAccess().getInstantiationAssignment_6(), "rule__Box__InstantiationAssignment_6");
					put(grammarAccess.getBoxAccess().getInstantiationAssignment_7_1(), "rule__Box__InstantiationAssignment_7_1");
					put(grammarAccess.getEnteringNodeAccess().getNameAssignment_1(), "rule__EnteringNode__NameAssignment_1");
					put(grammarAccess.getEnteringNodeAccess().getRequirementsAssignment_2(), "rule__EnteringNode__RequirementsAssignment_2");
					put(grammarAccess.getInitialNodeAccess().getNameAssignment_1(), "rule__InitialNode__NameAssignment_1");
					put(grammarAccess.getInitialNodeAccess().getRequirementsAssignment_2(), "rule__InitialNode__RequirementsAssignment_2");
					put(grammarAccess.getExitingNodeAccess().getNameAssignment_1(), "rule__ExitingNode__NameAssignment_1");
					put(grammarAccess.getExitingNodeAccess().getRequirementsAssignment_2(), "rule__ExitingNode__RequirementsAssignment_2");
					put(grammarAccess.getForkAccess().getNameAssignment_1(), "rule__Fork__NameAssignment_1");
					put(grammarAccess.getForkAccess().getRequirementsAssignment_2(), "rule__Fork__RequirementsAssignment_2");
					put(grammarAccess.getJoinAccess().getNameAssignment_1(), "rule__Join__NameAssignment_1");
					put(grammarAccess.getJoinAccess().getRequirementsAssignment_2(), "rule__Join__RequirementsAssignment_2");
					put(grammarAccess.getTransitionAccess().getNameAssignment_1(), "rule__Transition__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getRequirementsAssignment_2(), "rule__Transition__RequirementsAssignment_2");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_5(), "rule__Transition__SourceAssignment_5");
					put(grammarAccess.getTransitionAccess().getExiting_nodeAssignment_6_2(), "rule__Transition__Exiting_nodeAssignment_6_2");
					put(grammarAccess.getTransitionAccess().getDestinationAssignment_9(), "rule__Transition__DestinationAssignment_9");
					put(grammarAccess.getTransitionAccess().getEntering_nodeAssignment_10_2(), "rule__Transition__Entering_nodeAssignment_10_2");
					put(grammarAccess.getTransitionAccess().getIs_preemptiveAssignment_11_1(), "rule__Transition__Is_preemptiveAssignment_11_1");
					put(grammarAccess.getTransitionAccess().getTriggerAssignment_12_2(), "rule__Transition__TriggerAssignment_12_2");
					put(grammarAccess.getTransitionAccess().getConditionAssignment_13_2(), "rule__Transition__ConditionAssignment_13_2");
					put(grammarAccess.getTransitionAccess().getActionsAssignment_14_3(), "rule__Transition__ActionsAssignment_14_3");
					put(grammarAccess.getTransitionAccess().getActionsAssignment_14_4_1(), "rule__Transition__ActionsAssignment_14_4_1");
					put(grammarAccess.getTransitionAccess().getPar_instantiationAssignment_15_3(), "rule__Transition__Par_instantiationAssignment_15_3");
					put(grammarAccess.getTransitionAccess().getPar_instantiationAssignment_15_4_1(), "rule__Transition__Par_instantiationAssignment_15_4_1");
					put(grammarAccess.getRequirementsAccess().getRequirementsAssignment_1_3(), "rule__Requirements__RequirementsAssignment_1_3");
					put(grammarAccess.getRequirementsAccess().getRequirementsAssignment_1_4_1(), "rule__Requirements__RequirementsAssignment_1_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XdstmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XdstmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
