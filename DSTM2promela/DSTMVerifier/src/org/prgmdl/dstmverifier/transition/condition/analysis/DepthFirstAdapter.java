/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.analysis;

import java.util.*;
import org.prgmdl.dstmverifier.transition.condition.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPCondition().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inACondCondition(ACondCondition node)
    {
        defaultIn(node);
    }

    public void outACondCondition(ACondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondition(ACondCondition node)
    {
        inACondCondition(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outACondCondition(node);
    }

    public void inANestedTerm(ANestedTerm node)
    {
        defaultIn(node);
    }

    public void outANestedTerm(ANestedTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedTerm(ANestedTerm node)
    {
        inANestedTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outANestedTerm(node);
    }

    public void inAUnaryTerm(AUnaryTerm node)
    {
        defaultIn(node);
    }

    public void outAUnaryTerm(AUnaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryTerm(AUnaryTerm node)
    {
        inAUnaryTerm(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAUnaryTerm(node);
    }

    public void inASimpleTerm(ASimpleTerm node)
    {
        defaultIn(node);
    }

    public void outASimpleTerm(ASimpleTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTerm(ASimpleTerm node)
    {
        inASimpleTerm(node);
        if(node.getAtomic() != null)
        {
            node.getAtomic().apply(this);
        }
        outASimpleTerm(node);
    }

    public void inABinaryTerm(ABinaryTerm node)
    {
        defaultIn(node);
    }

    public void outABinaryTerm(ABinaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryTerm(ABinaryTerm node)
    {
        inABinaryTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getBinop() != null)
        {
            node.getBinop().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outABinaryTerm(node);
    }

    public void inAAndopBinop(AAndopBinop node)
    {
        defaultIn(node);
    }

    public void outAAndopBinop(AAndopBinop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndopBinop(AAndopBinop node)
    {
        inAAndopBinop(node);
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        outAAndopBinop(node);
    }

    public void inAOropBinop(AOropBinop node)
    {
        defaultIn(node);
    }

    public void outAOropBinop(AOropBinop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOropBinop(AOropBinop node)
    {
        inAOropBinop(node);
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        outAOropBinop(node);
    }

    public void inALeftFirst(ALeftFirst node)
    {
        defaultIn(node);
    }

    public void outALeftFirst(ALeftFirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFirst(ALeftFirst node)
    {
        inALeftFirst(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outALeftFirst(node);
    }

    public void inAMetaFirst(AMetaFirst node)
    {
        defaultIn(node);
    }

    public void outAMetaFirst(AMetaFirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetaFirst(AMetaFirst node)
    {
        inAMetaFirst(node);
        if(node.getOpaqueexpr() != null)
        {
            node.getOpaqueexpr().apply(this);
        }
        outAMetaFirst(node);
    }

    public void inARightSecond(ARightSecond node)
    {
        defaultIn(node);
    }

    public void outARightSecond(ARightSecond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightSecond(ARightSecond node)
    {
        inARightSecond(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outARightSecond(node);
    }

    public void inAMetaSecond(AMetaSecond node)
    {
        defaultIn(node);
    }

    public void outAMetaSecond(AMetaSecond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMetaSecond(AMetaSecond node)
    {
        inAMetaSecond(node);
        if(node.getOpaqueexpr() != null)
        {
            node.getOpaqueexpr().apply(this);
        }
        outAMetaSecond(node);
    }

    public void inATrueAtomic(ATrueAtomic node)
    {
        defaultIn(node);
    }

    public void outATrueAtomic(ATrueAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueAtomic(ATrueAtomic node)
    {
        inATrueAtomic(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueAtomic(node);
    }

    public void inAFalseAtomic(AFalseAtomic node)
    {
        defaultIn(node);
    }

    public void outAFalseAtomic(AFalseAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseAtomic(AFalseAtomic node)
    {
        inAFalseAtomic(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseAtomic(node);
    }

    public void inAEquiopAtomic(AEquiopAtomic node)
    {
        defaultIn(node);
    }

    public void outAEquiopAtomic(AEquiopAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquiopAtomic(AEquiopAtomic node)
    {
        inAEquiopAtomic(node);
        if(node.getLval() != null)
        {
            node.getLval().apply(this);
        }
        if(node.getEqop() != null)
        {
            node.getEqop().apply(this);
        }
        if(node.getRval() != null)
        {
            node.getRval().apply(this);
        }
        outAEquiopAtomic(node);
    }

    public void inACompopAtomic(ACompopAtomic node)
    {
        defaultIn(node);
    }

    public void outACompopAtomic(ACompopAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompopAtomic(ACompopAtomic node)
    {
        inACompopAtomic(node);
        if(node.getLval() != null)
        {
            node.getLval().apply(this);
        }
        if(node.getCmpop() != null)
        {
            node.getCmpop().apply(this);
        }
        if(node.getRval() != null)
        {
            node.getRval().apply(this);
        }
        outACompopAtomic(node);
    }

    public void inASizecondAtomic(ASizecondAtomic node)
    {
        defaultIn(node);
    }

    public void outASizecondAtomic(ASizecondAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizecondAtomic(ASizecondAtomic node)
    {
        inASizecondAtomic(node);
        if(node.getChname() != null)
        {
            node.getChname().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outASizecondAtomic(node);
    }

    public void inATrmlistAtomic(ATrmlistAtomic node)
    {
        defaultIn(node);
    }

    public void outATrmlistAtomic(ATrmlistAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrmlistAtomic(ATrmlistAtomic node)
    {
        inATrmlistAtomic(node);
        if(node.getChname() != null)
        {
            node.getChname().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getTrmlist() != null)
        {
            node.getTrmlist().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outATrmlistAtomic(node);
    }

    public void inAFullcondSize(AFullcondSize node)
    {
        defaultIn(node);
    }

    public void outAFullcondSize(AFullcondSize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFullcondSize(AFullcondSize node)
    {
        inAFullcondSize(node);
        if(node.getFull() != null)
        {
            node.getFull().apply(this);
        }
        outAFullcondSize(node);
    }

    public void inAEmptycondSize(AEmptycondSize node)
    {
        defaultIn(node);
    }

    public void outAEmptycondSize(AEmptycondSize node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptycondSize(AEmptycondSize node)
    {
        inAEmptycondSize(node);
        if(node.getEmpty() != null)
        {
            node.getEmpty().apply(this);
        }
        outAEmptycondSize(node);
    }

    public void inANeqEqop(ANeqEqop node)
    {
        defaultIn(node);
    }

    public void outANeqEqop(ANeqEqop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqEqop(ANeqEqop node)
    {
        inANeqEqop(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqEqop(node);
    }

    public void inAEqEqop(AEqEqop node)
    {
        defaultIn(node);
    }

    public void outAEqEqop(AEqEqop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqEqop(AEqEqop node)
    {
        inAEqEqop(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqEqop(node);
    }

    public void inALteqCmpop(ALteqCmpop node)
    {
        defaultIn(node);
    }

    public void outALteqCmpop(ALteqCmpop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqCmpop(ALteqCmpop node)
    {
        inALteqCmpop(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqCmpop(node);
    }

    public void inALtCmpop(ALtCmpop node)
    {
        defaultIn(node);
    }

    public void outALtCmpop(ALtCmpop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtCmpop(ALtCmpop node)
    {
        inALtCmpop(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCmpop(node);
    }

    public void inAGteqCmpop(AGteqCmpop node)
    {
        defaultIn(node);
    }

    public void outAGteqCmpop(AGteqCmpop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqCmpop(AGteqCmpop node)
    {
        inAGteqCmpop(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqCmpop(node);
    }

    public void inAGtCmpop(AGtCmpop node)
    {
        defaultIn(node);
    }

    public void outAGtCmpop(AGtCmpop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtCmpop(AGtCmpop node)
    {
        inAGtCmpop(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCmpop(node);
    }

    public void inASimpleLval(ASimpleLval node)
    {
        defaultIn(node);
    }

    public void outASimpleLval(ASimpleLval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleLval(ASimpleLval node)
    {
        inASimpleLval(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimpleLval(node);
    }

    public void inAComposedLval(AComposedLval node)
    {
        defaultIn(node);
    }

    public void outAComposedLval(AComposedLval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComposedLval(AComposedLval node)
    {
        inAComposedLval(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMathop() != null)
        {
            node.getMathop().apply(this);
        }
        if(node.getLval() != null)
        {
            node.getLval().apply(this);
        }
        outAComposedLval(node);
    }

    public void inASimpleRval(ASimpleRval node)
    {
        defaultIn(node);
    }

    public void outASimpleRval(ASimpleRval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleRval(ASimpleRval node)
    {
        inASimpleRval(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimpleRval(node);
    }

    public void inAComposedRval(AComposedRval node)
    {
        defaultIn(node);
    }

    public void outAComposedRval(AComposedRval node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComposedRval(AComposedRval node)
    {
        inAComposedRval(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMathop() != null)
        {
            node.getMathop().apply(this);
        }
        if(node.getRval() != null)
        {
            node.getRval().apply(this);
        }
        outAComposedRval(node);
    }

    public void inATrueExpr(ATrueExpr node)
    {
        defaultIn(node);
    }

    public void outATrueExpr(ATrueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        inATrueExpr(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpr(node);
    }

    public void inAFalseExpr(AFalseExpr node)
    {
        defaultIn(node);
    }

    public void outAFalseExpr(AFalseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        inAFalseExpr(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpr(node);
    }

    public void inAIdExpr(AIdExpr node)
    {
        defaultIn(node);
    }

    public void outAIdExpr(AIdExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpr(AIdExpr node)
    {
        inAIdExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExpr(node);
    }

    public void inAChnExpr(AChnExpr node)
    {
        defaultIn(node);
    }

    public void outAChnExpr(AChnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChnExpr(AChnExpr node)
    {
        inAChnExpr(node);
        if(node.getChn() != null)
        {
            node.getChn().apply(this);
        }
        if(node.getColonColon() != null)
        {
            node.getColonColon().apply(this);
        }
        if(node.getChnName() != null)
        {
            node.getChnName().apply(this);
        }
        outAChnExpr(node);
    }

    public void inANumExpr(ANumExpr node)
    {
        defaultIn(node);
    }

    public void outANumExpr(ANumExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumExpr(ANumExpr node)
    {
        inANumExpr(node);
        if(node.getNumbers() != null)
        {
            node.getNumbers().apply(this);
        }
        outANumExpr(node);
    }

    public void inADcareExpr(ADcareExpr node)
    {
        defaultIn(node);
    }

    public void outADcareExpr(ADcareExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADcareExpr(ADcareExpr node)
    {
        inADcareExpr(node);
        if(node.getDcsymb() != null)
        {
            node.getDcsymb().apply(this);
        }
        outADcareExpr(node);
    }

    public void inAEnumExpr(AEnumExpr node)
    {
        defaultIn(node);
    }

    public void outAEnumExpr(AEnumExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumExpr(AEnumExpr node)
    {
        inAEnumExpr(node);
        if(node.getEName() != null)
        {
            node.getEName().apply(this);
        }
        if(node.getColonColon() != null)
        {
            node.getColonColon().apply(this);
        }
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outAEnumExpr(node);
    }

    public void inALenChnExpr(ALenChnExpr node)
    {
        defaultIn(node);
    }

    public void outALenChnExpr(ALenChnExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALenChnExpr(ALenChnExpr node)
    {
        inALenChnExpr(node);
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getChnName() != null)
        {
            node.getChnName().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALenChnExpr(node);
    }

    public void inAPlusMathop(APlusMathop node)
    {
        defaultIn(node);
    }

    public void outAPlusMathop(APlusMathop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusMathop(APlusMathop node)
    {
        inAPlusMathop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusMathop(node);
    }

    public void inAMinusMathop(AMinusMathop node)
    {
        defaultIn(node);
    }

    public void outAMinusMathop(AMinusMathop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusMathop(AMinusMathop node)
    {
        inAMinusMathop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusMathop(node);
    }

    public void inAStarMathop(AStarMathop node)
    {
        defaultIn(node);
    }

    public void outAStarMathop(AStarMathop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarMathop(AStarMathop node)
    {
        inAStarMathop(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarMathop(node);
    }

    public void inASlashMathop(ASlashMathop node)
    {
        defaultIn(node);
    }

    public void outASlashMathop(ASlashMathop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashMathop(ASlashMathop node)
    {
        inASlashMathop(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outASlashMathop(node);
    }

    public void inASimpleTrmlist(ASimpleTrmlist node)
    {
        defaultIn(node);
    }

    public void outASimpleTrmlist(ASimpleTrmlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTrmlist(ASimpleTrmlist node)
    {
        inASimpleTrmlist(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimpleTrmlist(node);
    }

    public void inAComplexTrmlist(AComplexTrmlist node)
    {
        defaultIn(node);
    }

    public void outAComplexTrmlist(AComplexTrmlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComplexTrmlist(AComplexTrmlist node)
    {
        inAComplexTrmlist(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTrmlist() != null)
        {
            node.getTrmlist().apply(this);
        }
        outAComplexTrmlist(node);
    }

    public void inAChnIdChnName(AChnIdChnName node)
    {
        defaultIn(node);
    }

    public void outAChnIdChnName(AChnIdChnName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChnIdChnName(AChnIdChnName node)
    {
        inAChnIdChnName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAChnIdChnName(node);
    }

    public void inAIntBasic(AIntBasic node)
    {
        defaultIn(node);
    }

    public void outAIntBasic(AIntBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntBasic(AIntBasic node)
    {
        inAIntBasic(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntBasic(node);
    }

    public void inABoolBasic(ABoolBasic node)
    {
        defaultIn(node);
    }

    public void outABoolBasic(ABoolBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolBasic(ABoolBasic node)
    {
        inABoolBasic(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolBasic(node);
    }

    public void inAChnBasic(AChnBasic node)
    {
        defaultIn(node);
    }

    public void outAChnBasic(AChnBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChnBasic(AChnBasic node)
    {
        inAChnBasic(node);
        if(node.getChn() != null)
        {
            node.getChn().apply(this);
        }
        outAChnBasic(node);
    }

    public void inAENameBasic(AENameBasic node)
    {
        defaultIn(node);
    }

    public void outAENameBasic(AENameBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAENameBasic(AENameBasic node)
    {
        inAENameBasic(node);
        if(node.getEName() != null)
        {
            node.getEName().apply(this);
        }
        outAENameBasic(node);
    }

    public void inAVarIdVarName(AVarIdVarName node)
    {
        defaultIn(node);
    }

    public void outAVarIdVarName(AVarIdVarName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdVarName(AVarIdVarName node)
    {
        inAVarIdVarName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarIdVarName(node);
    }

    public void inAChIdChname(AChIdChname node)
    {
        defaultIn(node);
    }

    public void outAChIdChname(AChIdChname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChIdChname(AChIdChname node)
    {
        inAChIdChname(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAChIdChname(node);
    }

    public void inALIdLiteral(ALIdLiteral node)
    {
        defaultIn(node);
    }

    public void outALIdLiteral(ALIdLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALIdLiteral(ALIdLiteral node)
    {
        inALIdLiteral(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALIdLiteral(node);
    }

    public void inAEIdEName(AEIdEName node)
    {
        defaultIn(node);
    }

    public void outAEIdEName(AEIdEName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEIdEName(AEIdEName node)
    {
        inAEIdEName(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAEIdEName(node);
    }
}
