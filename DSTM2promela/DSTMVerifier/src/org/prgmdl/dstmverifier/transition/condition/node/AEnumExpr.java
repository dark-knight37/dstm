/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.node;

import org.prgmdl.dstmverifier.transition.condition.analysis.*;

@SuppressWarnings("nls")
public final class AEnumExpr extends PExpr
{
    private PEName _eName_;
    private TColonColon _colonColon_;
    private PLiteral _literal_;

    public AEnumExpr()
    {
        // Constructor
    }

    public AEnumExpr(
        @SuppressWarnings("hiding") PEName _eName_,
        @SuppressWarnings("hiding") TColonColon _colonColon_,
        @SuppressWarnings("hiding") PLiteral _literal_)
    {
        // Constructor
        setEName(_eName_);

        setColonColon(_colonColon_);

        setLiteral(_literal_);

    }

    @Override
    public Object clone()
    {
        return new AEnumExpr(
            cloneNode(this._eName_),
            cloneNode(this._colonColon_),
            cloneNode(this._literal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumExpr(this);
    }

    public PEName getEName()
    {
        return this._eName_;
    }

    public void setEName(PEName node)
    {
        if(this._eName_ != null)
        {
            this._eName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eName_ = node;
    }

    public TColonColon getColonColon()
    {
        return this._colonColon_;
    }

    public void setColonColon(TColonColon node)
    {
        if(this._colonColon_ != null)
        {
            this._colonColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colonColon_ = node;
    }

    public PLiteral getLiteral()
    {
        return this._literal_;
    }

    public void setLiteral(PLiteral node)
    {
        if(this._literal_ != null)
        {
            this._literal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._literal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eName_)
            + toString(this._colonColon_)
            + toString(this._literal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eName_ == child)
        {
            this._eName_ = null;
            return;
        }

        if(this._colonColon_ == child)
        {
            this._colonColon_ = null;
            return;
        }

        if(this._literal_ == child)
        {
            this._literal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._eName_ == oldChild)
        {
            setEName((PEName) newChild);
            return;
        }

        if(this._colonColon_ == oldChild)
        {
            setColonColon((TColonColon) newChild);
            return;
        }

        if(this._literal_ == oldChild)
        {
            setLiteral((PLiteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
