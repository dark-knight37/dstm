/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.node;

import org.prgmdl.dstmverifier.transition.condition.analysis.*;

@SuppressWarnings("nls")
public final class AComposedLval extends PLval
{
    private PExpr _expr_;
    private PMathop _mathop_;
    private PLval _lval_;

    public AComposedLval()
    {
        // Constructor
    }

    public AComposedLval(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") PMathop _mathop_,
        @SuppressWarnings("hiding") PLval _lval_)
    {
        // Constructor
        setExpr(_expr_);

        setMathop(_mathop_);

        setLval(_lval_);

    }

    @Override
    public Object clone()
    {
        return new AComposedLval(
            cloneNode(this._expr_),
            cloneNode(this._mathop_),
            cloneNode(this._lval_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComposedLval(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public PMathop getMathop()
    {
        return this._mathop_;
    }

    public void setMathop(PMathop node)
    {
        if(this._mathop_ != null)
        {
            this._mathop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mathop_ = node;
    }

    public PLval getLval()
    {
        return this._lval_;
    }

    public void setLval(PLval node)
    {
        if(this._lval_ != null)
        {
            this._lval_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lval_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._mathop_)
            + toString(this._lval_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._mathop_ == child)
        {
            this._mathop_ = null;
            return;
        }

        if(this._lval_ == child)
        {
            this._lval_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._mathop_ == oldChild)
        {
            setMathop((PMathop) newChild);
            return;
        }

        if(this._lval_ == oldChild)
        {
            setLval((PLval) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
