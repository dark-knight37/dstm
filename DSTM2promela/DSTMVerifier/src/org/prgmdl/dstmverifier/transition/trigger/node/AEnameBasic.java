/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.trigger.node;

import org.prgmdl.dstmverifier.transition.trigger.analysis.*;

@SuppressWarnings("nls")
public final class AEnameBasic extends PBasic
{
    private PEName _eName_;

    public AEnameBasic()
    {
        // Constructor
    }

    public AEnameBasic(
        @SuppressWarnings("hiding") PEName _eName_)
    {
        // Constructor
        setEName(_eName_);

    }

    @Override
    public Object clone()
    {
        return new AEnameBasic(
            cloneNode(this._eName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnameBasic(this);
    }

    public PEName getEName()
    {
        return this._eName_;
    }

    public void setEName(PEName node)
    {
        if(this._eName_ != null)
        {
            this._eName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eName_ == child)
        {
            this._eName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._eName_ == oldChild)
        {
            setEName((PEName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
