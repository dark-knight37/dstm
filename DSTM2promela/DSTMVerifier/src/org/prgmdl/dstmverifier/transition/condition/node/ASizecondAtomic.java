/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.node;

import org.prgmdl.dstmverifier.transition.condition.analysis.*;

@SuppressWarnings("nls")
public final class ASizecondAtomic extends PAtomic
{
    private PChname _chname_;
    private TLBkt _lBkt_;
    private TQmark _qmark_;
    private PSize _size_;
    private TRBkt _rBkt_;

    public ASizecondAtomic()
    {
        // Constructor
    }

    public ASizecondAtomic(
        @SuppressWarnings("hiding") PChname _chname_,
        @SuppressWarnings("hiding") TLBkt _lBkt_,
        @SuppressWarnings("hiding") TQmark _qmark_,
        @SuppressWarnings("hiding") PSize _size_,
        @SuppressWarnings("hiding") TRBkt _rBkt_)
    {
        // Constructor
        setChname(_chname_);

        setLBkt(_lBkt_);

        setQmark(_qmark_);

        setSize(_size_);

        setRBkt(_rBkt_);

    }

    @Override
    public Object clone()
    {
        return new ASizecondAtomic(
            cloneNode(this._chname_),
            cloneNode(this._lBkt_),
            cloneNode(this._qmark_),
            cloneNode(this._size_),
            cloneNode(this._rBkt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASizecondAtomic(this);
    }

    public PChname getChname()
    {
        return this._chname_;
    }

    public void setChname(PChname node)
    {
        if(this._chname_ != null)
        {
            this._chname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._chname_ = node;
    }

    public TLBkt getLBkt()
    {
        return this._lBkt_;
    }

    public void setLBkt(TLBkt node)
    {
        if(this._lBkt_ != null)
        {
            this._lBkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBkt_ = node;
    }

    public TQmark getQmark()
    {
        return this._qmark_;
    }

    public void setQmark(TQmark node)
    {
        if(this._qmark_ != null)
        {
            this._qmark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._qmark_ = node;
    }

    public PSize getSize()
    {
        return this._size_;
    }

    public void setSize(PSize node)
    {
        if(this._size_ != null)
        {
            this._size_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._size_ = node;
    }

    public TRBkt getRBkt()
    {
        return this._rBkt_;
    }

    public void setRBkt(TRBkt node)
    {
        if(this._rBkt_ != null)
        {
            this._rBkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBkt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._chname_)
            + toString(this._lBkt_)
            + toString(this._qmark_)
            + toString(this._size_)
            + toString(this._rBkt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._chname_ == child)
        {
            this._chname_ = null;
            return;
        }

        if(this._lBkt_ == child)
        {
            this._lBkt_ = null;
            return;
        }

        if(this._qmark_ == child)
        {
            this._qmark_ = null;
            return;
        }

        if(this._size_ == child)
        {
            this._size_ = null;
            return;
        }

        if(this._rBkt_ == child)
        {
            this._rBkt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._chname_ == oldChild)
        {
            setChname((PChname) newChild);
            return;
        }

        if(this._lBkt_ == oldChild)
        {
            setLBkt((TLBkt) newChild);
            return;
        }

        if(this._qmark_ == oldChild)
        {
            setQmark((TQmark) newChild);
            return;
        }

        if(this._size_ == oldChild)
        {
            setSize((PSize) newChild);
            return;
        }

        if(this._rBkt_ == oldChild)
        {
            setRBkt((TRBkt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
