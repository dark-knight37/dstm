// automatically generated by Xtext
grammar org.xtext.unina.xdstmdata.Xdstmdata with org.eclipse.xtext.common.Terminals

generate xDstmdata "http://www.xtext.org/unina/xdstm/XDstmdata"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

tTypes returns tTypes:
	((tEnum += tEnum) | 
	(tCompound += tCompound) |
	(tMultitype += tMultitype))*
	
	((cIntchannel += cIntchannel) |
	(cExtchannel += cExtchannel) |
	(vVariable += vVariable))*
;

tEnum : 'Enum' name=ID '{' literals +=ID (',' literals +=ID)* '}'';'
;

tCompound:
	'Struct' name=ID '{'
		subtypes+=subtype (',' subtypes+=subtype)*
	'}' ';'
;

subtype returns subtype :
	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
;

channel_specifier returns channel_specifier:
	{channel_specifier}
	'Chn[' type=ID ']' | 'Chn[Int]' | 'Chn[Bool]'
;

tMultitype:
	'Mtype' name=ID
	'{'
		composingtypes+=composingtype (',' composingtypes+=composingtype)*
	'}' ';'
;

composingtype returns composingtype :
	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
;

cIntchannel returns cIntchannel:
	'Chn' 'internal'
	name=ID
	'[' bound = INT ']'
	'of' 
	(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';'
	;

cExtchannel returns cExtchannel:
	'Chn' 'external'
	name=ID
	'of' 
	(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';'
	;

vVariable returns vVariable:
	(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID)
	name=ID ';'
	;