/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.action.analysis;

import org.prgmdl.dstmverifier.transition.action.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseASimpleNotation(ASimpleNotation node);
    void caseAListNotation(AListNotation node);
    void caseASimpleStatementlist(ASimpleStatementlist node);
    void caseAReceiveStatement(AReceiveStatement node);
    void caseAConserveStatement(AConserveStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseASendStatement(ASendStatement node);
    void caseATokAssign(ATokAssign node);
    void caseASimpleExprlist(ASimpleExprlist node);
    void caseAComplexExprlist(AComplexExprlist node);
    void caseANestedlExpr(ANestedlExpr node);
    void caseABoolnotExpr(ABoolnotExpr node);
    void caseABoolopExpr(ABoolopExpr node);
    void caseACompareExpr(ACompareExpr node);
    void caseAMathppExpr(AMathppExpr node);
    void caseAMathopExpr(AMathopExpr node);
    void caseAEqivExpr(AEqivExpr node);
    void caseAAtomExpr(AAtomExpr node);
    void caseAEnumExpr(AEnumExpr node);
    void caseAPlainFirst(APlainFirst node);
    void caseAPlainSecond(APlainSecond node);
    void caseATrAtomic(ATrAtomic node);
    void caseAFaAtomic(AFaAtomic node);
    void caseAIdAtomic(AIdAtomic node);
    void caseAChuseAtomic(AChuseAtomic node);
    void caseANumAtomic(ANumAtomic node);
    void caseALenchnAtomic(ALenchnAtomic node);
    void caseANeqEqop(ANeqEqop node);
    void caseAEqEqop(AEqEqop node);
    void caseALteqCmpop(ALteqCmpop node);
    void caseALtCmpop(ALtCmpop node);
    void caseAGteqCmpop(AGteqCmpop node);
    void caseAGtCmpop(AGtCmpop node);
    void caseAPlusPlusMmop(APlusPlusMmop node);
    void caseAMinusMinusMmop(AMinusMinusMmop node);
    void caseAPlusMbop(APlusMbop node);
    void caseAMinusMbop(AMinusMbop node);
    void caseAStarMbop(AStarMbop node);
    void caseASlashMbop(ASlashMbop node);
    void caseAAndLbop(AAndLbop node);
    void caseAOrLbop(AOrLbop node);
    void caseASimpleExtvarlist(ASimpleExtvarlist node);
    void caseAComplexExtvarlist(AComplexExtvarlist node);
    void caseAVarExtvar(AVarExtvar node);
    void caseADontExtvar(ADontExtvar node);
    void caseAIdVar(AIdVar node);
    void caseAIdChname(AIdChname node);
    void caseAIdEName(AIdEName node);
    void caseAIdLiteral(AIdLiteral node);

    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTEnum(TEnum node);
    void caseTChn(TChn node);
    void caseTStruct(TStruct node);
    void caseTOf(TOf node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTFull(TFull node);
    void caseTEmpty(TEmpty node);
    void caseTSpaces(TSpaces node);
    void caseTSpace(TSpace node);
    void caseTExternal(TExternal node);
    void caseTInternal(TInternal node);
    void caseTNull(TNull node);
    void caseTIdentifier(TIdentifier node);
    void caseTNumbers(TNumbers node);
    void caseTLen(TLen node);
    void caseTLenbis(TLenbis node);
    void caseTDontcare(TDontcare node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTEmark(TEmark node);
    void caseTColon(TColon node);
    void caseTNot(TNot node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTBarBar(TBarBar node);
    void caseTBar(TBar node);
    void caseTAmp(TAmp node);
    void caseTCaret(TCaret node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTAssigntok(TAssigntok node);
    void caseTColonColon(TColonColon node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseEOF(EOF node);
}
