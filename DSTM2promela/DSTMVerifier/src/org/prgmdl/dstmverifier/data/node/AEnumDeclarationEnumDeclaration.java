/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.data.node;

import java.util.*;
import org.prgmdl.dstmverifier.data.analysis.*;

@SuppressWarnings("nls")
public final class AEnumDeclarationEnumDeclaration extends PEnumDeclaration
{
    private TEnum _enum_;
    private PEName _eName_;
    private TLBrc _lBrc_;
    private final LinkedList<PLiterals> _literals_ = new LinkedList<PLiterals>();
    private TRBrc _rBrc_;

    public AEnumDeclarationEnumDeclaration()
    {
        // Constructor
    }

    public AEnumDeclarationEnumDeclaration(
        @SuppressWarnings("hiding") TEnum _enum_,
        @SuppressWarnings("hiding") PEName _eName_,
        @SuppressWarnings("hiding") TLBrc _lBrc_,
        @SuppressWarnings("hiding") List<PLiterals> _literals_,
        @SuppressWarnings("hiding") TRBrc _rBrc_)
    {
        // Constructor
        setEnum(_enum_);

        setEName(_eName_);

        setLBrc(_lBrc_);

        setLiterals(_literals_);

        setRBrc(_rBrc_);

    }

    @Override
    public Object clone()
    {
        return new AEnumDeclarationEnumDeclaration(
            cloneNode(this._enum_),
            cloneNode(this._eName_),
            cloneNode(this._lBrc_),
            cloneList(this._literals_),
            cloneNode(this._rBrc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEnumDeclarationEnumDeclaration(this);
    }

    public TEnum getEnum()
    {
        return this._enum_;
    }

    public void setEnum(TEnum node)
    {
        if(this._enum_ != null)
        {
            this._enum_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enum_ = node;
    }

    public PEName getEName()
    {
        return this._eName_;
    }

    public void setEName(PEName node)
    {
        if(this._eName_ != null)
        {
            this._eName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eName_ = node;
    }

    public TLBrc getLBrc()
    {
        return this._lBrc_;
    }

    public void setLBrc(TLBrc node)
    {
        if(this._lBrc_ != null)
        {
            this._lBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrc_ = node;
    }

    public LinkedList<PLiterals> getLiterals()
    {
        return this._literals_;
    }

    public void setLiterals(List<PLiterals> list)
    {
        this._literals_.clear();
        this._literals_.addAll(list);
        for(PLiterals e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRBrc getRBrc()
    {
        return this._rBrc_;
    }

    public void setRBrc(TRBrc node)
    {
        if(this._rBrc_ != null)
        {
            this._rBrc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._enum_)
            + toString(this._eName_)
            + toString(this._lBrc_)
            + toString(this._literals_)
            + toString(this._rBrc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._enum_ == child)
        {
            this._enum_ = null;
            return;
        }

        if(this._eName_ == child)
        {
            this._eName_ = null;
            return;
        }

        if(this._lBrc_ == child)
        {
            this._lBrc_ = null;
            return;
        }

        if(this._literals_.remove(child))
        {
            return;
        }

        if(this._rBrc_ == child)
        {
            this._rBrc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._enum_ == oldChild)
        {
            setEnum((TEnum) newChild);
            return;
        }

        if(this._eName_ == oldChild)
        {
            setEName((PEName) newChild);
            return;
        }

        if(this._lBrc_ == oldChild)
        {
            setLBrc((TLBrc) newChild);
            return;
        }

        for(ListIterator<PLiterals> i = this._literals_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLiterals) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrc_ == oldChild)
        {
            setRBrc((TRBrc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
