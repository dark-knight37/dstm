/**
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstmdata.xDstmdata.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.unina.xdstmdata.xDstmdata.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XDstmdataFactoryImpl extends EFactoryImpl implements XDstmdataFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XDstmdataFactory init()
  {
    try
    {
      XDstmdataFactory theXDstmdataFactory = (XDstmdataFactory)EPackage.Registry.INSTANCE.getEFactory(XDstmdataPackage.eNS_URI);
      if (theXDstmdataFactory != null)
      {
        return theXDstmdataFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XDstmdataFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDstmdataFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XDstmdataPackage.TTYPES: return createtTypes();
      case XDstmdataPackage.TENUM: return createtEnum();
      case XDstmdataPackage.TCOMPOUND: return createtCompound();
      case XDstmdataPackage.SUBTYPE: return createsubtype();
      case XDstmdataPackage.CHANNEL_SPECIFIER: return createchannel_specifier();
      case XDstmdataPackage.TMULTITYPE: return createtMultitype();
      case XDstmdataPackage.COMPOSINGTYPE: return createcomposingtype();
      case XDstmdataPackage.CINTCHANNEL: return createcIntchannel();
      case XDstmdataPackage.CEXTCHANNEL: return createcExtchannel();
      case XDstmdataPackage.VVARIABLE: return createvVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tTypes createtTypes()
  {
    tTypesImpl tTypes = new tTypesImpl();
    return tTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tEnum createtEnum()
  {
    tEnumImpl tEnum = new tEnumImpl();
    return tEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tCompound createtCompound()
  {
    tCompoundImpl tCompound = new tCompoundImpl();
    return tCompound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public subtype createsubtype()
  {
    subtypeImpl subtype = new subtypeImpl();
    return subtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public channel_specifier createchannel_specifier()
  {
    channel_specifierImpl channel_specifier = new channel_specifierImpl();
    return channel_specifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tMultitype createtMultitype()
  {
    tMultitypeImpl tMultitype = new tMultitypeImpl();
    return tMultitype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public composingtype createcomposingtype()
  {
    composingtypeImpl composingtype = new composingtypeImpl();
    return composingtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cIntchannel createcIntchannel()
  {
    cIntchannelImpl cIntchannel = new cIntchannelImpl();
    return cIntchannel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cExtchannel createcExtchannel()
  {
    cExtchannelImpl cExtchannel = new cExtchannelImpl();
    return cExtchannel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public vVariable createvVariable()
  {
    vVariableImpl vVariable = new vVariableImpl();
    return vVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDstmdataPackage getXDstmdataPackage()
  {
    return (XDstmdataPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XDstmdataPackage getPackage()
  {
    return XDstmdataPackage.eINSTANCE;
  }

} //XDstmdataFactoryImpl
