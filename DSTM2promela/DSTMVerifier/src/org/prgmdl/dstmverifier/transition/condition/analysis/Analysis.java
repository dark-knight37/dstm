/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.analysis;

import org.prgmdl.dstmverifier.transition.condition.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseACondCondition(ACondCondition node);
    void caseANestedTerm(ANestedTerm node);
    void caseAUnaryTerm(AUnaryTerm node);
    void caseASimpleTerm(ASimpleTerm node);
    void caseABinaryTerm(ABinaryTerm node);
    void caseAAndopBinop(AAndopBinop node);
    void caseAOropBinop(AOropBinop node);
    void caseALeftFirst(ALeftFirst node);
    void caseAMetaFirst(AMetaFirst node);
    void caseARightSecond(ARightSecond node);
    void caseAMetaSecond(AMetaSecond node);
    void caseATrueAtomic(ATrueAtomic node);
    void caseAFalseAtomic(AFalseAtomic node);
    void caseAEquiopAtomic(AEquiopAtomic node);
    void caseACompopAtomic(ACompopAtomic node);
    void caseASizecondAtomic(ASizecondAtomic node);
    void caseATrmlistAtomic(ATrmlistAtomic node);
    void caseAFullcondSize(AFullcondSize node);
    void caseAEmptycondSize(AEmptycondSize node);
    void caseANeqEqop(ANeqEqop node);
    void caseAEqEqop(AEqEqop node);
    void caseALteqCmpop(ALteqCmpop node);
    void caseALtCmpop(ALtCmpop node);
    void caseAGteqCmpop(AGteqCmpop node);
    void caseAGtCmpop(AGtCmpop node);
    void caseASimpleLval(ASimpleLval node);
    void caseAComposedLval(AComposedLval node);
    void caseASimpleRval(ASimpleRval node);
    void caseAComposedRval(AComposedRval node);
    void caseATrueExpr(ATrueExpr node);
    void caseAFalseExpr(AFalseExpr node);
    void caseAIdExpr(AIdExpr node);
    void caseAChnExpr(AChnExpr node);
    void caseANumExpr(ANumExpr node);
    void caseADcareExpr(ADcareExpr node);
    void caseAEnumExpr(AEnumExpr node);
    void caseALenChnExpr(ALenChnExpr node);
    void caseAPlusMathop(APlusMathop node);
    void caseAMinusMathop(AMinusMathop node);
    void caseAStarMathop(AStarMathop node);
    void caseASlashMathop(ASlashMathop node);
    void caseASimpleTrmlist(ASimpleTrmlist node);
    void caseAComplexTrmlist(AComplexTrmlist node);
    void caseAChnIdChnName(AChnIdChnName node);
    void caseAIntBasic(AIntBasic node);
    void caseABoolBasic(ABoolBasic node);
    void caseAChnBasic(AChnBasic node);
    void caseAENameBasic(AENameBasic node);
    void caseAVarIdVarName(AVarIdVarName node);
    void caseAChIdChname(AChIdChname node);
    void caseALIdLiteral(ALIdLiteral node);
    void caseAEIdEName(AEIdEName node);

    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTEnum(TEnum node);
    void caseTChn(TChn node);
    void caseTStruct(TStruct node);
    void caseTOf(TOf node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTFull(TFull node);
    void caseTEmpty(TEmpty node);
    void caseTSpaces(TSpaces node);
    void caseTSpace(TSpace node);
    void caseTExternal(TExternal node);
    void caseTInternal(TInternal node);
    void caseTNull(TNull node);
    void caseTLen(TLen node);
    void caseTIdentifier(TIdentifier node);
    void caseTNumbers(TNumbers node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTEmark(TEmark node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTColonColon(TColonColon node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTBarBar(TBarBar node);
    void caseTBar(TBar node);
    void caseTAmp(TAmp node);
    void caseTCaret(TCaret node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNot(TNot node);
    void caseTDcsymb(TDcsymb node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseTSharp(TSharp node);
    void caseTOpaqueexpr(TOpaqueexpr node);
    void caseEOF(EOF node);
}
