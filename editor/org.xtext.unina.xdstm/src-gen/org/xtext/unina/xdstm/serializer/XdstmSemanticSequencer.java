/*
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.unina.xdstm.services.XdstmGrammarAccess;
import org.xtext.unina.xdstm.xDstm.Box;
import org.xtext.unina.xdstm.xDstm.DSTM;
import org.xtext.unina.xdstm.xDstm.EnteringNode;
import org.xtext.unina.xdstm.xDstm.ExitingNode;
import org.xtext.unina.xdstm.xDstm.Fork;
import org.xtext.unina.xdstm.xDstm.InitialNode;
import org.xtext.unina.xdstm.xDstm.Join;
import org.xtext.unina.xdstm.xDstm.Machine;
import org.xtext.unina.xdstm.xDstm.Model;
import org.xtext.unina.xdstm.xDstm.Node;
import org.xtext.unina.xdstm.xDstm.Transition;
import org.xtext.unina.xdstm.xDstm.XDstmPackage;
import org.xtext.unina.xdstm.xDstm.include;
import org.xtext.unina.xdstm.xDstm.requirements;

@SuppressWarnings("all")
public class XdstmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XdstmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XDstmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XDstmPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case XDstmPackage.DSTM:
				sequence_DSTM(context, (DSTM) semanticObject); 
				return; 
			case XDstmPackage.ENTERING_NODE:
				sequence_EnteringNode(context, (EnteringNode) semanticObject); 
				return; 
			case XDstmPackage.EXITING_NODE:
				sequence_ExitingNode(context, (ExitingNode) semanticObject); 
				return; 
			case XDstmPackage.FORK:
				sequence_Fork(context, (Fork) semanticObject); 
				return; 
			case XDstmPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case XDstmPackage.JOIN:
				sequence_Join(context, (Join) semanticObject); 
				return; 
			case XDstmPackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case XDstmPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case XDstmPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case XDstmPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case XDstmPackage.INCLUDE:
				sequence_include(context, (include) semanticObject); 
				return; 
			case XDstmPackage.REQUIREMENTS:
				sequence_Requirements(context, (requirements) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Vertex returns Box
	 *     Box returns Box
	 *     Destination returns Box
	 *     Source returns Box
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements instantiation+=[Machine|ID] instantiation+=[Machine|ID]*)
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSTM returns DSTM
	 *
	 * Constraint:
	 *     (name=ID machines+=[Machine|ID] machines+=[Machine|ID]* main=[Machine|ID])
	 */
	protected void sequence_DSTM(ISerializationContext context, DSTM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns EnteringNode
	 *     EnteringNodeAbs returns EnteringNode
	 *     EnteringNode returns EnteringNode
	 *     Source returns EnteringNode
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_EnteringNode(ISerializationContext context, EnteringNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnteringNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEnteringNodeAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns ExitingNode
	 *     ExitingNode returns ExitingNode
	 *     Destination returns ExitingNode
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_ExitingNode(ISerializationContext context, ExitingNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.EXITING_NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.EXITING_NODE__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.EXITING_NODE__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.EXITING_NODE__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExitingNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExitingNodeAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns Fork
	 *     Fork returns Fork
	 *     Destination returns Fork
	 *     Source returns Fork
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_Fork(ISerializationContext context, Fork semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.FORK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.FORK__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.FORK__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.FORK__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getForkAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns InitialNode
	 *     EnteringNodeAbs returns InitialNode
	 *     InitialNode returns InitialNode
	 *     Source returns InitialNode
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.ENTERING_NODE_ABS__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialNodeAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns Join
	 *     Join returns Join
	 *     Destination returns Join
	 *     Source returns Join
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_Join(ISerializationContext context, Join semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.JOIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.JOIN__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.JOIN__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.JOIN__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJoinAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJoinAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     (name=ID vertexes+=Vertex vertexes+=Vertex* transitions+=Transition transitions+=Transition*)
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (include=include machines+=Machine machines+=Machine* dstm+=DSTM)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Vertex returns Node
	 *     Node returns Node
	 *     Destination returns Node
	 *     Source returns Node
	 *
	 * Constraint:
	 *     (name=ID requirements=Requirements)
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.NODE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.NODE__NAME));
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.NODE__REQUIREMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.NODE__REQUIREMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNodeAccess().getRequirementsRequirementsParserRuleCall_2_0(), semanticObject.getRequirements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Requirements returns requirements
	 *
	 * Constraint:
	 *     (requirements+=STRING requirements+=STRING*)?
	 */
	protected void sequence_Requirements(ISerializationContext context, requirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         requirements=Requirements 
	 *         source=[Source|ID] 
	 *         exiting_node=[ExitingNode|EString]? 
	 *         destination=[Destination|ID] 
	 *         entering_node=[EnteringNodeAbs|EString]? 
	 *         is_preemptive?='isPreemptive'? 
	 *         trigger=STRING? 
	 *         condition=STRING? 
	 *         (actions+=STRING actions+=STRING*)? 
	 *         (par_instantiation+=STRING par_instantiation+=STRING*)?
	 *     )
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     include returns include
	 *
	 * Constraint:
	 *     importURI=STRING
	 */
	protected void sequence_include(ISerializationContext context, include semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmPackage.Literals.INCLUDE__IMPORT_URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmPackage.Literals.INCLUDE__IMPORT_URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_1_0(), semanticObject.getImportURI());
		feeder.finish();
	}
	
	
}
