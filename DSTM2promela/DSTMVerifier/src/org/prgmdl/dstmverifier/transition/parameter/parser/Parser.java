/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.parameter.parser;

import org.prgmdl.dstmverifier.transition.parameter.lexer.*;
import org.prgmdl.dstmverifier.transition.parameter.node.*;
import org.prgmdl.dstmverifier.transition.parameter.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAlistnotation1Notation */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAlistnotation2Notation */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAssignStatement */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce ANullStatement */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce ANestedlExpr */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ABoolnotExpr */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce ABoolopExpr */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce ACompareExpr */
		    {
			ArrayList list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce AMathppExpr */
		    {
			ArrayList list = new8();
			push(goTo(2), list, false);
		    }
		    break;
                    case 9: /* reduce AMathopExpr */
		    {
			ArrayList list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce AEqivExpr */
		    {
			ArrayList list = new10();
			push(goTo(2), list, false);
		    }
		    break;
                    case 11: /* reduce AAtomExpr */
		    {
			ArrayList list = new11();
			push(goTo(2), list, false);
		    }
		    break;
                    case 12: /* reduce AEnumExpr */
		    {
			ArrayList list = new12();
			push(goTo(2), list, false);
		    }
		    break;
                    case 13: /* reduce APlainFirst */
		    {
			ArrayList list = new13();
			push(goTo(3), list, false);
		    }
		    break;
                    case 14: /* reduce APlainSecond */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce ATrAtomic */
		    {
			ArrayList list = new15();
			push(goTo(5), list, false);
		    }
		    break;
                    case 16: /* reduce AFaAtomic */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AIdAtomic */
		    {
			ArrayList list = new17();
			push(goTo(5), list, false);
		    }
		    break;
                    case 18: /* reduce ANumAtomic */
		    {
			ArrayList list = new18();
			push(goTo(5), list, false);
		    }
		    break;
                    case 19: /* reduce ALenchnAtomic */
		    {
			ArrayList list = new19();
			push(goTo(5), list, false);
		    }
		    break;
                    case 20: /* reduce ANeqEqop */
		    {
			ArrayList list = new20();
			push(goTo(6), list, false);
		    }
		    break;
                    case 21: /* reduce AEqEqop */
		    {
			ArrayList list = new21();
			push(goTo(6), list, false);
		    }
		    break;
                    case 22: /* reduce ALteqCmpop */
		    {
			ArrayList list = new22();
			push(goTo(7), list, false);
		    }
		    break;
                    case 23: /* reduce ALtCmpop */
		    {
			ArrayList list = new23();
			push(goTo(7), list, false);
		    }
		    break;
                    case 24: /* reduce AGteqCmpop */
		    {
			ArrayList list = new24();
			push(goTo(7), list, false);
		    }
		    break;
                    case 25: /* reduce AGtCmpop */
		    {
			ArrayList list = new25();
			push(goTo(7), list, false);
		    }
		    break;
                    case 26: /* reduce APlusPlusMmop */
		    {
			ArrayList list = new26();
			push(goTo(8), list, false);
		    }
		    break;
                    case 27: /* reduce AMinusMinusMmop */
		    {
			ArrayList list = new27();
			push(goTo(8), list, false);
		    }
		    break;
                    case 28: /* reduce APlusMbop */
		    {
			ArrayList list = new28();
			push(goTo(9), list, false);
		    }
		    break;
                    case 29: /* reduce AMinusMbop */
		    {
			ArrayList list = new29();
			push(goTo(9), list, false);
		    }
		    break;
                    case 30: /* reduce AStarMbop */
		    {
			ArrayList list = new30();
			push(goTo(9), list, false);
		    }
		    break;
                    case 31: /* reduce ASlashMbop */
		    {
			ArrayList list = new31();
			push(goTo(9), list, false);
		    }
		    break;
                    case 32: /* reduce AAndLbop */
		    {
			ArrayList list = new32();
			push(goTo(10), list, false);
		    }
		    break;
                    case 33: /* reduce AOrLbop */
		    {
			ArrayList list = new33();
			push(goTo(10), list, false);
		    }
		    break;
                    case 34: /* reduce AIdPar */
		    {
			ArrayList list = new34();
			push(goTo(11), list, false);
		    }
		    break;
                    case 35: /* reduce AIdChname */
		    {
			ArrayList list = new35();
			push(goTo(12), list, false);
		    }
		    break;
                    case 36: /* reduce AIdEName */
		    {
			ArrayList list = new36();
			push(goTo(13), list, false);
		    }
		    break;
                    case 37: /* reduce AIdLiteral */
		    {
			ArrayList list = new37();
			push(goTo(14), list, false);
		    }
		    break;
                    case 38: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new38();
			push(goTo(15), list, true);
		    }
		    break;
                    case 39: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new39();
			push(goTo(15), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PNotation node1 = (PNotation) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAlistnotation1Notation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PNotation pnotationNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pnotationNode1 = new AListNotation(listNode2);
        }
	nodeList.add(pnotationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAlistnotation2Notation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotation pnotationNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pnotationNode1 = new AListNotation(listNode3);
        }
	nodeList.add(pnotationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPar pparNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        pparNode2 = (PPar)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(pparNode2, tassignNode3, pexprNode4, tsemiNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ANullStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TDontcare tdontcareNode2;
        TSemi tsemiNode3;
        tdontcareNode2 = (TDontcare)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstatementNode1 = new ANullStatement(tdontcareNode2, tsemiNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ANestedlExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexprNode1 = new ANestedlExpr(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ABoolnotExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNot tnotNode2;
        PExpr pexprNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ABoolnotExpr(tnotNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ABoolopExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PLbop plbopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        plbopNode4 = (PLbop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexprNode1 = new ABoolopExpr(tlparNode2, pfirstNode3, plbopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ACompareExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PCmpop pcmpopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        pcmpopNode4 = (PCmpop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexprNode1 = new ACompareExpr(tlparNode2, pfirstNode3, pcmpopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AMathppExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        PMmop pmmopNode4;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pmmopNode4 = (PMmop)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexprNode1 = new AMathppExpr(tlparNode2, pexprNode3, pmmopNode4, trparNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AMathopExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PMbop pmbopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        pmbopNode4 = (PMbop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexprNode1 = new AMathopExpr(tlparNode2, pfirstNode3, pmbopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AEqivExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PEqop peqopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        peqopNode4 = (PEqop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        pexprNode1 = new AEqivExpr(tlparNode2, pfirstNode3, peqopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAtomExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PAtomic patomicNode2;
        patomicNode2 = (PAtomic)nodeArrayList1.get(0);

        pexprNode1 = new AAtomExpr(patomicNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AEnumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PEName penameNode2;
        TColonColon tcoloncolonNode3;
        PLiteral pliteralNode4;
        penameNode2 = (PEName)nodeArrayList1.get(0);
        tcoloncolonNode3 = (TColonColon)nodeArrayList2.get(0);
        pliteralNode4 = (PLiteral)nodeArrayList3.get(0);

        pexprNode1 = new AEnumExpr(penameNode2, tcoloncolonNode3, pliteralNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce APlainFirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFirst pfirstNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pfirstNode1 = new APlainFirst(pexprNode2);
        }
	nodeList.add(pfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce APlainSecond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSecond psecondNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        psecondNode1 = new APlainSecond(pexprNode2);
        }
	nodeList.add(psecondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ATrAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        patomicNode1 = new ATrAtomic(ttrueNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AFaAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        patomicNode1 = new AFaAtomic(tfalseNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AIdAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        patomicNode1 = new AIdAtomic(tidentifierNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ANumAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TNumbers tnumbersNode2;
        tnumbersNode2 = (TNumbers)nodeArrayList1.get(0);

        patomicNode1 = new ANumAtomic(tnumbersNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ALenchnAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TLenbis tlenbisNode2;
        PChname pchnameNode3;
        TRPar trparNode4;
        tlenbisNode2 = (TLenbis)nodeArrayList1.get(0);
        pchnameNode3 = (PChname)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        patomicNode1 = new ALenchnAtomic(tlenbisNode2, pchnameNode3, trparNode4);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ANeqEqop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqop peqopNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        peqopNode1 = new ANeqEqop(tneqNode2);
        }
	nodeList.add(peqopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AEqEqop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqop peqopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        peqopNode1 = new AEqEqop(teqNode2);
        }
	nodeList.add(peqopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ALteqCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        pcmpopNode1 = new ALteqCmpop(tlteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ALtCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcmpopNode1 = new ALtCmpop(tltNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AGteqCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        pcmpopNode1 = new AGteqCmpop(tgteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AGtCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcmpopNode1 = new AGtCmpop(tgtNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce APlusPlusMmop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMmop pmmopNode1;
        {
            // Block
        TPlusPlus tplusplusNode2;
        tplusplusNode2 = (TPlusPlus)nodeArrayList1.get(0);

        pmmopNode1 = new APlusPlusMmop(tplusplusNode2);
        }
	nodeList.add(pmmopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AMinusMinusMmop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMmop pmmopNode1;
        {
            // Block
        TMinusMinus tminusminusNode2;
        tminusminusNode2 = (TMinusMinus)nodeArrayList1.get(0);

        pmmopNode1 = new AMinusMinusMmop(tminusminusNode2);
        }
	nodeList.add(pmmopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce APlusMbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMbop pmbopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pmbopNode1 = new APlusMbop(tplusNode2);
        }
	nodeList.add(pmbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AMinusMbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMbop pmbopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pmbopNode1 = new AMinusMbop(tminusNode2);
        }
	nodeList.add(pmbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AStarMbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMbop pmbopNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pmbopNode1 = new AStarMbop(tstarNode2);
        }
	nodeList.add(pmbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ASlashMbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMbop pmbopNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        pmbopNode1 = new ASlashMbop(tslashNode2);
        }
	nodeList.add(pmbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAndLbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLbop plbopNode1;
        {
            // Block
        TAmpAmp tampampNode2;
        tampampNode2 = (TAmpAmp)nodeArrayList1.get(0);

        plbopNode1 = new AAndLbop(tampampNode2);
        }
	nodeList.add(plbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AOrLbop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLbop plbopNode1;
        {
            // Block
        TBarBar tbarbarNode2;
        tbarbarNode2 = (TBarBar)nodeArrayList1.get(0);

        plbopNode1 = new AOrLbop(tbarbarNode2);
        }
	nodeList.add(plbopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIdPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPar pparNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pparNode1 = new AIdPar(tidentifierNode2);
        }
	nodeList.add(pparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AIdChname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChname pchnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pchnameNode1 = new AIdChname(tidentifierNode2);
        }
	nodeList.add(pchnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIdEName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEName penameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        penameNode1 = new AIdEName(tidentifierNode2);
        }
	nodeList.add(penameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AIdLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pliteralNode1 = new AIdLiteral(tidentifierNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {13, SHIFT, 1}, {17, SHIFT, 2}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 2}, {18, SHIFT, 7}, },
			{{-1, ERROR, 3}, {49, ACCEPT, -1}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 5}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 1}, {13, SHIFT, 1}, {17, SHIFT, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, {32, REDUCE, 36}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 14}, {13, SHIFT, 20}, },
			{{-1, ERROR, 15}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, ERROR, 16}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, ERROR, 17}, {18, SHIFT, 25}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 19}, {32, SHIFT, 26}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 21}, {44, SHIFT, 27}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 13}, {41, SHIFT, 28}, {42, SHIFT, 29}, {44, SHIFT, 30}, },
			{{-1, ERROR, 24}, {24, SHIFT, 32}, {25, SHIFT, 33}, {29, SHIFT, 34}, {30, SHIFT, 35}, {33, SHIFT, 36}, {34, SHIFT, 37}, {35, SHIFT, 38}, {36, SHIFT, 39}, {37, SHIFT, 40}, {38, SHIFT, 41}, {39, SHIFT, 42}, {40, SHIFT, 43}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 26}, {13, SHIFT, 48}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 31}, {44, SHIFT, 50}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 44}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, ERROR, 45}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, ERROR, 46}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, ERROR, 47}, {6, SHIFT, 10}, {7, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {16, SHIFT, 14}, {23, SHIFT, 15}, {43, SHIFT, 16}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 52}, {44, SHIFT, 56}, },
			{{-1, ERROR, 53}, {44, SHIFT, 57}, },
			{{-1, ERROR, 54}, {44, SHIFT, 58}, },
			{{-1, ERROR, 55}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 6}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {6, 9}, },
			{{-1, 51}, {8, 17}, {15, 22}, {16, 23}, },
			{{-1, 24}, },
			{{-1, 52}, {45, 53}, {46, 54}, {47, 55}, },
			{{-1, 18}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 31}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 5}, },
			{{-1, 21}, },
			{{-1, 19}, },
			{{-1, 49}, },
			{{-1, 6}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: identifier, '_', EOF",
			"expecting: '='",
			"expecting: ';'",
			"expecting: EOF",
			"expecting: 'true', 'false', identifier, numbers, 'len(', '~', '('",
			"expecting: ';', '&&', '||', '+', '-', '<', '>', '==', '!=', '<=', '>=', '*', '/', '++', '--', ')'",
			"expecting: ';', '&&', '||', '+', '-', '::', '<', '>', '==', '!=', '<=', '>=', '*', '/', '++', '--', ')'",
			"expecting: identifier",
			"expecting: '::'",
			"expecting: ')'",
			"expecting: '&&', '||', '+', '-', '<', '>', '==', '!=', '<=', '>=', '*', '/', '++', '--', ')'",
			"expecting: '&&', '||', '+', '-', '<', '>', '==', '!=', '<=', '>=', '*', '/'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 1, 0, 0, 4, 0, 5, 5, 6, 5, 7, 4, 4, 2, 5, 8, 9, 9, 5, 10, 11, 0, 7, 5, 9, 9, 5, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 9, 9, 9, 9, 9, 5, 5, 5, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
