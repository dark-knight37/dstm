/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.trigger.analysis;

import org.prgmdl.dstmverifier.transition.trigger.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAUniqueTrigger(AUniqueTrigger node);
    void caseANestedTerm(ANestedTerm node);
    void caseAUnaryTerm(AUnaryTerm node);
    void caseASimpleTerm(ASimpleTerm node);
    void caseABinaryTerm(ABinaryTerm node);
    void caseAAndopBinop(AAndopBinop node);
    void caseAOropBinop(AOropBinop node);
    void caseALeftFirst(ALeftFirst node);
    void caseARightSecond(ARightSecond node);
    void caseAMessageAtomic(AMessageAtomic node);
    void caseAMessagetypeAtomic(AMessagetypeAtomic node);
    void caseABasicSimpletype(ABasicSimpletype node);
    void caseACompoundSimpletype(ACompoundSimpletype node);
    void caseAIdCompoundName(AIdCompoundName node);
    void caseAIntBasic(AIntBasic node);
    void caseABoolBasic(ABoolBasic node);
    void caseAEnameBasic(AEnameBasic node);
    void caseAChantBasic(AChantBasic node);
    void caseAChnBasic(AChnBasic node);
    void caseAEnumEName(AEnumEName node);
    void caseASimpleVar(ASimpleVar node);
    void caseASimpleDefined(ASimpleDefined node);

    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTEnum(TEnum node);
    void caseTChn(TChn node);
    void caseTStruct(TStruct node);
    void caseTMtype(TMtype node);
    void caseTOf(TOf node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTFull(TFull node);
    void caseTEmpty(TEmpty node);
    void caseTSpaces(TSpaces node);
    void caseTSpace(TSpace node);
    void caseTExternal(TExternal node);
    void caseTInternal(TInternal node);
    void caseTIdentifier(TIdentifier node);
    void caseTNumbers(TNumbers node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTColon(TColon node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEq(TEq node);
    void caseTNot(TNot node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTBarBar(TBarBar node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseEOF(EOF node);
}
