/*
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XdstmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludeIncludeParserRuleCall_0_0 = (RuleCall)cIncludeAssignment_0.eContents().get(0);
		private final Assignment cMachinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMachinesMachineParserRuleCall_1_0 = (RuleCall)cMachinesAssignment_1.eContents().get(0);
		private final Assignment cMachinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachinesMachineParserRuleCall_2_0 = (RuleCall)cMachinesAssignment_2.eContents().get(0);
		private final Assignment cDstmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDstmDSTMParserRuleCall_3_0 = (RuleCall)cDstmAssignment_3.eContents().get(0);
		
		//Model:
		//	include=include
		//	machines+=Machine machines+=Machine*
		//	dstm+=DSTM;
		@Override public ParserRule getRule() { return rule; }
		
		//include=include machines+=Machine machines+=Machine* dstm+=DSTM
		public Group getGroup() { return cGroup; }
		
		//include=include
		public Assignment getIncludeAssignment_0() { return cIncludeAssignment_0; }
		
		//include
		public RuleCall getIncludeIncludeParserRuleCall_0_0() { return cIncludeIncludeParserRuleCall_0_0; }
		
		//machines+=Machine
		public Assignment getMachinesAssignment_1() { return cMachinesAssignment_1; }
		
		//Machine
		public RuleCall getMachinesMachineParserRuleCall_1_0() { return cMachinesMachineParserRuleCall_1_0; }
		
		//machines+=Machine*
		public Assignment getMachinesAssignment_2() { return cMachinesAssignment_2; }
		
		//Machine
		public RuleCall getMachinesMachineParserRuleCall_2_0() { return cMachinesMachineParserRuleCall_2_0; }
		
		//dstm+=DSTM
		public Assignment getDstmAssignment_3() { return cDstmAssignment_3; }
		
		//DSTM
		public RuleCall getDstmDSTMParserRuleCall_3_0() { return cDstmDSTMParserRuleCall_3_0; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//include:
		//	'import' importURI=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DSTMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.DSTM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDSTMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMachinesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMachinesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cMachinesMachineCrossReference_5_0 = (CrossReference)cMachinesAssignment_5.eContents().get(0);
		private final RuleCall cMachinesMachineIDTerminalRuleCall_5_0_1 = (RuleCall)cMachinesMachineCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMachinesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cMachinesMachineCrossReference_6_1_0 = (CrossReference)cMachinesAssignment_6_1.eContents().get(0);
		private final RuleCall cMachinesMachineIDTerminalRuleCall_6_1_0_1 = (RuleCall)cMachinesMachineCrossReference_6_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cMainKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMainAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cMainMachineCrossReference_9_0 = (CrossReference)cMainAssignment_9.eContents().get(0);
		private final RuleCall cMainMachineIDTerminalRuleCall_9_0_1 = (RuleCall)cMainMachineCrossReference_9_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//DSTM:
		//	'DSTM' name=ID '{'
		//	'machines' '=' machines+=[Machine] ("," machines+=[Machine])* ';'
		//	'main' main=[Machine] ';'
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'DSTM' name=ID '{' 'machines' '=' machines+=[Machine] ("," machines+=[Machine])* ';' 'main' main=[Machine] ';' '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'DSTM'
		public Keyword getDSTMKeyword_0() { return cDSTMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'machines'
		public Keyword getMachinesKeyword_3() { return cMachinesKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//machines+=[Machine]
		public Assignment getMachinesAssignment_5() { return cMachinesAssignment_5; }
		
		//[Machine]
		public CrossReference getMachinesMachineCrossReference_5_0() { return cMachinesMachineCrossReference_5_0; }
		
		//ID
		public RuleCall getMachinesMachineIDTerminalRuleCall_5_0_1() { return cMachinesMachineIDTerminalRuleCall_5_0_1; }
		
		//("," machines+=[Machine])*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//machines+=[Machine]
		public Assignment getMachinesAssignment_6_1() { return cMachinesAssignment_6_1; }
		
		//[Machine]
		public CrossReference getMachinesMachineCrossReference_6_1_0() { return cMachinesMachineCrossReference_6_1_0; }
		
		//ID
		public RuleCall getMachinesMachineIDTerminalRuleCall_6_1_0_1() { return cMachinesMachineIDTerminalRuleCall_6_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'main'
		public Keyword getMainKeyword_8() { return cMainKeyword_8; }
		
		//main=[Machine]
		public Assignment getMainAssignment_9() { return cMainAssignment_9; }
		
		//[Machine]
		public CrossReference getMainMachineCrossReference_9_0() { return cMainMachineCrossReference_9_0; }
		
		//ID
		public RuleCall getMainMachineIDTerminalRuleCall_9_0_1() { return cMainMachineIDTerminalRuleCall_9_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//';'
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVertexesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVertexesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVertexesVertexParserRuleCall_5_0 = (RuleCall)cVertexesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVertexesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVertexesVertexParserRuleCall_6_1_0 = (RuleCall)cVertexesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTransitionsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTransitionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTransitionsTransitionParserRuleCall_10_0 = (RuleCall)cTransitionsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTransitionsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_11_1_0 = (RuleCall)cTransitionsAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Machine:
		//	'Machine'
		//	name=ID //'(' parameters+=Parameter ( ',' parameters+=Parameter) ')'
		//	'{'
		//	'vertexes' '{'
		//	vertexes+=Vertex (',' vertexes+=Vertex)*
		//	'}'
		//	'transitions' '{'
		//	transitions+=Transition (',' transitions+=Transition)*
		//	'}'
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Machine' name=ID //'(' parameters+=Parameter ( ',' parameters+=Parameter) ')'
		//'{' 'vertexes' '{' vertexes+=Vertex (',' vertexes+=Vertex)* '}' 'transitions' '{' transitions+=Transition (','
		//transitions+=Transition)* '}' '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////'(' parameters+=Parameter ( ',' parameters+=Parameter) ')'
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'vertexes'
		public Keyword getVertexesKeyword_3() { return cVertexesKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//vertexes+=Vertex
		public Assignment getVertexesAssignment_5() { return cVertexesAssignment_5; }
		
		//Vertex
		public RuleCall getVertexesVertexParserRuleCall_5_0() { return cVertexesVertexParserRuleCall_5_0; }
		
		//(',' vertexes+=Vertex)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//vertexes+=Vertex
		public Assignment getVertexesAssignment_6_1() { return cVertexesAssignment_6_1; }
		
		//Vertex
		public RuleCall getVertexesVertexParserRuleCall_6_1_0() { return cVertexesVertexParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_8() { return cTransitionsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_10() { return cTransitionsAssignment_10; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_10_0() { return cTransitionsTransitionParserRuleCall_10_0; }
		
		//(',' transitions+=Transition)*
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_11_1() { return cTransitionsAssignment_11_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_11_1_0() { return cTransitionsTransitionParserRuleCall_11_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
	}
	public class VertexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Vertex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnteringNodeAbsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExitingNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJoinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Vertex:
		//	Node | Box | EnteringNodeAbs | ExitingNode | Fork | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Box | EnteringNodeAbs | ExitingNode | Fork | Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Box
		public RuleCall getBoxParserRuleCall_1() { return cBoxParserRuleCall_1; }
		
		//EnteringNodeAbs
		public RuleCall getEnteringNodeAbsParserRuleCall_2() { return cEnteringNodeAbsParserRuleCall_2; }
		
		//ExitingNode
		public RuleCall getExitingNodeParserRuleCall_3() { return cExitingNodeParserRuleCall_3; }
		
		//Fork
		public RuleCall getForkParserRuleCall_4() { return cForkParserRuleCall_4; }
		
		//Join
		public RuleCall getJoinParserRuleCall_5() { return cJoinParserRuleCall_5; }
	}
	public class EnteringNodeAbsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.EnteringNodeAbs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnteringNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnteringNodeAbs:
		//	EnteringNode | InitialNode;
		@Override public ParserRule getRule() { return rule; }
		
		//EnteringNode | InitialNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnteringNode
		public RuleCall getEnteringNodeParserRuleCall_0() { return cEnteringNodeParserRuleCall_0; }
		
		//InitialNode
		public RuleCall getInitialNodeParserRuleCall_1() { return cInitialNodeParserRuleCall_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//Node:
		//	'Node' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'Node' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'Node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInstantiationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInstantiationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cInstantiationMachineCrossReference_6_0 = (CrossReference)cInstantiationAssignment_6.eContents().get(0);
		private final RuleCall cInstantiationMachineIDTerminalRuleCall_6_0_1 = (RuleCall)cInstantiationMachineCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInstantiationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cInstantiationMachineCrossReference_7_1_0 = (CrossReference)cInstantiationAssignment_7_1.eContents().get(0);
		private final RuleCall cInstantiationMachineIDTerminalRuleCall_7_1_0_1 = (RuleCall)cInstantiationMachineCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Box:
		//	'Box' name=ID
		//	requirements=Requirements
		//	'{'
		//	'instantiation' '(' instantiation+=[Machine] ("," instantiation+=[Machine])* ')'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Box' name=ID requirements=Requirements '{' 'instantiation' '(' instantiation+=[Machine] ("," instantiation+=[Machine])*
		//')' '}'
		public Group getGroup() { return cGroup; }
		
		//'Box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'instantiation'
		public Keyword getInstantiationKeyword_4() { return cInstantiationKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//instantiation+=[Machine]
		public Assignment getInstantiationAssignment_6() { return cInstantiationAssignment_6; }
		
		//[Machine]
		public CrossReference getInstantiationMachineCrossReference_6_0() { return cInstantiationMachineCrossReference_6_0; }
		
		//ID
		public RuleCall getInstantiationMachineIDTerminalRuleCall_6_0_1() { return cInstantiationMachineIDTerminalRuleCall_6_0_1; }
		
		//("," instantiation+=[Machine])*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//instantiation+=[Machine]
		public Assignment getInstantiationAssignment_7_1() { return cInstantiationAssignment_7_1; }
		
		//[Machine]
		public CrossReference getInstantiationMachineCrossReference_7_1_0() { return cInstantiationMachineCrossReference_7_1_0; }
		
		//ID
		public RuleCall getInstantiationMachineIDTerminalRuleCall_7_1_0_1() { return cInstantiationMachineIDTerminalRuleCall_7_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EnteringNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.EnteringNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnteringNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//EnteringNode:
		//	'EnteringNode' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'EnteringNode' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'EnteringNode'
		public Keyword getEnteringNodeKeyword_0() { return cEnteringNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class InitialNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.InitialNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//InitialNode:
		//	'InitialNode' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'InitialNode' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'InitialNode'
		public Keyword getInitialNodeKeyword_0() { return cInitialNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class ExitingNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.ExitingNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitingNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//ExitingNode:
		//	'ExitingNode' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExitingNode' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'ExitingNode'
		public Keyword getExitingNodeKeyword_0() { return cExitingNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//Fork:
		//	'Fork' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fork' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'Fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		
		//Join:
		//	'Join' name=ID
		//	requirements=Requirements;
		@Override public ParserRule getRule() { return rule; }
		
		//'Join' name=ID requirements=Requirements
		public Group getGroup() { return cGroup; }
		
		//'Join'
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
	}
	public class DestinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Destination");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitingNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Destination:
		//	Node | Box | ExitingNode | Fork | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Box | ExitingNode | Fork | Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Box
		public RuleCall getBoxParserRuleCall_1() { return cBoxParserRuleCall_1; }
		
		//ExitingNode
		public RuleCall getExitingNodeParserRuleCall_2() { return cExitingNodeParserRuleCall_2; }
		
		//Fork
		public RuleCall getForkParserRuleCall_3() { return cForkParserRuleCall_3; }
		
		//Join
		public RuleCall getJoinParserRuleCall_4() { return cJoinParserRuleCall_4; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Source");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnteringNodeAbsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Source:
		//	Node | Box | EnteringNodeAbs | Fork | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Box | EnteringNodeAbs | Fork | Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Box
		public RuleCall getBoxParserRuleCall_1() { return cBoxParserRuleCall_1; }
		
		//EnteringNodeAbs
		public RuleCall getEnteringNodeAbsParserRuleCall_2() { return cEnteringNodeAbsParserRuleCall_2; }
		
		//Fork
		public RuleCall getForkParserRuleCall_3() { return cForkParserRuleCall_3; }
		
		//Join
		public RuleCall getJoinParserRuleCall_4() { return cJoinParserRuleCall_4; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequirementsRequirementsParserRuleCall_2_0 = (RuleCall)cRequirementsAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSourceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceSourceCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourceSourceIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceSourceCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cExiting_nodeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExiting_nodeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cExiting_nodeExitingNodeCrossReference_6_2_0 = (CrossReference)cExiting_nodeAssignment_6_2.eContents().get(0);
		private final RuleCall cExiting_nodeExitingNodeEStringParserRuleCall_6_2_0_1 = (RuleCall)cExiting_nodeExitingNodeCrossReference_6_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDestinationKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDestinationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cDestinationDestinationCrossReference_9_0 = (CrossReference)cDestinationAssignment_9.eContents().get(0);
		private final RuleCall cDestinationDestinationIDTerminalRuleCall_9_0_1 = (RuleCall)cDestinationDestinationCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cEntering_nodeKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cEntering_nodeAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final CrossReference cEntering_nodeEnteringNodeAbsCrossReference_10_2_0 = (CrossReference)cEntering_nodeAssignment_10_2.eContents().get(0);
		private final RuleCall cEntering_nodeEnteringNodeAbsEStringParserRuleCall_10_2_0_1 = (RuleCall)cEntering_nodeEnteringNodeAbsCrossReference_10_2_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cIs_preemptiveAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final Keyword cIs_preemptiveIsPreemptiveKeyword_11_1_0 = (Keyword)cIs_preemptiveAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cTriggerKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cTriggerAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cTriggerSTRINGTerminalRuleCall_12_2_0 = (RuleCall)cTriggerAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cConditionKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cConditionAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cConditionSTRINGTerminalRuleCall_13_2_0 = (RuleCall)cConditionAssignment_13_2.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCommaKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cActionsKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cActionsAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cActionsSTRINGTerminalRuleCall_14_3_0 = (RuleCall)cActionsAssignment_14_3.eContents().get(0);
		private final Group cGroup_14_4 = (Group)cGroup_14.eContents().get(4);
		private final Keyword cCommaKeyword_14_4_0 = (Keyword)cGroup_14_4.eContents().get(0);
		private final Assignment cActionsAssignment_14_4_1 = (Assignment)cGroup_14_4.eContents().get(1);
		private final RuleCall cActionsSTRINGTerminalRuleCall_14_4_1_0 = (RuleCall)cActionsAssignment_14_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14_5 = (Keyword)cGroup_14.eContents().get(5);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCommaKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cPar_instantiationKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cPar_instantiationAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cPar_instantiationSTRINGTerminalRuleCall_15_3_0 = (RuleCall)cPar_instantiationAssignment_15_3.eContents().get(0);
		private final Group cGroup_15_4 = (Group)cGroup_15.eContents().get(4);
		private final Keyword cCommaKeyword_15_4_0 = (Keyword)cGroup_15_4.eContents().get(0);
		private final Assignment cPar_instantiationAssignment_15_4_1 = (Assignment)cGroup_15_4.eContents().get(1);
		private final RuleCall cPar_instantiationSTRINGTerminalRuleCall_15_4_1_0 = (RuleCall)cPar_instantiationAssignment_15_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15_5 = (Keyword)cGroup_15.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Transition:
		//	'Transition' name=ID
		//	requirements=Requirements
		//	'{'
		//	'source' source=[Source] (',' 'exiting_node' exiting_node=[ExitingNode|EString])?
		//	',' 'destination' destination=[Destination] (',' 'entering_node' entering_node=[EnteringNodeAbs|EString])? (','
		//	is_preemptive?='isPreemptive')? (',' 'trigger' trigger=STRING)? (',' 'condition' condition=STRING)? (',' 'actions'
		//	'{' actions+=STRING (',' actions+=STRING)* '}')? (',' 'par_instantiation' '{' par_instantiation+=STRING (','
		//	par_instantiation+=STRING)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition' name=ID requirements=Requirements '{' 'source' source=[Source] (',' 'exiting_node'
		//exiting_node=[ExitingNode|EString])? ',' 'destination' destination=[Destination] (',' 'entering_node'
		//entering_node=[EnteringNodeAbs|EString])? (',' is_preemptive?='isPreemptive')? (',' 'trigger' trigger=STRING)? (','
		//'condition' condition=STRING)? (',' 'actions' '{' actions+=STRING (',' actions+=STRING)* '}')? (','
		//'par_instantiation' '{' par_instantiation+=STRING (',' par_instantiation+=STRING)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//requirements=Requirements
		public Assignment getRequirementsAssignment_2() { return cRequirementsAssignment_2; }
		
		//Requirements
		public RuleCall getRequirementsRequirementsParserRuleCall_2_0() { return cRequirementsRequirementsParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'source'
		public Keyword getSourceKeyword_4() { return cSourceKeyword_4; }
		
		//source=[Source]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[Source]
		public CrossReference getSourceSourceCrossReference_5_0() { return cSourceSourceCrossReference_5_0; }
		
		//ID
		public RuleCall getSourceSourceIDTerminalRuleCall_5_0_1() { return cSourceSourceIDTerminalRuleCall_5_0_1; }
		
		//(',' 'exiting_node' exiting_node=[ExitingNode|EString])?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//'exiting_node'
		public Keyword getExiting_nodeKeyword_6_1() { return cExiting_nodeKeyword_6_1; }
		
		//exiting_node=[ExitingNode|EString]
		public Assignment getExiting_nodeAssignment_6_2() { return cExiting_nodeAssignment_6_2; }
		
		//[ExitingNode|EString]
		public CrossReference getExiting_nodeExitingNodeCrossReference_6_2_0() { return cExiting_nodeExitingNodeCrossReference_6_2_0; }
		
		//EString
		public RuleCall getExiting_nodeExitingNodeEStringParserRuleCall_6_2_0_1() { return cExiting_nodeExitingNodeEStringParserRuleCall_6_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'destination'
		public Keyword getDestinationKeyword_8() { return cDestinationKeyword_8; }
		
		//destination=[Destination]
		public Assignment getDestinationAssignment_9() { return cDestinationAssignment_9; }
		
		//[Destination]
		public CrossReference getDestinationDestinationCrossReference_9_0() { return cDestinationDestinationCrossReference_9_0; }
		
		//ID
		public RuleCall getDestinationDestinationIDTerminalRuleCall_9_0_1() { return cDestinationDestinationIDTerminalRuleCall_9_0_1; }
		
		//(',' 'entering_node' entering_node=[EnteringNodeAbs|EString])?
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//'entering_node'
		public Keyword getEntering_nodeKeyword_10_1() { return cEntering_nodeKeyword_10_1; }
		
		//entering_node=[EnteringNodeAbs|EString]
		public Assignment getEntering_nodeAssignment_10_2() { return cEntering_nodeAssignment_10_2; }
		
		//[EnteringNodeAbs|EString]
		public CrossReference getEntering_nodeEnteringNodeAbsCrossReference_10_2_0() { return cEntering_nodeEnteringNodeAbsCrossReference_10_2_0; }
		
		//EString
		public RuleCall getEntering_nodeEnteringNodeAbsEStringParserRuleCall_10_2_0_1() { return cEntering_nodeEnteringNodeAbsEStringParserRuleCall_10_2_0_1; }
		
		//(',' is_preemptive?='isPreemptive')?
		public Group getGroup_11() { return cGroup_11; }
		
		//','
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }
		
		//is_preemptive?='isPreemptive'
		public Assignment getIs_preemptiveAssignment_11_1() { return cIs_preemptiveAssignment_11_1; }
		
		//'isPreemptive'
		public Keyword getIs_preemptiveIsPreemptiveKeyword_11_1_0() { return cIs_preemptiveIsPreemptiveKeyword_11_1_0; }
		
		//(',' 'trigger' trigger=STRING)?
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_12_1() { return cTriggerKeyword_12_1; }
		
		//trigger=STRING
		public Assignment getTriggerAssignment_12_2() { return cTriggerAssignment_12_2; }
		
		//STRING
		public RuleCall getTriggerSTRINGTerminalRuleCall_12_2_0() { return cTriggerSTRINGTerminalRuleCall_12_2_0; }
		
		//(',' 'condition' condition=STRING)?
		public Group getGroup_13() { return cGroup_13; }
		
		//','
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//'condition'
		public Keyword getConditionKeyword_13_1() { return cConditionKeyword_13_1; }
		
		//condition=STRING
		public Assignment getConditionAssignment_13_2() { return cConditionAssignment_13_2; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_13_2_0() { return cConditionSTRINGTerminalRuleCall_13_2_0; }
		
		//(',' 'actions' '{' actions+=STRING (',' actions+=STRING)* '}')?
		public Group getGroup_14() { return cGroup_14; }
		
		//','
		public Keyword getCommaKeyword_14_0() { return cCommaKeyword_14_0; }
		
		//'actions'
		public Keyword getActionsKeyword_14_1() { return cActionsKeyword_14_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14_2() { return cLeftCurlyBracketKeyword_14_2; }
		
		//actions+=STRING
		public Assignment getActionsAssignment_14_3() { return cActionsAssignment_14_3; }
		
		//STRING
		public RuleCall getActionsSTRINGTerminalRuleCall_14_3_0() { return cActionsSTRINGTerminalRuleCall_14_3_0; }
		
		//(',' actions+=STRING)*
		public Group getGroup_14_4() { return cGroup_14_4; }
		
		//','
		public Keyword getCommaKeyword_14_4_0() { return cCommaKeyword_14_4_0; }
		
		//actions+=STRING
		public Assignment getActionsAssignment_14_4_1() { return cActionsAssignment_14_4_1; }
		
		//STRING
		public RuleCall getActionsSTRINGTerminalRuleCall_14_4_1_0() { return cActionsSTRINGTerminalRuleCall_14_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14_5() { return cRightCurlyBracketKeyword_14_5; }
		
		//(',' 'par_instantiation' '{' par_instantiation+=STRING (',' par_instantiation+=STRING)* '}')?
		public Group getGroup_15() { return cGroup_15; }
		
		//','
		public Keyword getCommaKeyword_15_0() { return cCommaKeyword_15_0; }
		
		//'par_instantiation'
		public Keyword getPar_instantiationKeyword_15_1() { return cPar_instantiationKeyword_15_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_15_2() { return cLeftCurlyBracketKeyword_15_2; }
		
		//par_instantiation+=STRING
		public Assignment getPar_instantiationAssignment_15_3() { return cPar_instantiationAssignment_15_3; }
		
		//STRING
		public RuleCall getPar_instantiationSTRINGTerminalRuleCall_15_3_0() { return cPar_instantiationSTRINGTerminalRuleCall_15_3_0; }
		
		//(',' par_instantiation+=STRING)*
		public Group getGroup_15_4() { return cGroup_15_4; }
		
		//','
		public Keyword getCommaKeyword_15_4_0() { return cCommaKeyword_15_4_0; }
		
		//par_instantiation+=STRING
		public Assignment getPar_instantiationAssignment_15_4_1() { return cPar_instantiationAssignment_15_4_1; }
		
		//STRING
		public RuleCall getPar_instantiationSTRINGTerminalRuleCall_15_4_1_0() { return cPar_instantiationSTRINGTerminalRuleCall_15_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15_5() { return cRightCurlyBracketKeyword_15_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class RequirementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.Requirements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRequirementsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRequirementsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRequirementsSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cRequirementsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cRequirementsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cRequirementsSTRINGTerminalRuleCall_1_4_1_0 = (RuleCall)cRequirementsAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Requirements requirements:
		//	{requirements} ('(' 'requirements' '=' requirements+=STRING ("," requirements+=STRING)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{requirements} ('(' 'requirements' '=' requirements+=STRING ("," requirements+=STRING)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{requirements}
		public Action getRequirementsAction_0() { return cRequirementsAction_0; }
		
		//('(' 'requirements' '=' requirements+=STRING ("," requirements+=STRING)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'requirements'
		public Keyword getRequirementsKeyword_1_1() { return cRequirementsKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//requirements+=STRING
		public Assignment getRequirementsAssignment_1_3() { return cRequirementsAssignment_1_3; }
		
		//STRING
		public RuleCall getRequirementsSTRINGTerminalRuleCall_1_3_0() { return cRequirementsSTRINGTerminalRuleCall_1_3_0; }
		
		//("," requirements+=STRING)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//requirements+=STRING
		public Assignment getRequirementsAssignment_1_4_1() { return cRequirementsAssignment_1_4_1; }
		
		//STRING
		public RuleCall getRequirementsSTRINGTerminalRuleCall_1_4_1_0() { return cRequirementsSTRINGTerminalRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstm.Xdstm.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final IncludeElements pInclude;
	private final DSTMElements pDSTM;
	private final MachineElements pMachine;
	private final VertexElements pVertex;
	private final EnteringNodeAbsElements pEnteringNodeAbs;
	private final NodeElements pNode;
	private final BoxElements pBox;
	private final EnteringNodeElements pEnteringNode;
	private final InitialNodeElements pInitialNode;
	private final ExitingNodeElements pExitingNode;
	private final ForkElements pFork;
	private final JoinElements pJoin;
	private final DestinationElements pDestination;
	private final SourceElements pSource;
	private final TransitionElements pTransition;
	private final RequirementsElements pRequirements;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XdstmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInclude = new IncludeElements();
		this.pDSTM = new DSTMElements();
		this.pMachine = new MachineElements();
		this.pVertex = new VertexElements();
		this.pEnteringNodeAbs = new EnteringNodeAbsElements();
		this.pNode = new NodeElements();
		this.pBox = new BoxElements();
		this.pEnteringNode = new EnteringNodeElements();
		this.pInitialNode = new InitialNodeElements();
		this.pExitingNode = new ExitingNodeElements();
		this.pFork = new ForkElements();
		this.pJoin = new JoinElements();
		this.pDestination = new DestinationElements();
		this.pSource = new SourceElements();
		this.pTransition = new TransitionElements();
		this.pRequirements = new RequirementsElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.unina.xdstm.Xdstm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	include=include
	//	machines+=Machine machines+=Machine*
	//	dstm+=DSTM;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//include:
	//	'import' importURI=STRING ';';
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//DSTM:
	//	'DSTM' name=ID '{'
	//	'machines' '=' machines+=[Machine] ("," machines+=[Machine])* ';'
	//	'main' main=[Machine] ';'
	//	'}' ';';
	public DSTMElements getDSTMAccess() {
		return pDSTM;
	}
	
	public ParserRule getDSTMRule() {
		return getDSTMAccess().getRule();
	}
	
	//Machine:
	//	'Machine'
	//	name=ID //'(' parameters+=Parameter ( ',' parameters+=Parameter) ')'
	//	'{'
	//	'vertexes' '{'
	//	vertexes+=Vertex (',' vertexes+=Vertex)*
	//	'}'
	//	'transitions' '{'
	//	transitions+=Transition (',' transitions+=Transition)*
	//	'}'
	//	'}' ';';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//Vertex:
	//	Node | Box | EnteringNodeAbs | ExitingNode | Fork | Join;
	public VertexElements getVertexAccess() {
		return pVertex;
	}
	
	public ParserRule getVertexRule() {
		return getVertexAccess().getRule();
	}
	
	//EnteringNodeAbs:
	//	EnteringNode | InitialNode;
	public EnteringNodeAbsElements getEnteringNodeAbsAccess() {
		return pEnteringNodeAbs;
	}
	
	public ParserRule getEnteringNodeAbsRule() {
		return getEnteringNodeAbsAccess().getRule();
	}
	
	//Node:
	//	'Node' name=ID
	//	requirements=Requirements;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Box:
	//	'Box' name=ID
	//	requirements=Requirements
	//	'{'
	//	'instantiation' '(' instantiation+=[Machine] ("," instantiation+=[Machine])* ')'
	//	'}';
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//EnteringNode:
	//	'EnteringNode' name=ID
	//	requirements=Requirements;
	public EnteringNodeElements getEnteringNodeAccess() {
		return pEnteringNode;
	}
	
	public ParserRule getEnteringNodeRule() {
		return getEnteringNodeAccess().getRule();
	}
	
	//InitialNode:
	//	'InitialNode' name=ID
	//	requirements=Requirements;
	public InitialNodeElements getInitialNodeAccess() {
		return pInitialNode;
	}
	
	public ParserRule getInitialNodeRule() {
		return getInitialNodeAccess().getRule();
	}
	
	//ExitingNode:
	//	'ExitingNode' name=ID
	//	requirements=Requirements;
	public ExitingNodeElements getExitingNodeAccess() {
		return pExitingNode;
	}
	
	public ParserRule getExitingNodeRule() {
		return getExitingNodeAccess().getRule();
	}
	
	//Fork:
	//	'Fork' name=ID
	//	requirements=Requirements;
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}
	
	//Join:
	//	'Join' name=ID
	//	requirements=Requirements;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//Destination:
	//	Node | Box | ExitingNode | Fork | Join;
	public DestinationElements getDestinationAccess() {
		return pDestination;
	}
	
	public ParserRule getDestinationRule() {
		return getDestinationAccess().getRule();
	}
	
	//Source:
	//	Node | Box | EnteringNodeAbs | Fork | Join;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Transition:
	//	'Transition' name=ID
	//	requirements=Requirements
	//	'{'
	//	'source' source=[Source] (',' 'exiting_node' exiting_node=[ExitingNode|EString])?
	//	',' 'destination' destination=[Destination] (',' 'entering_node' entering_node=[EnteringNodeAbs|EString])? (','
	//	is_preemptive?='isPreemptive')? (',' 'trigger' trigger=STRING)? (',' 'condition' condition=STRING)? (',' 'actions'
	//	'{' actions+=STRING (',' actions+=STRING)* '}')? (',' 'par_instantiation' '{' par_instantiation+=STRING (','
	//	par_instantiation+=STRING)* '}')?
	//	'}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Requirements requirements:
	//	{requirements} ('(' 'requirements' '=' requirements+=STRING ("," requirements+=STRING)* ')')?;
	public RequirementsElements getRequirementsAccess() {
		return pRequirements;
	}
	
	public ParserRule getRequirementsRule() {
		return getRequirementsAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
