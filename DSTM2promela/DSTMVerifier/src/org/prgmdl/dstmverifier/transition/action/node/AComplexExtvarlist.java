/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.action.node;

import org.prgmdl.dstmverifier.transition.action.analysis.*;

@SuppressWarnings("nls")
public final class AComplexExtvarlist extends PExtvarlist
{
    private PExtvar _extvar_;
    private TComma _comma_;
    private PExtvarlist _extvarlist_;

    public AComplexExtvarlist()
    {
        // Constructor
    }

    public AComplexExtvarlist(
        @SuppressWarnings("hiding") PExtvar _extvar_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PExtvarlist _extvarlist_)
    {
        // Constructor
        setExtvar(_extvar_);

        setComma(_comma_);

        setExtvarlist(_extvarlist_);

    }

    @Override
    public Object clone()
    {
        return new AComplexExtvarlist(
            cloneNode(this._extvar_),
            cloneNode(this._comma_),
            cloneNode(this._extvarlist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComplexExtvarlist(this);
    }

    public PExtvar getExtvar()
    {
        return this._extvar_;
    }

    public void setExtvar(PExtvar node)
    {
        if(this._extvar_ != null)
        {
            this._extvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extvar_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PExtvarlist getExtvarlist()
    {
        return this._extvarlist_;
    }

    public void setExtvarlist(PExtvarlist node)
    {
        if(this._extvarlist_ != null)
        {
            this._extvarlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extvarlist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._extvar_)
            + toString(this._comma_)
            + toString(this._extvarlist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._extvar_ == child)
        {
            this._extvar_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._extvarlist_ == child)
        {
            this._extvarlist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._extvar_ == oldChild)
        {
            setExtvar((PExtvar) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._extvarlist_ == oldChild)
        {
            setExtvarlist((PExtvarlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
