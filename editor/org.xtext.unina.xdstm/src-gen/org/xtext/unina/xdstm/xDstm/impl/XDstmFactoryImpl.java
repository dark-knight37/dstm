/**
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.xDstm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.unina.xdstm.xDstm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XDstmFactoryImpl extends EFactoryImpl implements XDstmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XDstmFactory init()
  {
    try
    {
      XDstmFactory theXDstmFactory = (XDstmFactory)EPackage.Registry.INSTANCE.getEFactory(XDstmPackage.eNS_URI);
      if (theXDstmFactory != null)
      {
        return theXDstmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XDstmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDstmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XDstmPackage.MODEL: return createModel();
      case XDstmPackage.INCLUDE: return createinclude();
      case XDstmPackage.DSTM: return createDSTM();
      case XDstmPackage.MACHINE: return createMachine();
      case XDstmPackage.VERTEX: return createVertex();
      case XDstmPackage.ENTERING_NODE_ABS: return createEnteringNodeAbs();
      case XDstmPackage.NODE: return createNode();
      case XDstmPackage.BOX: return createBox();
      case XDstmPackage.ENTERING_NODE: return createEnteringNode();
      case XDstmPackage.INITIAL_NODE: return createInitialNode();
      case XDstmPackage.EXITING_NODE: return createExitingNode();
      case XDstmPackage.FORK: return createFork();
      case XDstmPackage.JOIN: return createJoin();
      case XDstmPackage.DESTINATION: return createDestination();
      case XDstmPackage.SOURCE: return createSource();
      case XDstmPackage.TRANSITION: return createTransition();
      case XDstmPackage.REQUIREMENTS: return createrequirements();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public include createinclude()
  {
    includeImpl include = new includeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSTM createDSTM()
  {
    DSTMImpl dstm = new DSTMImpl();
    return dstm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Machine createMachine()
  {
    MachineImpl machine = new MachineImpl();
    return machine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Vertex createVertex()
  {
    VertexImpl vertex = new VertexImpl();
    return vertex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnteringNodeAbs createEnteringNodeAbs()
  {
    EnteringNodeAbsImpl enteringNodeAbs = new EnteringNodeAbsImpl();
    return enteringNodeAbs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Box createBox()
  {
    BoxImpl box = new BoxImpl();
    return box;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnteringNode createEnteringNode()
  {
    EnteringNodeImpl enteringNode = new EnteringNodeImpl();
    return enteringNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitialNode createInitialNode()
  {
    InitialNodeImpl initialNode = new InitialNodeImpl();
    return initialNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExitingNode createExitingNode()
  {
    ExitingNodeImpl exitingNode = new ExitingNodeImpl();
    return exitingNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fork createFork()
  {
    ForkImpl fork = new ForkImpl();
    return fork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Destination createDestination()
  {
    DestinationImpl destination = new DestinationImpl();
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Source createSource()
  {
    SourceImpl source = new SourceImpl();
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public requirements createrequirements()
  {
    requirementsImpl requirements = new requirementsImpl();
    return requirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDstmPackage getXDstmPackage()
  {
    return (XDstmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XDstmPackage getPackage()
  {
    return XDstmPackage.eINSTANCE;
  }

} //XDstmFactoryImpl
