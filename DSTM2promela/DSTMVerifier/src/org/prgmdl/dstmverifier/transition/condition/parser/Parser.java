/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.condition.parser;

import org.prgmdl.dstmverifier.transition.condition.lexer.*;
import org.prgmdl.dstmverifier.transition.condition.node.*;
import org.prgmdl.dstmverifier.transition.condition.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ACondCondition */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ANestedTerm */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AUnaryTerm */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce ASimpleTerm */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce ABinaryTerm */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AAndopBinop */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AOropBinop */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce ALeftFirst */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AMetaFirst */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce ARightSecond */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce AMetaSecond */
		    {
			ArrayList list = new10();
			push(goTo(4), list, false);
		    }
		    break;
                    case 11: /* reduce ATrueAtomic */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AFalseAtomic */
		    {
			ArrayList list = new12();
			push(goTo(5), list, false);
		    }
		    break;
                    case 13: /* reduce AEquiopAtomic */
		    {
			ArrayList list = new13();
			push(goTo(5), list, false);
		    }
		    break;
                    case 14: /* reduce ACompopAtomic */
		    {
			ArrayList list = new14();
			push(goTo(5), list, false);
		    }
		    break;
                    case 15: /* reduce ASizecondAtomic */
		    {
			ArrayList list = new15();
			push(goTo(5), list, false);
		    }
		    break;
                    case 16: /* reduce ATrmlistAtomic */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AFullcondSize */
		    {
			ArrayList list = new17();
			push(goTo(6), list, false);
		    }
		    break;
                    case 18: /* reduce AEmptycondSize */
		    {
			ArrayList list = new18();
			push(goTo(6), list, false);
		    }
		    break;
                    case 19: /* reduce ANeqEqop */
		    {
			ArrayList list = new19();
			push(goTo(7), list, false);
		    }
		    break;
                    case 20: /* reduce AEqEqop */
		    {
			ArrayList list = new20();
			push(goTo(7), list, false);
		    }
		    break;
                    case 21: /* reduce ALteqCmpop */
		    {
			ArrayList list = new21();
			push(goTo(8), list, false);
		    }
		    break;
                    case 22: /* reduce ALtCmpop */
		    {
			ArrayList list = new22();
			push(goTo(8), list, false);
		    }
		    break;
                    case 23: /* reduce AGteqCmpop */
		    {
			ArrayList list = new23();
			push(goTo(8), list, false);
		    }
		    break;
                    case 24: /* reduce AGtCmpop */
		    {
			ArrayList list = new24();
			push(goTo(8), list, false);
		    }
		    break;
                    case 25: /* reduce ASimpleLval */
		    {
			ArrayList list = new25();
			push(goTo(9), list, false);
		    }
		    break;
                    case 26: /* reduce AComposedLval */
		    {
			ArrayList list = new26();
			push(goTo(9), list, false);
		    }
		    break;
                    case 27: /* reduce ASimpleRval */
		    {
			ArrayList list = new27();
			push(goTo(10), list, false);
		    }
		    break;
                    case 28: /* reduce AComposedRval */
		    {
			ArrayList list = new28();
			push(goTo(10), list, false);
		    }
		    break;
                    case 29: /* reduce ATrueExpr */
		    {
			ArrayList list = new29();
			push(goTo(11), list, false);
		    }
		    break;
                    case 30: /* reduce AFalseExpr */
		    {
			ArrayList list = new30();
			push(goTo(11), list, false);
		    }
		    break;
                    case 31: /* reduce AIdExpr */
		    {
			ArrayList list = new31();
			push(goTo(11), list, false);
		    }
		    break;
                    case 32: /* reduce AChnExpr */
		    {
			ArrayList list = new32();
			push(goTo(11), list, false);
		    }
		    break;
                    case 33: /* reduce ANumExpr */
		    {
			ArrayList list = new33();
			push(goTo(11), list, false);
		    }
		    break;
                    case 34: /* reduce ADcareExpr */
		    {
			ArrayList list = new34();
			push(goTo(11), list, false);
		    }
		    break;
                    case 35: /* reduce AEnumExpr */
		    {
			ArrayList list = new35();
			push(goTo(11), list, false);
		    }
		    break;
                    case 36: /* reduce ALenChnExpr */
		    {
			ArrayList list = new36();
			push(goTo(11), list, false);
		    }
		    break;
                    case 37: /* reduce APlusMathop */
		    {
			ArrayList list = new37();
			push(goTo(12), list, false);
		    }
		    break;
                    case 38: /* reduce AMinusMathop */
		    {
			ArrayList list = new38();
			push(goTo(12), list, false);
		    }
		    break;
                    case 39: /* reduce AStarMathop */
		    {
			ArrayList list = new39();
			push(goTo(12), list, false);
		    }
		    break;
                    case 40: /* reduce ASlashMathop */
		    {
			ArrayList list = new40();
			push(goTo(12), list, false);
		    }
		    break;
                    case 41: /* reduce ASimpleTrmlist */
		    {
			ArrayList list = new41();
			push(goTo(13), list, false);
		    }
		    break;
                    case 42: /* reduce AComplexTrmlist */
		    {
			ArrayList list = new42();
			push(goTo(13), list, false);
		    }
		    break;
                    case 43: /* reduce AChnIdChnName */
		    {
			ArrayList list = new43();
			push(goTo(14), list, false);
		    }
		    break;
                    case 44: /* reduce AIntBasic */
		    {
			ArrayList list = new44();
			push(goTo(15), list, false);
		    }
		    break;
                    case 45: /* reduce ABoolBasic */
		    {
			ArrayList list = new45();
			push(goTo(15), list, false);
		    }
		    break;
                    case 46: /* reduce AChnBasic */
		    {
			ArrayList list = new46();
			push(goTo(15), list, false);
		    }
		    break;
                    case 47: /* reduce AENameBasic */
		    {
			ArrayList list = new47();
			push(goTo(15), list, false);
		    }
		    break;
                    case 48: /* reduce AVarIdVarName */
		    {
			ArrayList list = new48();
			push(goTo(16), list, false);
		    }
		    break;
                    case 49: /* reduce AChIdChname */
		    {
			ArrayList list = new49();
			push(goTo(17), list, false);
		    }
		    break;
                    case 50: /* reduce ALIdLiteral */
		    {
			ArrayList list = new50();
			push(goTo(18), list, false);
		    }
		    break;
                    case 51: /* reduce AEIdEName */
		    {
			ArrayList list = new51();
			push(goTo(19), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PCondition node1 = (PCondition) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce ACondCondition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pconditionNode1 = new ACondCondition(ptermNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ANestedTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PTerm ptermNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new ANestedTerm(tlparNode2, ptermNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNot tnotNode2;
        PTerm ptermNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(tnotNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ASimpleTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PAtomic patomicNode2;
        patomicNode2 = (PAtomic)nodeArrayList1.get(0);

        ptermNode1 = new ASimpleTerm(patomicNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ABinaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PFirst pfirstNode3;
        PBinop pbinopNode4;
        PSecond psecondNode5;
        TRPar trparNode6;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pfirstNode3 = (PFirst)nodeArrayList2.get(0);
        pbinopNode4 = (PBinop)nodeArrayList3.get(0);
        psecondNode5 = (PSecond)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        ptermNode1 = new ABinaryTerm(tlparNode2, pfirstNode3, pbinopNode4, psecondNode5, trparNode6);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAndopBinop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinop pbinopNode1;
        {
            // Block
        TAmpAmp tampampNode2;
        tampampNode2 = (TAmpAmp)nodeArrayList1.get(0);

        pbinopNode1 = new AAndopBinop(tampampNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AOropBinop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinop pbinopNode1;
        {
            // Block
        TBarBar tbarbarNode2;
        tbarbarNode2 = (TBarBar)nodeArrayList1.get(0);

        pbinopNode1 = new AOropBinop(tbarbarNode2);
        }
	nodeList.add(pbinopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ALeftFirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFirst pfirstNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfirstNode1 = new ALeftFirst(ptermNode2);
        }
	nodeList.add(pfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AMetaFirst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFirst pfirstNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        pfirstNode1 = new AMetaFirst(topaqueexprNode2);
        }
	nodeList.add(pfirstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ARightSecond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSecond psecondNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psecondNode1 = new ARightSecond(ptermNode2);
        }
	nodeList.add(psecondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AMetaSecond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSecond psecondNode1;
        {
            // Block
        TOpaqueexpr topaqueexprNode2;
        topaqueexprNode2 = (TOpaqueexpr)nodeArrayList1.get(0);

        psecondNode1 = new AMetaSecond(topaqueexprNode2);
        }
	nodeList.add(psecondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ATrueAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        patomicNode1 = new ATrueAtomic(ttrueNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFalseAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        patomicNode1 = new AFalseAtomic(tfalseNode2);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AEquiopAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PLval plvalNode2;
        PEqop peqopNode3;
        PRval prvalNode4;
        plvalNode2 = (PLval)nodeArrayList1.get(0);
        peqopNode3 = (PEqop)nodeArrayList2.get(0);
        prvalNode4 = (PRval)nodeArrayList3.get(0);

        patomicNode1 = new AEquiopAtomic(plvalNode2, peqopNode3, prvalNode4);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ACompopAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PLval plvalNode2;
        PCmpop pcmpopNode3;
        PRval prvalNode4;
        plvalNode2 = (PLval)nodeArrayList1.get(0);
        pcmpopNode3 = (PCmpop)nodeArrayList2.get(0);
        prvalNode4 = (PRval)nodeArrayList3.get(0);

        patomicNode1 = new ACompopAtomic(plvalNode2, pcmpopNode3, prvalNode4);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASizecondAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PChname pchnameNode2;
        TLBkt tlbktNode3;
        TQmark tqmarkNode4;
        PSize psizeNode5;
        TRBkt trbktNode6;
        pchnameNode2 = (PChname)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        tqmarkNode4 = (TQmark)nodeArrayList3.get(0);
        psizeNode5 = (PSize)nodeArrayList4.get(0);
        trbktNode6 = (TRBkt)nodeArrayList5.get(0);

        patomicNode1 = new ASizecondAtomic(pchnameNode2, tlbktNode3, tqmarkNode4, psizeNode5, trbktNode6);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ATrmlistAtomic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAtomic patomicNode1;
        {
            // Block
        PChname pchnameNode2;
        TLBkt tlbktNode3;
        TQmark tqmarkNode4;
        TLt tltNode5;
        PTrmlist ptrmlistNode6;
        TGt tgtNode7;
        TRBkt trbktNode8;
        pchnameNode2 = (PChname)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        tqmarkNode4 = (TQmark)nodeArrayList3.get(0);
        tltNode5 = (TLt)nodeArrayList4.get(0);
        ptrmlistNode6 = (PTrmlist)nodeArrayList5.get(0);
        tgtNode7 = (TGt)nodeArrayList6.get(0);
        trbktNode8 = (TRBkt)nodeArrayList7.get(0);

        patomicNode1 = new ATrmlistAtomic(pchnameNode2, tlbktNode3, tqmarkNode4, tltNode5, ptrmlistNode6, tgtNode7, trbktNode8);
        }
	nodeList.add(patomicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AFullcondSize */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSize psizeNode1;
        {
            // Block
        TFull tfullNode2;
        tfullNode2 = (TFull)nodeArrayList1.get(0);

        psizeNode1 = new AFullcondSize(tfullNode2);
        }
	nodeList.add(psizeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AEmptycondSize */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSize psizeNode1;
        {
            // Block
        TEmpty temptyNode2;
        temptyNode2 = (TEmpty)nodeArrayList1.get(0);

        psizeNode1 = new AEmptycondSize(temptyNode2);
        }
	nodeList.add(psizeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ANeqEqop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqop peqopNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        peqopNode1 = new ANeqEqop(tneqNode2);
        }
	nodeList.add(peqopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AEqEqop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEqop peqopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        peqopNode1 = new AEqEqop(teqNode2);
        }
	nodeList.add(peqopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ALteqCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        pcmpopNode1 = new ALteqCmpop(tlteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ALtCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcmpopNode1 = new ALtCmpop(tltNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AGteqCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        pcmpopNode1 = new AGteqCmpop(tgteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AGtCmpop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpop pcmpopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcmpopNode1 = new AGtCmpop(tgtNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ASimpleLval */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLval plvalNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        plvalNode1 = new ASimpleLval(pexprNode2);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AComposedLval */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLval plvalNode1;
        {
            // Block
        PExpr pexprNode2;
        PMathop pmathopNode3;
        PLval plvalNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pmathopNode3 = (PMathop)nodeArrayList2.get(0);
        plvalNode4 = (PLval)nodeArrayList3.get(0);

        plvalNode1 = new AComposedLval(pexprNode2, pmathopNode3, plvalNode4);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ASimpleRval */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRval prvalNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        prvalNode1 = new ASimpleRval(pexprNode2);
        }
	nodeList.add(prvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AComposedRval */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRval prvalNode1;
        {
            // Block
        PExpr pexprNode2;
        PMathop pmathopNode3;
        PRval prvalNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pmathopNode3 = (PMathop)nodeArrayList2.get(0);
        prvalNode4 = (PRval)nodeArrayList3.get(0);

        prvalNode1 = new AComposedRval(pexprNode2, pmathopNode3, prvalNode4);
        }
	nodeList.add(prvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ATrueExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexprNode1 = new ATrueExpr(ttrueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AFalseExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexprNode1 = new AFalseExpr(tfalseNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AIdExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexprNode1 = new AIdExpr(tidentifierNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AChnExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TChn tchnNode2;
        TColonColon tcoloncolonNode3;
        PChnName pchnnameNode4;
        tchnNode2 = (TChn)nodeArrayList1.get(0);
        tcoloncolonNode3 = (TColonColon)nodeArrayList2.get(0);
        pchnnameNode4 = (PChnName)nodeArrayList3.get(0);

        pexprNode1 = new AChnExpr(tchnNode2, tcoloncolonNode3, pchnnameNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ANumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumbers tnumbersNode2;
        tnumbersNode2 = (TNumbers)nodeArrayList1.get(0);

        pexprNode1 = new ANumExpr(tnumbersNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ADcareExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TDcsymb tdcsymbNode2;
        tdcsymbNode2 = (TDcsymb)nodeArrayList1.get(0);

        pexprNode1 = new ADcareExpr(tdcsymbNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AEnumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PEName penameNode2;
        TColonColon tcoloncolonNode3;
        PLiteral pliteralNode4;
        penameNode2 = (PEName)nodeArrayList1.get(0);
        tcoloncolonNode3 = (TColonColon)nodeArrayList2.get(0);
        pliteralNode4 = (PLiteral)nodeArrayList3.get(0);

        pexprNode1 = new AEnumExpr(penameNode2, tcoloncolonNode3, pliteralNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ALenChnExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLen tlenNode2;
        TLPar tlparNode3;
        PChnName pchnnameNode4;
        TRPar trparNode5;
        tlenNode2 = (TLen)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pchnnameNode4 = (PChnName)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexprNode1 = new ALenChnExpr(tlenNode2, tlparNode3, pchnnameNode4, trparNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce APlusMathop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMathop pmathopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pmathopNode1 = new APlusMathop(tplusNode2);
        }
	nodeList.add(pmathopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AMinusMathop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMathop pmathopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pmathopNode1 = new AMinusMathop(tminusNode2);
        }
	nodeList.add(pmathopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AStarMathop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMathop pmathopNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pmathopNode1 = new AStarMathop(tstarNode2);
        }
	nodeList.add(pmathopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ASlashMathop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMathop pmathopNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        pmathopNode1 = new ASlashMathop(tslashNode2);
        }
	nodeList.add(pmathopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ASimpleTrmlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrmlist ptrmlistNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        ptrmlistNode1 = new ASimpleTrmlist(pexprNode2);
        }
	nodeList.add(ptrmlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AComplexTrmlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTrmlist ptrmlistNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PTrmlist ptrmlistNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptrmlistNode4 = (PTrmlist)nodeArrayList3.get(0);

        ptrmlistNode1 = new AComplexTrmlist(pexprNode2, tcommaNode3, ptrmlistNode4);
        }
	nodeList.add(ptrmlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AChnIdChnName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChnName pchnnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pchnnameNode1 = new AChnIdChnName(tidentifierNode2);
        }
	nodeList.add(pchnnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AIntBasic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasic pbasicNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pbasicNode1 = new AIntBasic(tintNode2);
        }
	nodeList.add(pbasicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ABoolBasic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasic pbasicNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        pbasicNode1 = new ABoolBasic(tboolNode2);
        }
	nodeList.add(pbasicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AChnBasic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasic pbasicNode1;
        {
            // Block
        TChn tchnNode2;
        tchnNode2 = (TChn)nodeArrayList1.get(0);

        pbasicNode1 = new AChnBasic(tchnNode2);
        }
	nodeList.add(pbasicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AENameBasic */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBasic pbasicNode1;
        {
            // Block
        PEName penameNode2;
        penameNode2 = (PEName)nodeArrayList1.get(0);

        pbasicNode1 = new AENameBasic(penameNode2);
        }
	nodeList.add(pbasicNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AVarIdVarName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarName pvarnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvarnameNode1 = new AVarIdVarName(tidentifierNode2);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AChIdChname */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PChname pchnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pchnameNode1 = new AChIdChname(tidentifierNode2);
        }
	nodeList.add(pchnameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ALIdLiteral */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pliteralNode1 = new ALIdLiteral(tidentifierNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AEIdEName */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEName penameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        penameNode1 = new AEIdEName(tidentifierNode2);
        }
	nodeList.add(penameNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, {15, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {42, SHIFT, 9}, },
			{{-1, ERROR, 1}, {22, SHIFT, 17}, },
			{{-1, REDUCE, 29}, {23, REDUCE, 11}, {24, REDUCE, 11}, {43, REDUCE, 11}, {50, REDUCE, 11}, },
			{{-1, REDUCE, 30}, {23, REDUCE, 12}, {24, REDUCE, 12}, {43, REDUCE, 12}, {50, REDUCE, 12}, },
			{{-1, ERROR, 4}, {42, SHIFT, 18}, },
			{{-1, REDUCE, 31}, {22, REDUCE, 51}, {44, REDUCE, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 7}, {3, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, {15, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {42, SHIFT, 9}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 9}, {3, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, {15, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {42, SHIFT, 9}, {49, SHIFT, 20}, },
			{{-1, ERROR, 10}, {50, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 13}, {32, SHIFT, 23}, {33, SHIFT, 24}, {34, SHIFT, 25}, {35, SHIFT, 26}, {36, SHIFT, 27}, {37, SHIFT, 28}, },
			{{-1, REDUCE, 25}, {28, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {31, SHIFT, 34}, },
			{{-1, ERROR, 15}, {44, SHIFT, 36}, },
			{{-1, ERROR, 16}, {22, SHIFT, 37}, },
			{{-1, ERROR, 17}, {14, SHIFT, 38}, },
			{{-1, ERROR, 18}, {14, SHIFT, 38}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, {43, SHIFT, 41}, },
			{{-1, ERROR, 22}, {23, SHIFT, 42}, {24, SHIFT, 43}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 29}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, ERROR, 30}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 35}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, ERROR, 36}, {18, SHIFT, 52}, },
			{{-1, ERROR, 37}, {14, SHIFT, 53}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 40}, {43, SHIFT, 55}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 44}, {3, SHIFT, 1}, {6, SHIFT, 2}, {7, SHIFT, 3}, {13, SHIFT, 4}, {14, SHIFT, 5}, {15, SHIFT, 6}, {38, SHIFT, 7}, {39, SHIFT, 8}, {42, SHIFT, 9}, {49, SHIFT, 56}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, {22, REDUCE, 51}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 27}, {28, SHIFT, 31}, {29, SHIFT, 32}, {30, SHIFT, 33}, {31, SHIFT, 34}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 52}, {8, SHIFT, 60}, {9, SHIFT, 61}, {32, SHIFT, 62}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 58}, {43, SHIFT, 64}, },
			{{-1, ERROR, 59}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 62}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, ERROR, 63}, {45, SHIFT, 68}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 41}, {17, SHIFT, 69}, },
			{{-1, ERROR, 67}, {33, SHIFT, 70}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 69}, {3, SHIFT, 1}, {6, SHIFT, 45}, {7, SHIFT, 46}, {13, SHIFT, 4}, {14, SHIFT, 47}, {15, SHIFT, 6}, {39, SHIFT, 8}, },
			{{-1, ERROR, 70}, {45, SHIFT, 72}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 16}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {7, 19}, {9, 21}, {44, 57}, },
			{{-1, 44}, },
			{{-1, 22}, },
			{{-1, 58}, },
			{{-1, 12}, },
			{{-1, 63}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 13}, {35, 51}, },
			{{-1, 48}, {30, 50}, {59, 65}, },
			{{-1, 14}, {29, 49}, {30, 49}, {59, 49}, {62, 66}, {69, 66}, },
			{{-1, 35}, {49, 59}, },
			{{-1, 67}, {69, 71}, },
			{{-1, 39}, {18, 40}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 15}, },
			{{-1, 54}, },
			{{-1, 16}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Chn', 'true', 'false', 'len', identifier, numbers, '~', '_', '('",
			"expecting: '::'",
			"expecting: '&&', '||', '+', '-', '*', '/', '<', '>', '==', '!=', '<=', '>=', ')', EOF",
			"expecting: '('",
			"expecting: '::', '+', '-', '*', '/', '<', '>', '==', '!=', '<=', '>=', '['",
			"expecting: ',', '&&', '||', '+', '-', '*', '/', '<', '>', '==', '!=', '<=', '>=', ')', EOF",
			"expecting: 'Chn', 'true', 'false', 'len', identifier, numbers, '~', '_', '(', opaqueexpr",
			"expecting: EOF",
			"expecting: '&&', '||', ')', EOF",
			"expecting: '<', '>', '==', '!=', '<=', '>='",
			"expecting: '+', '-', '*', '/', '<', '>', '==', '!=', '<=', '>='",
			"expecting: '['",
			"expecting: identifier",
			"expecting: '&&', '||'",
			"expecting: '&&', '||', ')'",
			"expecting: 'Chn', 'true', 'false', 'len', identifier, numbers, '_'",
			"expecting: '?'",
			"expecting: ')'",
			"expecting: ',', '::', '&&', '||', '+', '-', '*', '/', '<', '>', '==', '!=', '<=', '>=', ')', EOF",
			"expecting: '&&', '||', '+', '-', '*', '/', ')', EOF",
			"expecting: 'full', 'empty', '<'",
			"expecting: ']'",
			"expecting: ',', '>'",
			"expecting: '>'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 0, 5, 6, 7, 7, 8, 9, 10, 11, 1, 12, 12, 8, 13, 14, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 12, 5, 5, 17, 8, 6, 6, 6, 5, 5, 18, 8, 19, 8, 9, 20, 5, 5, 5, 17, 17, 17, 15, 21, 21, 15, 21, 8, 8, 22, 23, 8, 15, 21, 23, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
