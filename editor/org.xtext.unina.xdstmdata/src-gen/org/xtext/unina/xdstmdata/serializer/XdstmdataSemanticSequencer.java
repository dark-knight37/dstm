/*
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstmdata.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.unina.xdstmdata.services.XdstmdataGrammarAccess;
import org.xtext.unina.xdstmdata.xDstmdata.XDstmdataPackage;
import org.xtext.unina.xdstmdata.xDstmdata.cExtchannel;
import org.xtext.unina.xdstmdata.xDstmdata.cIntchannel;
import org.xtext.unina.xdstmdata.xDstmdata.channel_specifier;
import org.xtext.unina.xdstmdata.xDstmdata.composingtype;
import org.xtext.unina.xdstmdata.xDstmdata.subtype;
import org.xtext.unina.xdstmdata.xDstmdata.tCompound;
import org.xtext.unina.xdstmdata.xDstmdata.tEnum;
import org.xtext.unina.xdstmdata.xDstmdata.tMultitype;
import org.xtext.unina.xdstmdata.xDstmdata.tTypes;
import org.xtext.unina.xdstmdata.xDstmdata.vVariable;

@SuppressWarnings("all")
public class XdstmdataSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XdstmdataGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XDstmdataPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XDstmdataPackage.CEXTCHANNEL:
				sequence_cExtchannel(context, (cExtchannel) semanticObject); 
				return; 
			case XDstmdataPackage.CINTCHANNEL:
				sequence_cIntchannel(context, (cIntchannel) semanticObject); 
				return; 
			case XDstmdataPackage.CHANNEL_SPECIFIER:
				sequence_channel_specifier(context, (channel_specifier) semanticObject); 
				return; 
			case XDstmdataPackage.COMPOSINGTYPE:
				sequence_composingtype(context, (composingtype) semanticObject); 
				return; 
			case XDstmdataPackage.SUBTYPE:
				sequence_subtype(context, (subtype) semanticObject); 
				return; 
			case XDstmdataPackage.TCOMPOUND:
				sequence_tCompound(context, (tCompound) semanticObject); 
				return; 
			case XDstmdataPackage.TENUM:
				sequence_tEnum(context, (tEnum) semanticObject); 
				return; 
			case XDstmdataPackage.TMULTITYPE:
				sequence_tMultitype(context, (tMultitype) semanticObject); 
				return; 
			case XDstmdataPackage.TTYPES:
				sequence_tTypes(context, (tTypes) semanticObject); 
				return; 
			case XDstmdataPackage.VVARIABLE:
				sequence_vVariable(context, (vVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     cExtchannel returns cExtchannel
	 *
	 * Constraint:
	 *     (name=ID (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID))
	 */
	protected void sequence_cExtchannel(ISerializationContext context, cExtchannel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     cIntchannel returns cIntchannel
	 *
	 * Constraint:
	 *     (name=ID bound=INT (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID))
	 */
	protected void sequence_cIntchannel(ISerializationContext context, cIntchannel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     channel_specifier returns channel_specifier
	 *
	 * Constraint:
	 *     type=ID
	 */
	protected void sequence_channel_specifier(ISerializationContext context, channel_specifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XDstmdataPackage.Literals.CHANNEL_SPECIFIER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XDstmdataPackage.Literals.CHANNEL_SPECIFIER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannel_specifierAccess().getTypeIDTerminalRuleCall_0_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     composingtype returns composingtype
	 *
	 * Constraint:
	 *     (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID)
	 */
	protected void sequence_composingtype(ISerializationContext context, composingtype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     subtype returns subtype
	 *
	 * Constraint:
	 *     (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID)
	 */
	protected void sequence_subtype(ISerializationContext context, subtype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tCompound returns tCompound
	 *
	 * Constraint:
	 *     (name=ID subtypes+=subtype subtypes+=subtype*)
	 */
	protected void sequence_tCompound(ISerializationContext context, tCompound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tEnum returns tEnum
	 *
	 * Constraint:
	 *     (name=ID literals+=ID literals+=ID*)
	 */
	protected void sequence_tEnum(ISerializationContext context, tEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tMultitype returns tMultitype
	 *
	 * Constraint:
	 *     (name=ID composingtypes+=composingtype composingtypes+=composingtype*)
	 */
	protected void sequence_tMultitype(ISerializationContext context, tMultitype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tTypes returns tTypes
	 *
	 * Constraint:
	 *     (
	 *         ((tEnum+=tEnum | tCompound+=tCompound | tMultitype+=tMultitype)+ (cIntchannel+=cIntchannel | cExtchannel+=cExtchannel | vVariable+=vVariable)+) | 
	 *         (cIntchannel+=cIntchannel | cExtchannel+=cExtchannel | vVariable+=vVariable)+
	 *     )?
	 */
	protected void sequence_tTypes(ISerializationContext context, tTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     vVariable returns vVariable
	 *
	 * Constraint:
	 *     ((tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) name=ID)
	 */
	protected void sequence_vVariable(ISerializationContext context, vVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
