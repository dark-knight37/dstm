/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.action.node;

import org.prgmdl.dstmverifier.transition.action.analysis.*;

@SuppressWarnings("nls")
public final class ASendStatement extends PStatement
{
    private PChname _chname_;
    private TEmark _emark_;
    private TLt _lt_;
    private PExprlist _exprlist_;
    private TGt _gt_;

    public ASendStatement()
    {
        // Constructor
    }

    public ASendStatement(
        @SuppressWarnings("hiding") PChname _chname_,
        @SuppressWarnings("hiding") TEmark _emark_,
        @SuppressWarnings("hiding") TLt _lt_,
        @SuppressWarnings("hiding") PExprlist _exprlist_,
        @SuppressWarnings("hiding") TGt _gt_)
    {
        // Constructor
        setChname(_chname_);

        setEmark(_emark_);

        setLt(_lt_);

        setExprlist(_exprlist_);

        setGt(_gt_);

    }

    @Override
    public Object clone()
    {
        return new ASendStatement(
            cloneNode(this._chname_),
            cloneNode(this._emark_),
            cloneNode(this._lt_),
            cloneNode(this._exprlist_),
            cloneNode(this._gt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASendStatement(this);
    }

    public PChname getChname()
    {
        return this._chname_;
    }

    public void setChname(PChname node)
    {
        if(this._chname_ != null)
        {
            this._chname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._chname_ = node;
    }

    public TEmark getEmark()
    {
        return this._emark_;
    }

    public void setEmark(TEmark node)
    {
        if(this._emark_ != null)
        {
            this._emark_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._emark_ = node;
    }

    public TLt getLt()
    {
        return this._lt_;
    }

    public void setLt(TLt node)
    {
        if(this._lt_ != null)
        {
            this._lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt_ = node;
    }

    public PExprlist getExprlist()
    {
        return this._exprlist_;
    }

    public void setExprlist(PExprlist node)
    {
        if(this._exprlist_ != null)
        {
            this._exprlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprlist_ = node;
    }

    public TGt getGt()
    {
        return this._gt_;
    }

    public void setGt(TGt node)
    {
        if(this._gt_ != null)
        {
            this._gt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._chname_)
            + toString(this._emark_)
            + toString(this._lt_)
            + toString(this._exprlist_)
            + toString(this._gt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._chname_ == child)
        {
            this._chname_ = null;
            return;
        }

        if(this._emark_ == child)
        {
            this._emark_ = null;
            return;
        }

        if(this._lt_ == child)
        {
            this._lt_ = null;
            return;
        }

        if(this._exprlist_ == child)
        {
            this._exprlist_ = null;
            return;
        }

        if(this._gt_ == child)
        {
            this._gt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._chname_ == oldChild)
        {
            setChname((PChname) newChild);
            return;
        }

        if(this._emark_ == oldChild)
        {
            setEmark((TEmark) newChild);
            return;
        }

        if(this._lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(this._exprlist_ == oldChild)
        {
            setExprlist((PExprlist) newChild);
            return;
        }

        if(this._gt_ == oldChild)
        {
            setGt((TGt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
