/**
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstm.xDstm.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.unina.xdstm.xDstm.DSTM;
import org.xtext.unina.xdstm.xDstm.Machine;
import org.xtext.unina.xdstm.xDstm.Model;
import org.xtext.unina.xdstm.xDstm.XDstmPackage;
import org.xtext.unina.xdstm.xDstm.include;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.ModelImpl#getInclude <em>Include</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.ModelImpl#getMachines <em>Machines</em>}</li>
 *   <li>{@link org.xtext.unina.xdstm.xDstm.impl.ModelImpl#getDstm <em>Dstm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getInclude() <em>Include</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInclude()
   * @generated
   * @ordered
   */
  protected include include;

  /**
   * The cached value of the '{@link #getMachines() <em>Machines</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMachines()
   * @generated
   * @ordered
   */
  protected EList<Machine> machines;

  /**
   * The cached value of the '{@link #getDstm() <em>Dstm</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDstm()
   * @generated
   * @ordered
   */
  protected EList<DSTM> dstm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDstmPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public include getInclude()
  {
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInclude(include newInclude, NotificationChain msgs)
  {
    include oldInclude = include;
    include = newInclude;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XDstmPackage.MODEL__INCLUDE, oldInclude, newInclude);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInclude(include newInclude)
  {
    if (newInclude != include)
    {
      NotificationChain msgs = null;
      if (include != null)
        msgs = ((InternalEObject)include).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XDstmPackage.MODEL__INCLUDE, null, msgs);
      if (newInclude != null)
        msgs = ((InternalEObject)newInclude).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XDstmPackage.MODEL__INCLUDE, null, msgs);
      msgs = basicSetInclude(newInclude, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDstmPackage.MODEL__INCLUDE, newInclude, newInclude));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Machine> getMachines()
  {
    if (machines == null)
    {
      machines = new EObjectContainmentEList<Machine>(Machine.class, this, XDstmPackage.MODEL__MACHINES);
    }
    return machines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<DSTM> getDstm()
  {
    if (dstm == null)
    {
      dstm = new EObjectContainmentEList<DSTM>(DSTM.class, this, XDstmPackage.MODEL__DSTM);
    }
    return dstm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDstmPackage.MODEL__INCLUDE:
        return basicSetInclude(null, msgs);
      case XDstmPackage.MODEL__MACHINES:
        return ((InternalEList<?>)getMachines()).basicRemove(otherEnd, msgs);
      case XDstmPackage.MODEL__DSTM:
        return ((InternalEList<?>)getDstm()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDstmPackage.MODEL__INCLUDE:
        return getInclude();
      case XDstmPackage.MODEL__MACHINES:
        return getMachines();
      case XDstmPackage.MODEL__DSTM:
        return getDstm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDstmPackage.MODEL__INCLUDE:
        setInclude((include)newValue);
        return;
      case XDstmPackage.MODEL__MACHINES:
        getMachines().clear();
        getMachines().addAll((Collection<? extends Machine>)newValue);
        return;
      case XDstmPackage.MODEL__DSTM:
        getDstm().clear();
        getDstm().addAll((Collection<? extends DSTM>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDstmPackage.MODEL__INCLUDE:
        setInclude((include)null);
        return;
      case XDstmPackage.MODEL__MACHINES:
        getMachines().clear();
        return;
      case XDstmPackage.MODEL__DSTM:
        getDstm().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDstmPackage.MODEL__INCLUDE:
        return include != null;
      case XDstmPackage.MODEL__MACHINES:
        return machines != null && !machines.isEmpty();
      case XDstmPackage.MODEL__DSTM:
        return dstm != null && !dstm.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
