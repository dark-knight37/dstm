/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.transition.trigger.analysis;

import java.util.*;
import org.prgmdl.dstmverifier.transition.trigger.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPTrigger().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAUniqueTrigger(AUniqueTrigger node)
    {
        defaultIn(node);
    }

    public void outAUniqueTrigger(AUniqueTrigger node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniqueTrigger(AUniqueTrigger node)
    {
        inAUniqueTrigger(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAUniqueTrigger(node);
    }

    public void inANestedTerm(ANestedTerm node)
    {
        defaultIn(node);
    }

    public void outANestedTerm(ANestedTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedTerm(ANestedTerm node)
    {
        inANestedTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outANestedTerm(node);
    }

    public void inAUnaryTerm(AUnaryTerm node)
    {
        defaultIn(node);
    }

    public void outAUnaryTerm(AUnaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryTerm(AUnaryTerm node)
    {
        inAUnaryTerm(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAUnaryTerm(node);
    }

    public void inASimpleTerm(ASimpleTerm node)
    {
        defaultIn(node);
    }

    public void outASimpleTerm(ASimpleTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTerm(ASimpleTerm node)
    {
        inASimpleTerm(node);
        if(node.getAtomic() != null)
        {
            node.getAtomic().apply(this);
        }
        outASimpleTerm(node);
    }

    public void inABinaryTerm(ABinaryTerm node)
    {
        defaultIn(node);
    }

    public void outABinaryTerm(ABinaryTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryTerm(ABinaryTerm node)
    {
        inABinaryTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getBinop() != null)
        {
            node.getBinop().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outABinaryTerm(node);
    }

    public void inAAndopBinop(AAndopBinop node)
    {
        defaultIn(node);
    }

    public void outAAndopBinop(AAndopBinop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndopBinop(AAndopBinop node)
    {
        inAAndopBinop(node);
        if(node.getAmpAmp() != null)
        {
            node.getAmpAmp().apply(this);
        }
        outAAndopBinop(node);
    }

    public void inAOropBinop(AOropBinop node)
    {
        defaultIn(node);
    }

    public void outAOropBinop(AOropBinop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOropBinop(AOropBinop node)
    {
        inAOropBinop(node);
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        outAOropBinop(node);
    }

    public void inALeftFirst(ALeftFirst node)
    {
        defaultIn(node);
    }

    public void outALeftFirst(ALeftFirst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeftFirst(ALeftFirst node)
    {
        inALeftFirst(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outALeftFirst(node);
    }

    public void inARightSecond(ARightSecond node)
    {
        defaultIn(node);
    }

    public void outARightSecond(ARightSecond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightSecond(ARightSecond node)
    {
        inARightSecond(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outARightSecond(node);
    }

    public void inAMessageAtomic(AMessageAtomic node)
    {
        defaultIn(node);
    }

    public void outAMessageAtomic(AMessageAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMessageAtomic(AMessageAtomic node)
    {
        inAMessageAtomic(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        outAMessageAtomic(node);
    }

    public void inAMessagetypeAtomic(AMessagetypeAtomic node)
    {
        defaultIn(node);
    }

    public void outAMessagetypeAtomic(AMessagetypeAtomic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMessagetypeAtomic(AMessagetypeAtomic node)
    {
        inAMessagetypeAtomic(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getQmark() != null)
        {
            node.getQmark().apply(this);
        }
        if(node.getSimpletype() != null)
        {
            node.getSimpletype().apply(this);
        }
        outAMessagetypeAtomic(node);
    }

    public void inABasicSimpletype(ABasicSimpletype node)
    {
        defaultIn(node);
    }

    public void outABasicSimpletype(ABasicSimpletype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicSimpletype(ABasicSimpletype node)
    {
        inABasicSimpletype(node);
        if(node.getBasic() != null)
        {
            node.getBasic().apply(this);
        }
        outABasicSimpletype(node);
    }

    public void inACompoundSimpletype(ACompoundSimpletype node)
    {
        defaultIn(node);
    }

    public void outACompoundSimpletype(ACompoundSimpletype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundSimpletype(ACompoundSimpletype node)
    {
        inACompoundSimpletype(node);
        if(node.getCompoundName() != null)
        {
            node.getCompoundName().apply(this);
        }
        outACompoundSimpletype(node);
    }

    public void inAIdCompoundName(AIdCompoundName node)
    {
        defaultIn(node);
    }

    public void outAIdCompoundName(AIdCompoundName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdCompoundName(AIdCompoundName node)
    {
        inAIdCompoundName(node);
        if(node.getDefined() != null)
        {
            node.getDefined().apply(this);
        }
        outAIdCompoundName(node);
    }

    public void inAIntBasic(AIntBasic node)
    {
        defaultIn(node);
    }

    public void outAIntBasic(AIntBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntBasic(AIntBasic node)
    {
        inAIntBasic(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntBasic(node);
    }

    public void inABoolBasic(ABoolBasic node)
    {
        defaultIn(node);
    }

    public void outABoolBasic(ABoolBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolBasic(ABoolBasic node)
    {
        inABoolBasic(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolBasic(node);
    }

    public void inAEnameBasic(AEnameBasic node)
    {
        defaultIn(node);
    }

    public void outAEnameBasic(AEnameBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnameBasic(AEnameBasic node)
    {
        inAEnameBasic(node);
        if(node.getEName() != null)
        {
            node.getEName().apply(this);
        }
        outAEnameBasic(node);
    }

    public void inAChantBasic(AChantBasic node)
    {
        defaultIn(node);
    }

    public void outAChantBasic(AChantBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChantBasic(AChantBasic node)
    {
        inAChantBasic(node);
        if(node.getChn() != null)
        {
            node.getChn().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getDefined() != null)
        {
            node.getDefined().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outAChantBasic(node);
    }

    public void inAChnBasic(AChnBasic node)
    {
        defaultIn(node);
    }

    public void outAChnBasic(AChnBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChnBasic(AChnBasic node)
    {
        inAChnBasic(node);
        if(node.getChn() != null)
        {
            node.getChn().apply(this);
        }
        outAChnBasic(node);
    }

    public void inAEnumEName(AEnumEName node)
    {
        defaultIn(node);
    }

    public void outAEnumEName(AEnumEName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumEName(AEnumEName node)
    {
        inAEnumEName(node);
        if(node.getDefined() != null)
        {
            node.getDefined().apply(this);
        }
        outAEnumEName(node);
    }

    public void inASimpleVar(ASimpleVar node)
    {
        defaultIn(node);
    }

    public void outASimpleVar(ASimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        inASimpleVar(node);
        if(node.getDefined() != null)
        {
            node.getDefined().apply(this);
        }
        outASimpleVar(node);
    }

    public void inASimpleDefined(ASimpleDefined node)
    {
        defaultIn(node);
    }

    public void outASimpleDefined(ASimpleDefined node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleDefined(ASimpleDefined node)
    {
        inASimpleDefined(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASimpleDefined(node);
    }
}
