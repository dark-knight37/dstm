/*
 * generated by Xtext 2.13.0
 */
package org.xtext.unina.xdstmdata.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XdstmdataGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.tTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTEnumAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTEnumTEnumParserRuleCall_0_0_0 = (RuleCall)cTEnumAssignment_0_0.eContents().get(0);
		private final Assignment cTCompoundAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTCompoundTCompoundParserRuleCall_0_1_0 = (RuleCall)cTCompoundAssignment_0_1.eContents().get(0);
		private final Assignment cTMultitypeAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTMultitypeTMultitypeParserRuleCall_0_2_0 = (RuleCall)cTMultitypeAssignment_0_2.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCIntchannelAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCIntchannelCIntchannelParserRuleCall_1_0_0 = (RuleCall)cCIntchannelAssignment_1_0.eContents().get(0);
		private final Assignment cCExtchannelAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCExtchannelCExtchannelParserRuleCall_1_1_0 = (RuleCall)cCExtchannelAssignment_1_1.eContents().get(0);
		private final Assignment cVVariableAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cVVariableVVariableParserRuleCall_1_2_0 = (RuleCall)cVVariableAssignment_1_2.eContents().get(0);
		
		//tTypes:
		//	(tEnum+=tEnum | tCompound+=tCompound | tMultitype+=tMultitype)* (cIntchannel+=cIntchannel | cExtchannel+=cExtchannel
		//	| vVariable+=vVariable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tEnum+=tEnum | tCompound+=tCompound | tMultitype+=tMultitype)* (cIntchannel+=cIntchannel | cExtchannel+=cExtchannel |
		//vVariable+=vVariable)*
		public Group getGroup() { return cGroup; }
		
		//(tEnum+=tEnum | tCompound+=tCompound | tMultitype+=tMultitype)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//tEnum+=tEnum
		public Assignment getTEnumAssignment_0_0() { return cTEnumAssignment_0_0; }
		
		//tEnum
		public RuleCall getTEnumTEnumParserRuleCall_0_0_0() { return cTEnumTEnumParserRuleCall_0_0_0; }
		
		//tCompound+=tCompound
		public Assignment getTCompoundAssignment_0_1() { return cTCompoundAssignment_0_1; }
		
		//tCompound
		public RuleCall getTCompoundTCompoundParserRuleCall_0_1_0() { return cTCompoundTCompoundParserRuleCall_0_1_0; }
		
		//tMultitype+=tMultitype
		public Assignment getTMultitypeAssignment_0_2() { return cTMultitypeAssignment_0_2; }
		
		//tMultitype
		public RuleCall getTMultitypeTMultitypeParserRuleCall_0_2_0() { return cTMultitypeTMultitypeParserRuleCall_0_2_0; }
		
		//(cIntchannel+=cIntchannel | cExtchannel+=cExtchannel | vVariable+=vVariable)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//cIntchannel+=cIntchannel
		public Assignment getCIntchannelAssignment_1_0() { return cCIntchannelAssignment_1_0; }
		
		//cIntchannel
		public RuleCall getCIntchannelCIntchannelParserRuleCall_1_0_0() { return cCIntchannelCIntchannelParserRuleCall_1_0_0; }
		
		//cExtchannel+=cExtchannel
		public Assignment getCExtchannelAssignment_1_1() { return cCExtchannelAssignment_1_1; }
		
		//cExtchannel
		public RuleCall getCExtchannelCExtchannelParserRuleCall_1_1_0() { return cCExtchannelCExtchannelParserRuleCall_1_1_0; }
		
		//vVariable+=vVariable
		public Assignment getVVariableAssignment_1_2() { return cVVariableAssignment_1_2; }
		
		//vVariable
		public RuleCall getVVariableVVariableParserRuleCall_1_2_0() { return cVVariableVVariableParserRuleCall_1_2_0; }
	}
	public class TEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.tEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsIDTerminalRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralsIDTerminalRuleCall_4_1_0 = (RuleCall)cLiteralsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//tEnum:
		//	'Enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literals+=ID
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }
		
		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_3_0() { return cLiteralsIDTerminalRuleCall_3_0; }
		
		//(',' literals+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//literals+=ID
		public Assignment getLiteralsAssignment_4_1() { return cLiteralsAssignment_4_1; }
		
		//ID
		public RuleCall getLiteralsIDTerminalRuleCall_4_1_0() { return cLiteralsIDTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class TCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.tCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubtypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubtypesSubtypeParserRuleCall_3_0 = (RuleCall)cSubtypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubtypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubtypesSubtypeParserRuleCall_4_1_0 = (RuleCall)cSubtypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//tCompound:
		//	'Struct' name=ID '{'
		//	subtypes+=subtype (',' subtypes+=subtype)*
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Struct' name=ID '{' subtypes+=subtype (',' subtypes+=subtype)* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//subtypes+=subtype
		public Assignment getSubtypesAssignment_3() { return cSubtypesAssignment_3; }
		
		//subtype
		public RuleCall getSubtypesSubtypeParserRuleCall_3_0() { return cSubtypesSubtypeParserRuleCall_3_0; }
		
		//(',' subtypes+=subtype)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//subtypes+=subtype
		public Assignment getSubtypesAssignment_4_1() { return cSubtypesAssignment_4_1; }
		
		//subtype
		public RuleCall getSubtypesSubtypeParserRuleCall_4_1_0() { return cSubtypesSubtypeParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SubtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.subtype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTStringIntKeyword_0_0 = (Keyword)cTStringAssignment_0.eContents().get(0);
		private final Assignment cTStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTStringBoolKeyword_1_0 = (Keyword)cTStringAssignment_1.eContents().get(0);
		private final Assignment cTChnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTChnChannel_specifierParserRuleCall_2_0 = (RuleCall)cTChnAssignment_2.eContents().get(0);
		private final Assignment cTIDAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTIDIDTerminalRuleCall_3_0 = (RuleCall)cTIDAssignment_3.eContents().get(0);
		
		//subtype:
		//	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tString='Int'
		public Assignment getTStringAssignment_0() { return cTStringAssignment_0; }
		
		//'Int'
		public Keyword getTStringIntKeyword_0_0() { return cTStringIntKeyword_0_0; }
		
		//tString='Bool'
		public Assignment getTStringAssignment_1() { return cTStringAssignment_1; }
		
		//'Bool'
		public Keyword getTStringBoolKeyword_1_0() { return cTStringBoolKeyword_1_0; }
		
		//tChn=channel_specifier
		public Assignment getTChnAssignment_2() { return cTChnAssignment_2; }
		
		//channel_specifier
		public RuleCall getTChnChannel_specifierParserRuleCall_2_0() { return cTChnChannel_specifierParserRuleCall_2_0; }
		
		//tID=ID
		public Assignment getTIDAssignment_3() { return cTIDAssignment_3; }
		
		//ID
		public RuleCall getTIDIDTerminalRuleCall_3_0() { return cTIDIDTerminalRuleCall_3_0; }
	}
	public class Channel_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.channel_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cChannel_specifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cChnKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cChnIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cChnBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//channel_specifier:
		//	{channel_specifier}
		//	'Chn[' type=ID ']' | 'Chn[Int]' | 'Chn[Bool]';
		@Override public ParserRule getRule() { return rule; }
		
		//{channel_specifier} 'Chn[' type=ID ']' | 'Chn[Int]' | 'Chn[Bool]'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{channel_specifier} 'Chn[' type=ID ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{channel_specifier}
		public Action getChannel_specifierAction_0_0() { return cChannel_specifierAction_0_0; }
		
		//'Chn['
		public Keyword getChnKeyword_0_1() { return cChnKeyword_0_1; }
		
		//type=ID
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_2_0() { return cTypeIDTerminalRuleCall_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//'Chn[Int]'
		public Keyword getChnIntKeyword_1() { return cChnIntKeyword_1; }
		
		//'Chn[Bool]'
		public Keyword getChnBoolKeyword_2() { return cChnBoolKeyword_2; }
	}
	public class TMultitypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.tMultitype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComposingtypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComposingtypesComposingtypeParserRuleCall_3_0 = (RuleCall)cComposingtypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComposingtypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComposingtypesComposingtypeParserRuleCall_4_1_0 = (RuleCall)cComposingtypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//tMultitype:
		//	'Mtype' name=ID
		//	'{'
		//	composingtypes+=composingtype (',' composingtypes+=composingtype)*
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mtype' name=ID '{' composingtypes+=composingtype (',' composingtypes+=composingtype)* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Mtype'
		public Keyword getMtypeKeyword_0() { return cMtypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//composingtypes+=composingtype
		public Assignment getComposingtypesAssignment_3() { return cComposingtypesAssignment_3; }
		
		//composingtype
		public RuleCall getComposingtypesComposingtypeParserRuleCall_3_0() { return cComposingtypesComposingtypeParserRuleCall_3_0; }
		
		//(',' composingtypes+=composingtype)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//composingtypes+=composingtype
		public Assignment getComposingtypesAssignment_4_1() { return cComposingtypesAssignment_4_1; }
		
		//composingtype
		public RuleCall getComposingtypesComposingtypeParserRuleCall_4_1_0() { return cComposingtypesComposingtypeParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ComposingtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.composingtype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTStringIntKeyword_0_0 = (Keyword)cTStringAssignment_0.eContents().get(0);
		private final Assignment cTStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTStringBoolKeyword_1_0 = (Keyword)cTStringAssignment_1.eContents().get(0);
		private final Assignment cTChnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTChnChannel_specifierParserRuleCall_2_0 = (RuleCall)cTChnAssignment_2.eContents().get(0);
		private final Assignment cTIDAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTIDIDTerminalRuleCall_3_0 = (RuleCall)cTIDAssignment_3.eContents().get(0);
		
		//composingtype:
		//	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tString='Int'
		public Assignment getTStringAssignment_0() { return cTStringAssignment_0; }
		
		//'Int'
		public Keyword getTStringIntKeyword_0_0() { return cTStringIntKeyword_0_0; }
		
		//tString='Bool'
		public Assignment getTStringAssignment_1() { return cTStringAssignment_1; }
		
		//'Bool'
		public Keyword getTStringBoolKeyword_1_0() { return cTStringBoolKeyword_1_0; }
		
		//tChn=channel_specifier
		public Assignment getTChnAssignment_2() { return cTChnAssignment_2; }
		
		//channel_specifier
		public RuleCall getTChnChannel_specifierParserRuleCall_2_0() { return cTChnChannel_specifierParserRuleCall_2_0; }
		
		//tID=ID
		public Assignment getTIDAssignment_3() { return cTIDAssignment_3; }
		
		//ID
		public RuleCall getTIDIDTerminalRuleCall_3_0() { return cTIDIDTerminalRuleCall_3_0; }
	}
	public class CIntchannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.cIntchannel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoundINTTerminalRuleCall_4_0 = (RuleCall)cBoundAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTStringAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final Keyword cTStringIntKeyword_7_0_0 = (Keyword)cTStringAssignment_7_0.eContents().get(0);
		private final Assignment cTStringAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cTStringBoolKeyword_7_1_0 = (Keyword)cTStringAssignment_7_1.eContents().get(0);
		private final Assignment cTChnAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cTChnChannel_specifierParserRuleCall_7_2_0 = (RuleCall)cTChnAssignment_7_2.eContents().get(0);
		private final Assignment cTIDAssignment_7_3 = (Assignment)cAlternatives_7.eContents().get(3);
		private final RuleCall cTIDIDTerminalRuleCall_7_3_0 = (RuleCall)cTIDAssignment_7_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//cIntchannel:
		//	'Chn' 'internal'
		//	name=ID
		//	'[' bound=INT ']'
		//	'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Chn' 'internal' name=ID '[' bound=INT ']' 'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';'
		public Group getGroup() { return cGroup; }
		
		//'Chn'
		public Keyword getChnKeyword_0() { return cChnKeyword_0; }
		
		//'internal'
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//bound=INT
		public Assignment getBoundAssignment_4() { return cBoundAssignment_4; }
		
		//INT
		public RuleCall getBoundINTTerminalRuleCall_4_0() { return cBoundINTTerminalRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//'of'
		public Keyword getOfKeyword_6() { return cOfKeyword_6; }
		
		//tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//tString='Int'
		public Assignment getTStringAssignment_7_0() { return cTStringAssignment_7_0; }
		
		//'Int'
		public Keyword getTStringIntKeyword_7_0_0() { return cTStringIntKeyword_7_0_0; }
		
		//tString='Bool'
		public Assignment getTStringAssignment_7_1() { return cTStringAssignment_7_1; }
		
		//'Bool'
		public Keyword getTStringBoolKeyword_7_1_0() { return cTStringBoolKeyword_7_1_0; }
		
		//tChn=channel_specifier
		public Assignment getTChnAssignment_7_2() { return cTChnAssignment_7_2; }
		
		//channel_specifier
		public RuleCall getTChnChannel_specifierParserRuleCall_7_2_0() { return cTChnChannel_specifierParserRuleCall_7_2_0; }
		
		//tID=ID
		public Assignment getTIDAssignment_7_3() { return cTIDAssignment_7_3; }
		
		//ID
		public RuleCall getTIDIDTerminalRuleCall_7_3_0() { return cTIDIDTerminalRuleCall_7_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class CExtchannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.cExtchannel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTStringAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cTStringIntKeyword_4_0_0 = (Keyword)cTStringAssignment_4_0.eContents().get(0);
		private final Assignment cTStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cTStringBoolKeyword_4_1_0 = (Keyword)cTStringAssignment_4_1.eContents().get(0);
		private final Assignment cTChnAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cTChnChannel_specifierParserRuleCall_4_2_0 = (RuleCall)cTChnAssignment_4_2.eContents().get(0);
		private final Assignment cTIDAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cTIDIDTerminalRuleCall_4_3_0 = (RuleCall)cTIDAssignment_4_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//cExtchannel:
		//	'Chn' 'external'
		//	name=ID
		//	'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'Chn' 'external' name=ID 'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';'
		public Group getGroup() { return cGroup; }
		
		//'Chn'
		public Keyword getChnKeyword_0() { return cChnKeyword_0; }
		
		//'external'
		public Keyword getExternalKeyword_1() { return cExternalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//tString='Int'
		public Assignment getTStringAssignment_4_0() { return cTStringAssignment_4_0; }
		
		//'Int'
		public Keyword getTStringIntKeyword_4_0_0() { return cTStringIntKeyword_4_0_0; }
		
		//tString='Bool'
		public Assignment getTStringAssignment_4_1() { return cTStringAssignment_4_1; }
		
		//'Bool'
		public Keyword getTStringBoolKeyword_4_1_0() { return cTStringBoolKeyword_4_1_0; }
		
		//tChn=channel_specifier
		public Assignment getTChnAssignment_4_2() { return cTChnAssignment_4_2; }
		
		//channel_specifier
		public RuleCall getTChnChannel_specifierParserRuleCall_4_2_0() { return cTChnChannel_specifierParserRuleCall_4_2_0; }
		
		//tID=ID
		public Assignment getTIDAssignment_4_3() { return cTIDAssignment_4_3; }
		
		//ID
		public RuleCall getTIDIDTerminalRuleCall_4_3_0() { return cTIDIDTerminalRuleCall_4_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class VVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.unina.xdstmdata.Xdstmdata.vVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTStringAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cTStringIntKeyword_0_0_0 = (Keyword)cTStringAssignment_0_0.eContents().get(0);
		private final Assignment cTStringAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cTStringBoolKeyword_0_1_0 = (Keyword)cTStringAssignment_0_1.eContents().get(0);
		private final Assignment cTChnAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cTChnChannel_specifierParserRuleCall_0_2_0 = (RuleCall)cTChnAssignment_0_2.eContents().get(0);
		private final Assignment cTIDAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cTIDIDTerminalRuleCall_0_3_0 = (RuleCall)cTIDAssignment_0_3.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//vVariable:
		//	(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//tString='Int'
		public Assignment getTStringAssignment_0_0() { return cTStringAssignment_0_0; }
		
		//'Int'
		public Keyword getTStringIntKeyword_0_0_0() { return cTStringIntKeyword_0_0_0; }
		
		//tString='Bool'
		public Assignment getTStringAssignment_0_1() { return cTStringAssignment_0_1; }
		
		//'Bool'
		public Keyword getTStringBoolKeyword_0_1_0() { return cTStringBoolKeyword_0_1_0; }
		
		//tChn=channel_specifier
		public Assignment getTChnAssignment_0_2() { return cTChnAssignment_0_2; }
		
		//channel_specifier
		public RuleCall getTChnChannel_specifierParserRuleCall_0_2_0() { return cTChnChannel_specifierParserRuleCall_0_2_0; }
		
		//tID=ID
		public Assignment getTIDAssignment_0_3() { return cTIDAssignment_0_3; }
		
		//ID
		public RuleCall getTIDIDTerminalRuleCall_0_3_0() { return cTIDIDTerminalRuleCall_0_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private final TTypesElements pTTypes;
	private final TEnumElements pTEnum;
	private final TCompoundElements pTCompound;
	private final SubtypeElements pSubtype;
	private final Channel_specifierElements pChannel_specifier;
	private final TMultitypeElements pTMultitype;
	private final ComposingtypeElements pComposingtype;
	private final CIntchannelElements pCIntchannel;
	private final CExtchannelElements pCExtchannel;
	private final VVariableElements pVVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XdstmdataGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTTypes = new TTypesElements();
		this.pTEnum = new TEnumElements();
		this.pTCompound = new TCompoundElements();
		this.pSubtype = new SubtypeElements();
		this.pChannel_specifier = new Channel_specifierElements();
		this.pTMultitype = new TMultitypeElements();
		this.pComposingtype = new ComposingtypeElements();
		this.pCIntchannel = new CIntchannelElements();
		this.pCExtchannel = new CExtchannelElements();
		this.pVVariable = new VVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.unina.xdstmdata.Xdstmdata".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//tTypes:
	//	(tEnum+=tEnum | tCompound+=tCompound | tMultitype+=tMultitype)* (cIntchannel+=cIntchannel | cExtchannel+=cExtchannel
	//	| vVariable+=vVariable)*;
	public TTypesElements getTTypesAccess() {
		return pTTypes;
	}
	
	public ParserRule getTTypesRule() {
		return getTTypesAccess().getRule();
	}
	
	//tEnum:
	//	'Enum' name=ID '{' literals+=ID (',' literals+=ID)* '}' ';';
	public TEnumElements getTEnumAccess() {
		return pTEnum;
	}
	
	public ParserRule getTEnumRule() {
		return getTEnumAccess().getRule();
	}
	
	//tCompound:
	//	'Struct' name=ID '{'
	//	subtypes+=subtype (',' subtypes+=subtype)*
	//	'}' ';';
	public TCompoundElements getTCompoundAccess() {
		return pTCompound;
	}
	
	public ParserRule getTCompoundRule() {
		return getTCompoundAccess().getRule();
	}
	
	//subtype:
	//	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID;
	public SubtypeElements getSubtypeAccess() {
		return pSubtype;
	}
	
	public ParserRule getSubtypeRule() {
		return getSubtypeAccess().getRule();
	}
	
	//channel_specifier:
	//	{channel_specifier}
	//	'Chn[' type=ID ']' | 'Chn[Int]' | 'Chn[Bool]';
	public Channel_specifierElements getChannel_specifierAccess() {
		return pChannel_specifier;
	}
	
	public ParserRule getChannel_specifierRule() {
		return getChannel_specifierAccess().getRule();
	}
	
	//tMultitype:
	//	'Mtype' name=ID
	//	'{'
	//	composingtypes+=composingtype (',' composingtypes+=composingtype)*
	//	'}' ';';
	public TMultitypeElements getTMultitypeAccess() {
		return pTMultitype;
	}
	
	public ParserRule getTMultitypeRule() {
		return getTMultitypeAccess().getRule();
	}
	
	//composingtype:
	//	tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID;
	public ComposingtypeElements getComposingtypeAccess() {
		return pComposingtype;
	}
	
	public ParserRule getComposingtypeRule() {
		return getComposingtypeAccess().getRule();
	}
	
	//cIntchannel:
	//	'Chn' 'internal'
	//	name=ID
	//	'[' bound=INT ']'
	//	'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';';
	public CIntchannelElements getCIntchannelAccess() {
		return pCIntchannel;
	}
	
	public ParserRule getCIntchannelRule() {
		return getCIntchannelAccess().getRule();
	}
	
	//cExtchannel:
	//	'Chn' 'external'
	//	name=ID
	//	'of' (tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) ';';
	public CExtchannelElements getCExtchannelAccess() {
		return pCExtchannel;
	}
	
	public ParserRule getCExtchannelRule() {
		return getCExtchannelAccess().getRule();
	}
	
	//vVariable:
	//	(tString='Int' | tString='Bool' | tChn=channel_specifier | tID=ID) name=ID ';';
	public VVariableElements getVVariableAccess() {
		return pVVariable;
	}
	
	public ParserRule getVVariableRule() {
		return getVVariableAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
