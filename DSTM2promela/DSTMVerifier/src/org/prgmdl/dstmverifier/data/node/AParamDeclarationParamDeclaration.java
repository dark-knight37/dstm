/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.prgmdl.dstmverifier.data.node;

import org.prgmdl.dstmverifier.data.analysis.*;

@SuppressWarnings("nls")
public final class AParamDeclarationParamDeclaration extends PParamDeclaration
{
    private TParamkey _paramkey_;
    private PPName _pName_;
    private TColon _colon_;
    private PVarType _varType_;
    private TOf _of_;
    private PMachineName _machineName_;

    public AParamDeclarationParamDeclaration()
    {
        // Constructor
    }

    public AParamDeclarationParamDeclaration(
        @SuppressWarnings("hiding") TParamkey _paramkey_,
        @SuppressWarnings("hiding") PPName _pName_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PVarType _varType_,
        @SuppressWarnings("hiding") TOf _of_,
        @SuppressWarnings("hiding") PMachineName _machineName_)
    {
        // Constructor
        setParamkey(_paramkey_);

        setPName(_pName_);

        setColon(_colon_);

        setVarType(_varType_);

        setOf(_of_);

        setMachineName(_machineName_);

    }

    @Override
    public Object clone()
    {
        return new AParamDeclarationParamDeclaration(
            cloneNode(this._paramkey_),
            cloneNode(this._pName_),
            cloneNode(this._colon_),
            cloneNode(this._varType_),
            cloneNode(this._of_),
            cloneNode(this._machineName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamDeclarationParamDeclaration(this);
    }

    public TParamkey getParamkey()
    {
        return this._paramkey_;
    }

    public void setParamkey(TParamkey node)
    {
        if(this._paramkey_ != null)
        {
            this._paramkey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramkey_ = node;
    }

    public PPName getPName()
    {
        return this._pName_;
    }

    public void setPName(PPName node)
    {
        if(this._pName_ != null)
        {
            this._pName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pName_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PVarType getVarType()
    {
        return this._varType_;
    }

    public void setVarType(PVarType node)
    {
        if(this._varType_ != null)
        {
            this._varType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varType_ = node;
    }

    public TOf getOf()
    {
        return this._of_;
    }

    public void setOf(TOf node)
    {
        if(this._of_ != null)
        {
            this._of_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._of_ = node;
    }

    public PMachineName getMachineName()
    {
        return this._machineName_;
    }

    public void setMachineName(PMachineName node)
    {
        if(this._machineName_ != null)
        {
            this._machineName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._machineName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._paramkey_)
            + toString(this._pName_)
            + toString(this._colon_)
            + toString(this._varType_)
            + toString(this._of_)
            + toString(this._machineName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._paramkey_ == child)
        {
            this._paramkey_ = null;
            return;
        }

        if(this._pName_ == child)
        {
            this._pName_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._varType_ == child)
        {
            this._varType_ = null;
            return;
        }

        if(this._of_ == child)
        {
            this._of_ = null;
            return;
        }

        if(this._machineName_ == child)
        {
            this._machineName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._paramkey_ == oldChild)
        {
            setParamkey((TParamkey) newChild);
            return;
        }

        if(this._pName_ == oldChild)
        {
            setPName((PPName) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._varType_ == oldChild)
        {
            setVarType((PVarType) newChild);
            return;
        }

        if(this._of_ == oldChild)
        {
            setOf((TOf) newChild);
            return;
        }

        if(this._machineName_ == oldChild)
        {
            setMachineName((PMachineName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
